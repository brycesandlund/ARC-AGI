[
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, color mapping, scaling\n\n# description:\n# In the input, you will see a colored object (a 2x2 square) in the center of the grid. \n# To make the output, scale the object to a 4x4 square by repeating each pixel \n# and change its color based on a specified mapping (e.g., red to blue, blue to green). \n# Output the transformed object in the same center position.\n\ndef main(input_grid):\n    # Initialize output grid\n    output_grid = np.full((4, 4), Color.BLACK)\n\n    # Define the scaling factor\n    scale_factor = 2\n\n    # Define the color mapping\n    color_map = {\n        Color.RED: Color.BLUE,\n        Color.BLUE: Color.GREEN,\n        Color.GREEN: Color.YELLOW,\n        Color.YELLOW: Color.RED,\n        Color.BLACK: Color.BLACK,\n        Color.GREY: Color.GREY,\n        Color.PINK: Color.PINK,\n        Color.ORANGE: Color.ORANGE,\n        Color.TEAL: Color.TEAL,\n        Color.MAROON: Color.MAROON,\n    }\n\n    # Extract the 2x2 colored object from the center of the input grid\n    colored_object = input_grid[1:3, 1:3]\n\n    # Scale up the object by repeating each pixel\n    for i in range(2):\n        for j in range(2):\n            color = colored_object[i, j]\n            new_color = color_map.get(color, color)  # Map color if it exists in color_map\n            output_grid[i*scale_factor:(i+1)*scale_factor, j*scale_factor:(j+1)*scale_factor] = new_color\n\n    return output_grid\n\n\ndef generate_input():\n    # Generate a 3x3 grid with a 2x2 colored object in the center\n    grid = np.full((3, 3), Color.BLACK)\n\n    # Randomly choose a color for the object from the allowed colors\n    colors = [Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW]\n    color_choice = np.random.choice(colors)\n\n    # Create a 2x2 object in the center\n    grid[1:3, 1:3] = color_choice\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0
          ],
          [
            0,
            1,
            1
          ],
          [
            0,
            1,
            1
          ]
        ],
        [
          [
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0
          ],
          [
            0,
            3,
            3
          ],
          [
            0,
            3,
            3
          ]
        ],
        [
          [
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0
          ],
          [
            0,
            2,
            2
          ],
          [
            0,
            2,
            2
          ]
        ],
        [
          [
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0
          ],
          [
            0,
            4,
            4
          ],
          [
            0,
            4,
            4
          ]
        ],
        [
          [
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2
          ]
        ]
      ]
    ],
    "seeds": [
      "0d3d703e.py",
      "a8c38be5.py",
      "0ca9ddb6.py",
      "44f52bb0.py"
    ],
    "problem_id": 912
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, symmetry detection, centering\n\n# description:\n# In the input, you will see a grid containing a symmetrical pattern that may be rotated.\n# To create the output, detect the rotation angle that maintains the symmetry and rotate the pattern back to its original orientation, centering it in the grid.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Identify the size of the grid\n    n, m = input_grid.shape\n\n    # Define the possible rotation angles (0, 90, 180, 270 degrees)\n    rotations = [0, 1, 2, 3]\n    symmetrical_rotation = None\n\n    # Check each rotation for symmetry\n    for rotation in rotations:\n        # Rotate the grid\n        rotated_grid = np.rot90(input_grid, rotation)\n        \n        # Check for symmetry along the vertical axis\n        if np.array_equal(rotated_grid, np.flip(rotated_grid, axis=1)):\n            symmetrical_rotation = rotation\n            break\n\n    # Rotate the grid back to its original orientation\n    if symmetrical_rotation is not None:\n        output_grid = np.rot90(input_grid, -symmetrical_rotation)\n    else:\n        output_grid = input_grid  # If no symmetry is found, keep it as is\n\n    # Center the output grid\n    centered_output = np.zeros_like(input_grid)  # Create a new grid of the same size filled with black\n    start_x = (n - output_grid.shape[0]) // 2\n    start_y = (m - output_grid.shape[1]) // 2\n    centered_output[start_x:start_x + output_grid.shape[0], start_y:start_y + output_grid.shape[1]] = output_grid\n\n    return centered_output\n\ndef generate_input() -> np.ndarray:\n    n, m = np.random.randint(4, 8), np.random.randint(4, 8)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly generate a symmetrical pattern\n    symmetry_type = np.random.choice(['horizontal', 'vertical', 'diagonal', 'not_symmetric'])\n    density = np.random.uniform(0.3, 0.7)\n    \n    # Generate the sprite with symmetry\n    sprite = random_sprite(n, m, density=density, symmetry=symmetry_type, color_palette=Color.NOT_BLACK)\n\n    # Rotate the sprite randomly to create the input\n    rotation_angle = np.random.randint(0, 4)\n    input_grid = np.rot90(sprite, rotation_angle)\n\n    return input_grid",
    "examples": [
      [
        [
          [
            1,
            1,
            1,
            4
          ],
          [
            1,
            5,
            1,
            0
          ],
          [
            1,
            5,
            1,
            0
          ],
          [
            1,
            1,
            1,
            4
          ]
        ],
        [
          [
            1,
            1,
            1,
            1
          ],
          [
            1,
            5,
            5,
            1
          ],
          [
            1,
            1,
            1,
            1
          ],
          [
            4,
            0,
            0,
            4
          ]
        ]
      ],
      [
        [
          [
            0,
            9,
            9,
            1,
            3,
            8
          ],
          [
            0,
            9,
            9,
            6,
            6,
            1
          ],
          [
            2,
            1,
            3,
            0,
            1,
            0
          ],
          [
            2,
            1,
            3,
            0,
            1,
            0
          ],
          [
            0,
            9,
            9,
            6,
            6,
            1
          ],
          [
            0,
            9,
            9,
            1,
            3,
            8
          ]
        ],
        [
          [
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            9,
            9,
            1,
            1,
            9,
            9
          ],
          [
            9,
            9,
            3,
            3,
            9,
            9
          ],
          [
            1,
            6,
            0,
            0,
            6,
            1
          ],
          [
            3,
            6,
            1,
            1,
            6,
            3
          ],
          [
            8,
            1,
            0,
            0,
            1,
            8
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            8,
            1,
            0,
            0,
            0
          ],
          [
            0,
            8,
            8,
            0,
            0,
            3,
            1
          ],
          [
            5,
            8,
            8,
            8,
            5,
            5,
            0
          ],
          [
            7,
            7,
            7,
            7,
            5,
            0,
            0
          ],
          [
            5,
            8,
            8,
            8,
            5,
            5,
            0
          ],
          [
            0,
            8,
            8,
            0,
            0,
            3,
            1
          ],
          [
            5,
            5,
            8,
            1,
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            0,
            5,
            7,
            5,
            0,
            5
          ],
          [
            5,
            8,
            8,
            7,
            8,
            8,
            5
          ],
          [
            8,
            8,
            8,
            7,
            8,
            8,
            8
          ],
          [
            1,
            0,
            8,
            7,
            8,
            0,
            1
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            3,
            5,
            0,
            5,
            3,
            0
          ],
          [
            0,
            1,
            0,
            0,
            0,
            1,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            8,
            8,
            3,
            0,
            0
          ],
          [
            1,
            1,
            2,
            7,
            3,
            3,
            3
          ],
          [
            8,
            1,
            1,
            6,
            4,
            3,
            3
          ],
          [
            0,
            9,
            9,
            6,
            9,
            9,
            0
          ],
          [
            8,
            1,
            1,
            6,
            4,
            3,
            3
          ],
          [
            1,
            1,
            2,
            7,
            3,
            3,
            3
          ],
          [
            0,
            0,
            8,
            8,
            3,
            0,
            0
          ]
        ],
        [
          [
            0,
            1,
            8,
            0,
            8,
            1,
            0
          ],
          [
            0,
            1,
            1,
            9,
            1,
            1,
            0
          ],
          [
            8,
            2,
            1,
            9,
            1,
            2,
            8
          ],
          [
            8,
            7,
            6,
            6,
            6,
            7,
            8
          ],
          [
            3,
            3,
            4,
            9,
            4,
            3,
            3
          ],
          [
            0,
            3,
            3,
            9,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            0,
            3,
            3,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "6fa7a44f.py",
      "bc1d5164.py",
      "3de23699.py"
    ],
    "problem_id": 1184
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# mirroring, color matching\n\n# description:\n# In the input, you will see a pattern of colored pixels in the center of the grid, surrounded by a ring of pixels of a different color. \n# To create the output, mirror the central pattern horizontally and fill the outer ring with the color of the mirrored pattern.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Step 1: Identify the center pattern and the surrounding ring\n    center_y, center_x = np.array(input_grid.shape) // 2\n    half_size = center_x // 2  # Assuming the center is roughly square\n\n    # Step 2: Crop the central pattern (assumed to be square)\n    central_pattern = input_grid[center_y - half_size:center_y + half_size, center_x - half_size:center_x + half_size]\n\n    # Step 3: Mirror the central pattern horizontally\n    mirrored_pattern = np.flip(central_pattern, axis=1)\n\n    # Step 4: Create the output grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)  # Initialize output grid\n    output_grid[center_y - half_size:center_y + half_size, center_x - half_size:center_x + half_size] = mirrored_pattern\n\n    # Step 5: Fill the outer ring with the color of the mirrored pattern (taking the top-left pixel as representative)\n    outer_color = mirrored_pattern[0, 0]\n    output_grid[:half_size, :] = outer_color  # Top outer row\n    output_grid[-half_size:, :] = outer_color  # Bottom outer row\n    output_grid[:, :half_size] = outer_color  # Left outer column\n    output_grid[:, -half_size:] = outer_color  # Right outer column\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a random central pattern size\n    n = np.random.randint(3, 6)\n    m = np.random.randint(3, 6)\n\n    # Create the central pattern with random colors\n    central_pattern = random_sprite(n, m, density=1, color_palette=Color.NOT_BLACK)\n\n    # Prepare the output grid size\n    output_grid_size = (n + 4, m + 4)  # Add a border for the outer ring\n    output_grid = np.full(output_grid_size, Color.BLACK)\n\n    # Place the central pattern in the middle of the output grid\n    center_y, center_x = output_grid_size[0] // 2, output_grid_size[1] // 2\n    output_grid[center_y - n // 2:center_y + n // 2, center_x - m // 2:center_x + m // 2] = central_pattern\n\n    # Fill the outer ring with a random color\n    outer_color = np.random.choice(Color.NOT_BLACK)\n    output_grid[:2, :] = outer_color  # Top outer row\n    output_grid[-2:, :] = outer_color  # Bottom outer row\n    output_grid[:, :2] = outer_color  # Left outer column\n    output_grid[:, -2:] = outer_color  # Right outer column\n\n    return output_grid",
    "examples": [
      [
        [
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            4,
            4,
            4,
            9,
            2,
            2
          ],
          [
            2,
            2,
            4,
            4,
            7,
            5,
            2,
            2
          ],
          [
            2,
            2,
            4,
            7,
            2,
            3,
            2,
            2
          ],
          [
            2,
            2,
            9,
            5,
            3,
            3,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ]
        ],
        [
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            4,
            4,
            4,
            9,
            9
          ],
          [
            9,
            9,
            5,
            7,
            4,
            4,
            9,
            9
          ],
          [
            9,
            9,
            3,
            2,
            7,
            4,
            9,
            9
          ],
          [
            9,
            9,
            3,
            3,
            5,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ]
        ]
      ],
      [
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            3,
            3,
            6,
            9,
            8,
            8
          ],
          [
            8,
            8,
            3,
            6,
            6,
            6,
            8,
            8
          ],
          [
            8,
            8,
            9,
            6,
            1,
            1,
            8,
            8
          ],
          [
            8,
            8,
            3,
            9,
            9,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ],
        [
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            6,
            3,
            3,
            9,
            9
          ],
          [
            9,
            9,
            6,
            6,
            6,
            3,
            9,
            9
          ],
          [
            9,
            9,
            1,
            1,
            6,
            9,
            9,
            9
          ],
          [
            9,
            9,
            8,
            9,
            9,
            3,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            2,
            7,
            5,
            7,
            4,
            4
          ],
          [
            4,
            4,
            3,
            7,
            7,
            7,
            4,
            4
          ],
          [
            4,
            4,
            3,
            4,
            4,
            1,
            4,
            4
          ],
          [
            4,
            4,
            9,
            9,
            5,
            3,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ]
        ],
        [
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            5,
            7,
            2,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            3,
            7,
            7
          ],
          [
            7,
            7,
            1,
            4,
            4,
            3,
            7,
            7
          ],
          [
            7,
            7,
            3,
            5,
            9,
            9,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            9,
            5,
            3,
            8,
            4,
            4
          ],
          [
            4,
            4,
            9,
            5,
            9,
            8,
            4,
            4
          ],
          [
            4,
            4,
            9,
            5,
            9,
            8,
            4,
            4
          ],
          [
            4,
            4,
            9,
            5,
            3,
            8,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            3,
            5,
            9,
            8,
            8
          ],
          [
            8,
            8,
            8,
            9,
            5,
            9,
            8,
            8
          ],
          [
            8,
            8,
            8,
            9,
            5,
            9,
            8,
            8
          ],
          [
            8,
            8,
            8,
            3,
            5,
            9,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "3de23699.py",
      "bc1d5164.py",
      "8e1813be.py"
    ],
    "problem_id": 2463
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotational symmetry, pattern duplication\n\n# description:\n# In the input, you will see a pattern in the center of the grid that exhibits rotational symmetry. \n# To create the output, duplicate this pattern in all four quadrants of the grid, ensuring that the symmetry is preserved in each quadrant.\n\ndef main(input_grid):\n    # Get the size of the input grid\n    n, m = input_grid.shape\n\n    # Determine the center of the grid to help with copying the pattern\n    center_x, center_y = n // 2, m // 2\n\n    # Create an output grid of the same size\n    output_grid = np.full((n, m), Color.BLACK)\n\n    # Copy the center pattern into all four quadrants\n    # Top-left quadrant\n    output_grid[0:center_x, 0:center_y] = input_grid[0:center_x, 0:center_y]\n\n    # Top-right quadrant\n    output_grid[0:center_x, center_y:m] = input_grid[0:center_x, 0:center_y]\n\n    # Bottom-left quadrant\n    output_grid[center_x:n, 0:center_y] = input_grid[0:center_x, 0:center_y]\n\n    # Bottom-right quadrant\n    output_grid[center_x:n, center_y:m] = input_grid[0:center_x, 0:center_y]\n\n    return output_grid\n\ndef generate_input():\n    # Create a grid with a random size\n    n = m = np.random.randint(4, 8)  # Ensure there's room for a pattern\n    grid = np.full((n, m), Color.BLACK)\n\n    # Create a random pattern in the center of the grid\n    center_x, center_y = n // 2, m // 2\n    pattern_size = np.random.randint(1, min(center_x, center_y))  # Size of the pattern\n\n    # Generate a random pattern that fits in the center\n    pattern = random_sprite(n=pattern_size, m=pattern_size, density=0.5, color_palette=Color.NOT_BLACK)\n\n    # Place the pattern in the center of the grid\n    grid[center_x - pattern_size // 2:center_x + pattern_size // 2,\n         center_y - pattern_size // 2:center_y + pattern_size // 2] = pattern\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            0,
            0,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            0,
            0,
            9
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            0,
            0,
            5
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            0,
            0,
            5
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            6
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "44f52bb0.py",
      "6b9890af.py"
    ],
    "problem_id": 2858
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# object encapsulation, color detection, bounding box\n\n# description:\n# In the input, you will see several colored objects scattered on a grid, some with a red border. \n# To make the output, find the largest object that has a red border, and encapsulate it with a blue border. \n# The output grid should only display this encapsulated object.\n\ndef main(input_grid):\n    # Find all objects with a red border\n    red_objects = detect_objects(grid=input_grid, colors=[Color.RED], monochromatic=False, connectivity=4)\n\n    # Identify the largest red-bordered object\n    largest_red_object = None\n    largest_area = 0\n\n    for obj in red_objects:\n        area = np.sum(obj != Color.BLACK)\n        if area > largest_area:\n            largest_area = area\n            largest_red_object = obj\n\n    # If no red object is found, return a blank grid\n    if largest_red_object is None:\n        return np.full(input_grid.shape, Color.BLACK)\n\n    # Create an output grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Get the bounding box of the largest red object\n    x, y, width, height = bounding_box(largest_red_object, background=Color.BLACK)\n\n    # Create a blue border around the bounding box\n    for i in range(x, x + width):\n        output_grid[i, y] = Color.BLUE  # top border\n        output_grid[i, y + height - 1] = Color.BLUE  # bottom border\n    for j in range(y, y + height):\n        output_grid[x, j] = Color.BLUE  # left border\n        output_grid[x + width - 1, j] = Color.BLUE  # right border\n\n    # Blit the largest red object itself onto the output grid\n    blit_object(output_grid, largest_red_object, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input():\n    # Generate a grid of random size\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly create several objects\n    for _ in range(np.random.randint(2, 6)):  # Create between 2 to 5 objects\n        # Generate a random sprite (object)\n        sprite_width, sprite_height = np.random.randint(1, 4), np.random.randint(1, 4)\n        sprite = random_sprite(n=sprite_width, m=sprite_height, color_palette=[Color.GREEN], density=0.7)\n\n        # Find a free location for the sprite and blit it to the grid\n        x, y = random_free_location_for_sprite(grid, sprite, background=Color.BLACK)\n        blit_sprite(grid, sprite, x, y, background=Color.BLACK)\n\n        # Randomly decide if we should create a red border around this object\n        if np.random.rand() > 0.5:  # 50% chance to add a red border\n            # Create a red border around the sprite\n            for i in range(x - 1, x + sprite_width + 1):\n                if 0 <= i < n:\n                    grid[i, y - 1] = Color.RED  # top border\n                    grid[i, y + sprite_height] = Color.RED  # bottom border\n            for j in range(y - 1, y + sprite_height + 1):\n                if 0 <= j < m:\n                    grid[x - 1, j] = Color.RED  # left border\n                    grid[x + sprite_width, j] = Color.RED  # right border\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            3,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            3,
            3,
            3,
            0,
            0
          ],
          [
            2,
            2,
            2,
            2,
            0,
            3,
            0,
            0,
            2
          ],
          [
            3,
            3,
            3,
            2,
            3,
            3,
            0,
            0,
            2
          ],
          [
            3,
            3,
            3,
            2,
            3,
            3,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2,
            3,
            3,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            3,
            3,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            2,
            3,
            3,
            3,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            3,
            3,
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            2,
            2,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            2,
            2,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            0
          ],
          [
            2,
            2,
            2,
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            3,
            3,
            3,
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            3,
            0,
            2
          ],
          [
            0,
            0,
            0,
            2,
            3,
            2,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            2,
            3,
            2,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            2,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            3,
            3,
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            3,
            2,
            3,
            0,
            0,
            0,
            2
          ],
          [
            3,
            3,
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "aedd82e4.py",
      "1f642eb9.py",
      "7447852a.py",
      "a79310a0.py"
    ],
    "problem_id": 2869
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color transformation, pattern expansion\n\n# description:\n# In the input, you will see a grid with a central pattern of colored pixels surrounded by a border of black pixels.\n# The goal is to create the output grid by expanding this pattern to all four sides while changing the colors according to a specified mapping. \n# For example, if the pattern contains red, it should change to blue in the output, and green should change to yellow.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Define the color mapping\n    color_mapping = {\n        Color.RED: Color.BLUE,\n        Color.GREEN: Color.YELLOW,\n        Color.BLUE: Color.GREEN,\n        Color.YELLOW: Color.RED,\n        Color.PINK: Color.TEAL,\n        Color.TEAL: Color.PINK,\n        Color.ORANGE: Color.MAROON,\n        Color.MAROON: Color.ORANGE,\n        # Keep black as black\n        Color.BLACK: Color.BLACK\n    }\n\n    # Extract the central pattern\n    pattern = crop(input_grid)\n\n    # Create the output grid, which is larger than the input grid\n    output_grid = np.full((pattern.shape[0] + 2, pattern.shape[1] + 2), Color.BLACK)\n\n    # Apply the color mapping to the central pattern and place it in the output grid\n    for i in range(pattern.shape[0]):\n        for j in range(pattern.shape[1]):\n            original_color = pattern[i, j]\n            new_color = color_mapping[original_color]\n            output_grid[i + 1, j + 1] = new_color\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly generate the size of the pattern\n    n, m = np.random.randint(3, 6), np.random.randint(3, 6)\n\n    # Generate a random central pattern\n    pattern_colors = np.random.choice(list(Color.NOT_BLACK), size=(n, m), replace=True)\n    \n    # Create the input grid with a border of black pixels\n    input_grid = np.full((n + 2, m + 2), Color.BLACK)\n    input_grid[1:-1, 1:-1] = pattern_colors\n\n    return input_grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            6,
            3,
            8,
            0
          ],
          [
            0,
            6,
            2,
            2,
            7,
            0
          ],
          [
            0,
            1,
            8,
            6,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            8,
            4,
            6,
            0
          ],
          [
            0,
            8,
            1,
            1,
            9,
            0
          ],
          [
            0,
            3,
            6,
            8,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            7,
            1,
            9,
            0
          ],
          [
            0,
            6,
            9,
            4,
            0
          ],
          [
            0,
            4,
            9,
            7,
            0
          ],
          [
            0,
            2,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            9,
            3,
            7,
            0
          ],
          [
            0,
            8,
            7,
            2,
            0
          ],
          [
            0,
            2,
            7,
            9,
            0
          ],
          [
            0,
            1,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            6,
            7,
            0
          ],
          [
            0,
            7,
            1,
            2,
            6,
            0
          ],
          [
            0,
            6,
            4,
            9,
            9,
            0
          ],
          [
            0,
            7,
            2,
            7,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            8,
            9,
            0
          ],
          [
            0,
            9,
            3,
            1,
            8,
            0
          ],
          [
            0,
            8,
            2,
            7,
            7,
            0
          ],
          [
            0,
            9,
            1,
            9,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            9,
            4,
            0
          ],
          [
            0,
            4,
            3,
            6,
            0
          ],
          [
            0,
            1,
            8,
            1,
            0
          ],
          [
            0,
            2,
            8,
            7,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            7,
            2,
            0
          ],
          [
            0,
            2,
            4,
            8,
            0
          ],
          [
            0,
            3,
            6,
            3,
            0
          ],
          [
            0,
            1,
            6,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "a9f96cdd.py",
      "bd4472b8.py"
    ],
    "problem_id": 3059
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, pattern reconstruction\n\n# description:\n# In the input, you will see a small patterned block surrounded by empty space.\n# To create the output, rotate the patterned block 90 degrees clockwise and fill the output grid with the new orientation of the pattern.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Detect the patterned block in the input grid\n    pattern_components = find_connected_components(input_grid, background=Color.BLACK, connectivity=8)\n    \n    # Assuming there's only one patterned block\n    if len(pattern_components) != 1:\n        raise ValueError(\"Expected exactly one patterned block in the input.\")\n\n    # Get the pattern and its bounding box\n    pattern = pattern_components[0]\n    x, y, width, height = bounding_box(pattern, background=Color.BLACK)\n\n    # Crop the pattern from the input grid\n    cropped_pattern = crop(pattern, background=Color.BLACK)\n\n    # Rotate the cropped pattern 90 degrees clockwise\n    rotated_pattern = np.rot90(cropped_pattern, -1)  # -1 for clockwise rotation\n\n    # Create the output grid with the same dimensions as the input grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Calculate the position to place the rotated pattern in the center\n    start_x = (output_grid.shape[0] - rotated_pattern.shape[0]) // 2\n    start_y = (output_grid.shape[1] - rotated_pattern.shape[1]) // 2\n\n    # Place the rotated pattern on the output grid\n    blit_sprite(output_grid, rotated_pattern, x=start_x, y=start_y, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a random grid size\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Create a random pattern size\n    pattern_size = np.random.randint(2, 4)  # Pattern size between 2x2 and 3x3\n    pattern = random_sprite(n=pattern_size, m=pattern_size, density=1, color_palette=Color.NOT_BLACK)\n\n    # Randomly place the pattern in the grid\n    x_pos, y_pos = random_free_location_for_sprite(grid, pattern, background=Color.BLACK)\n    grid = blit_sprite(grid, pattern, x=x_pos, y=y_pos, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "1e32b0e9.py",
      "6b9890af.py"
    ],
    "problem_id": 3444
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern extraction, color transformation\n\n# description:\n# In the input, you will see a grid with multiple colored patterns spread throughout. \n# Each pattern consists of the same color and has a rectangular shape. \n# To create the output grid, you should:\n# 1. Identify all distinct patterns in the input grid.\n# 2. Transform each pattern into a new color according to the following rules:\n#    - If the pattern color is red, change it to blue.\n#    - If the pattern color is green, change it to yellow.\n#    - If the pattern color is blue, change it to pink.\n#    - If it is any other color, change it to black.\n# 3. Place each transformed pattern back in the same position where it was found, while ensuring that \n#    the output grid maintains the same size as the input grid.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find all connected components (patterns) in the input grid\n    objects = find_connected_components(input_grid, monochromatic=True, connectivity=8)\n\n    # Prepare the output grid as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Define color transformation rules\n    color_transform = {\n        Color.RED: Color.BLUE,\n        Color.GREEN: Color.YELLOW,\n        Color.BLUE: Color.PINK,\n    }\n    \n    # Loop through each detected object (pattern)\n    for obj in objects:\n        # Get the color of the current pattern\n        original_color = obj[0, 0]  # Since it's monochromatic, we can check the first pixel\n        # Determine the new color based on the transformation rules\n        new_color = color_transform.get(original_color, Color.BLACK)\n\n        # Color the pattern in the output grid\n        output_grid[output_grid == original_color] = new_color\n    \n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a grid of random dimensions\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Define the colors that can be used for patterns\n    available_colors = [Color.RED, Color.GREEN, Color.BLUE]\n    \n    # Randomly determine the number of patterns to place in the grid\n    num_patterns = np.random.randint(1, 5)\n    \n    for _ in range(num_patterns):\n        # Randomly choose the position and size of each pattern\n        start_x = np.random.randint(0, n)\n        start_y = np.random.randint(0, m)\n        pattern_height = np.random.randint(1, n - start_x + 1)\n        pattern_width = np.random.randint(1, m - start_y + 1)\n\n        # Choose a random color for the pattern\n        color = np.random.choice(available_colors)\n\n        # Fill the chosen area with the selected color\n        grid[start_x:start_x + pattern_height, start_y:start_y + pattern_width] = color\n    \n    return grid",
    "examples": [
      [
        [
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            1,
            1,
            1
          ],
          [
            0,
            0,
            1,
            1,
            1
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            0,
            6,
            6,
            6
          ],
          [
            0,
            0,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            2,
            0,
            0
          ],
          [
            2,
            2,
            2,
            0,
            0
          ],
          [
            2,
            2,
            2,
            2,
            1
          ],
          [
            2,
            2,
            2,
            2,
            1
          ],
          [
            0,
            0,
            0,
            0,
            1
          ]
        ],
        [
          [
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            1
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            2,
            0,
            0
          ],
          [
            2,
            2,
            1,
            1,
            0
          ],
          [
            2,
            2,
            1,
            1,
            0
          ],
          [
            2,
            2,
            1,
            1,
            1
          ],
          [
            2,
            2,
            2,
            0,
            0
          ],
          [
            2,
            2,
            2,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            0
          ],
          [
            1,
            1,
            1,
            1,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            1,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            3,
            3,
            3,
            0
          ],
          [
            3,
            1,
            1,
            1,
            0
          ],
          [
            3,
            1,
            1,
            1,
            0
          ],
          [
            3,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            1,
            1,
            1,
            0
          ],
          [
            4,
            1,
            1,
            1,
            0
          ],
          [
            4,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "bc1d5164.py",
      "a9f96cdd.py",
      "995c5fa3.py"
    ],
    "problem_id": 3807
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, symmetry detection\n\n# description:\n# In the input, you will see a grid with a symmetrical pattern. \n# To create the output, rotate the pattern 90 degrees clockwise and check if the new orientation is still symmetrical. \n# If it is, output the rotated pattern; otherwise, output the original pattern.\n\ndef main(input_grid):\n    # Rotate the input pattern 90 degrees clockwise\n    rotated_pattern = np.rot90(input_grid, k=-1)\n\n    # Function to check for symmetry\n    def is_symmetric(grid):\n        return np.array_equal(grid, grid[::-1])  # Check vertical symmetry\n\n    # Check if the rotated pattern is still symmetrical\n    if is_symmetric(rotated_pattern):\n        return rotated_pattern\n    else:\n        return input_grid\n\ndef generate_input():\n    # Generate a random grid size\n    n, m = np.random.randint(4, 8), np.random.randint(4, 8)\n    \n    # Create an empty grid\n    grid = np.full((n, m), Color.BLACK)\n    \n    # Create a central symmetrical pattern\n    symmetrical = np.random.choice([True, False])\n    if symmetrical:\n        # Create a symmetric pattern\n        pattern_size = np.random.randint(2, min(n, m) // 2 + 1)\n        color = np.random.choice(list(Color.NOT_BLACK))\n        \n        # Fill the central area with a pattern\n        grid[n//2-pattern_size//2:n//2+pattern_size//2, m//2-pattern_size//2:m//2+pattern_size//2] = color\n        # Create symmetry\n        grid[n//2-pattern_size//2:n//2+pattern_size//2, m//2-pattern_size//2:m//2+pattern_size//2] = \\\n            np.where(np.random.rand(pattern_size, pattern_size) > 0.5, color, Color.BLACK)\n    else:\n        # Create a non-symmetric random pattern\n        grid = random_sprite(n, m, density=0.5, symmetry=\"not_symmetric\", color_palette=Color.NOT_BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "44f52bb0.py",
      "bc1d5164.py",
      "6b9890af.py"
    ],
    "problem_id": 4731
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, filling gaps\n\n# description:\n# In the input, you will see a grid containing a pattern that is symmetric along the vertical axis but has a few missing pixels (represented as black pixels). \n# The output should fill in the missing pixels to complete the vertical symmetry of the pattern.\n\ndef main(input_grid):\n    # Find the connected components in the input grid\n    objects = find_connected_components(input_grid, background=Color.BLACK)\n\n    # Create an output grid that is the same size as the input grid\n    output_grid = np.copy(input_grid)\n\n    # For each component, find the bounding box and fill in the missing pixels\n    for obj in objects:\n        bbox = bounding_box(obj)  # Get the bounding box of the current object\n        x, y, w, h = bbox\n\n        # Check each row in the bounding box for symmetry\n        for row in range(h):\n            left_side = output_grid[y + row, x:x + w // 2]\n            right_side = output_grid[y + row, x + w - w // 2:x + w]\n\n            # Fill in the missing pixels to the left side from the right side\n            for col in range(len(left_side)):\n                if left_side[col] == Color.BLACK and right_side[-(col + 1)] != Color.BLACK:\n                    output_grid[y + row, x + col] = right_side[-(col + 1)]\n\n            # Fill in the missing pixels to the right side from the left side\n            for col in range(len(right_side)):\n                if right_side[col] == Color.BLACK and left_side[col] != Color.BLACK:\n                    output_grid[y + row, x + w - 1 - col] = left_side[col]\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n = np.random.randint(5, 8)\n    m = np.random.randint(5, 8)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Select a color for the symmetric pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create a random symmetric pattern\n    # Determine the height of the pattern\n    pattern_height = np.random.randint(1, n // 2)\n\n    # Create the left half of the pattern\n    for row in range(pattern_height):\n        for col in range(m // 2):\n            grid[row, col] = np.random.choice([color, Color.BLACK])\n\n    # Mirror the left half to the right half\n    for row in range(pattern_height):\n        for col in range(m // 2):\n            grid[row, m - col - 1] = grid[row, col]\n\n    # Randomly remove some pixels from the pattern to create missing pixels\n    for _ in range(np.random.randint(1, 10)):\n        x = np.random.randint(0, pattern_height)\n        y = np.random.randint(0, m)\n        grid[x, y] = Color.BLACK  # Set some pixels to black to create gaps\n\n    return grid",
    "examples": [
      [
        [
          [
            4,
            0,
            0,
            0,
            4
          ],
          [
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            0,
            0,
            4
          ],
          [
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            4,
            0,
            0,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            0,
            0,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            7,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            7,
            7,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            9,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            9,
            0,
            0,
            0
          ],
          [
            9,
            9,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "44f52bb0.py",
      "f9012d9b.py"
    ],
    "problem_id": 5334
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color merging, gradient, transformation\n\n# description:\n# In the input, you will see two shapes of different colors touching at one edge. \n# To produce the output, merge these shapes into a single shape that has a gradient color effect, \n# transitioning from one shape's color to the other at the touching edge.\n\ndef main(input_grid):\n    # Create an output grid that's a copy of the input grid\n    output_grid = np.copy(input_grid)\n    \n    # Get the coordinates of the two shapes\n    shape_color_1 = output_grid[0, 0]\n    shape_color_2 = output_grid[0, -1]\n    \n    # Define the gradient function\n    def create_gradient(color1, color2, steps):\n        return [color1 if i < steps // 2 else color2 for i in range(steps)]\n\n    # Identify the touching edge (assume left for shape_color_1 and right for shape_color_2)\n    height, width = input_grid.shape\n    gradient_length = width  # Assuming the gradient spans the width of the shape\n\n    # Create the gradient colors\n    gradient_colors = create_gradient(shape_color_1, shape_color_2, gradient_length)\n\n    # Fill the output grid with the gradient\n    for x in range(gradient_length):\n        output_grid[height//2, x] = gradient_colors[x]\n\n    return output_grid\n\ndef generate_input():\n    # Make a black grid for the background first\n    n = m = np.random.randint(5, 20)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly generate two shapes of different colors\n    color1 = np.random.choice(list(Color.NOT_BLACK))\n    color2 = np.random.choice(list(Color.NOT_BLACK))\n\n    # Ensure colors are different\n    while color1 == color2:\n        color2 = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create the first shape in the grid\n    shape1 = random_sprite(np.random.randint(1, 4), np.random.randint(1, 4), color_palette=[color1])\n    blit_sprite(grid, shape1, x=1, y=2)  # Positioning shape1\n\n    # Create the second shape directly touching the first shape\n    shape2 = random_sprite(np.random.randint(1, 4), np.random.randint(1, 4), color_palette=[color2])\n    blit_sprite(grid, shape2, x=1, y=2 + shape1.shape[0])  # Positioning shape2 right below shape1\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            7,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            7,
            7
          ],
          [
            0,
            0,
            6,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            7,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            7,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            9
          ],
          [
            0,
            0,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            9
          ],
          [
            0,
            0,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            7,
            7
          ],
          [
            0,
            0,
            0,
            7,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            7,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            6,
            6
          ],
          [
            0,
            0,
            9,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            6,
            6
          ],
          [
            0,
            0,
            9,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "623ea044.py",
      "1caeab9d.py",
      "aabf363d.py",
      "6cdd2623.py"
    ],
    "problem_id": 6140
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# counting, shape arrangement, color transformation\n\n# description:\n# In the input, you will see several shapes of different colors arranged in a grid. \n# The task is to count the number of shapes of each color and arrange them in a new grid \n# such that all shapes of the same color are placed together in rows, with the color \n# order following the sequence of their counts (from most to least frequent). \n# If two colors have the same count, maintain their original order from the input.\n\ndef main(input_grid):\n    # Find all connected components (shapes) in the input grid\n    objects = find_connected_components(input_grid, monochromatic=False)\n    \n    # Count the shapes by color\n    color_count = {}\n    for obj in objects:\n        color = obj[0, 0]  # Get the color of the shape\n        if color not in color_count:\n            color_count[color] = 0\n        color_count[color] += 1\n    \n    # Sort colors by count (descending), and maintain original order for ties\n    sorted_colors = sorted(color_count.items(), key=lambda item: (-item[1], list(color_count.keys()).index(item[0])))\n    \n    # Prepare the output grid with height based on the maximum shapes in one color\n    max_shapes = max(color_count.values())\n    output_grid = np.full((max_shapes, len(sorted_colors)), Color.BLACK)\n    \n    # Fill the output grid with the shapes according to sorted color order\n    for col_index, (color, count) in enumerate(sorted_colors):\n        for shape_index in range(count):\n            if shape_index < max_shapes:\n                output_grid[shape_index, col_index] = color  # Place the color in the output grid\n\n    return output_grid\n\ndef generate_input():\n    # Generate a background grid with a random size\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Generate a random number of shapes\n    num_shapes = np.random.randint(5, 15)\n    colors_used = set()\n\n    for _ in range(num_shapes):\n        shape_color = np.random.choice([c for c in Color.NOT_BLACK if c not in colors_used])\n        colors_used.add(shape_color)\n\n        # Create a random sprite shape\n        sprite = random_sprite(np.random.randint(1, 4), np.random.randint(1, 4), color_palette=[shape_color])\n        \n        # Place the sprite in the grid\n        try:\n            x, y = random_free_location_for_sprite(grid, sprite)\n            blit_sprite(grid, sprite, x, y)\n        except:\n            pass  # If no space found, skip the placement\n\n    return grid",
    "examples": [
      [
        [
          [
            8,
            7,
            7,
            4,
            0
          ],
          [
            8,
            0,
            5,
            4,
            0
          ],
          [
            0,
            5,
            5,
            5,
            0
          ],
          [
            3,
            3,
            5,
            6,
            0
          ],
          [
            3,
            3,
            6,
            6,
            6
          ],
          [
            3,
            3,
            0,
            6,
            0
          ]
        ],
        [
          [
            8
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            0,
            0,
            0
          ],
          [
            1,
            6,
            0,
            0,
            0
          ],
          [
            1,
            6,
            4,
            4,
            4
          ],
          [
            1,
            6,
            4,
            4,
            4
          ],
          [
            9,
            9,
            9,
            4,
            0
          ]
        ],
        [
          [
            5
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            2,
            2,
            2,
            6,
            6
          ],
          [
            0,
            0,
            2,
            2,
            2,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            8,
            0,
            0
          ],
          [
            0,
            3,
            4,
            4,
            7,
            7,
            7
          ],
          [
            3,
            3,
            4,
            4,
            0,
            0,
            7
          ],
          [
            3,
            0,
            4,
            4,
            0,
            0,
            7
          ]
        ],
        [
          [
            9,
            0
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            9,
            0,
            0,
            0,
            0,
            8
          ],
          [
            0,
            0,
            0,
            0,
            7,
            7,
            7,
            8
          ],
          [
            0,
            5,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          [
            0,
            5,
            0,
            6,
            6,
            6,
            0,
            1
          ],
          [
            0,
            5,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            4,
            4,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            0,
            3,
            3,
            3,
            0
          ],
          [
            0,
            4,
            4,
            0,
            0,
            3,
            0,
            0
          ]
        ],
        [
          [
            0,
            9
          ],
          [
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "ff28f65a.py",
      "6e82a1ae.py",
      "1caeab9d.py",
      "8e1813be.py"
    ],
    "problem_id": 6591
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, expansion, object transformation\n\n# description:\n# In the input, you will see a grid containing a single colored object surrounded by black pixels. \n# To create the output, you need to rotate that colored object 90 degrees clockwise and expand it outward, \n# filling the previously black surrounding pixels with this transformed object, ensuring the object remains centered.\n\ndef main(input_grid):\n    # Plan:\n    # 1. Extract the main colored object from the input grid.\n    # 2. Rotate the object 90 degrees clockwise.\n    # 3. Create a larger output grid.\n    # 4. Place the rotated object in the center of the output grid.\n\n    # Extract the colored object from the input grid\n    objects = find_connected_components(input_grid, monochromatic=True)\n    assert len(objects) == 1  # There should be exactly one object\n    original_object = objects[0]\n\n    # Rotate the object 90 degrees clockwise\n    rotated_object = np.rot90(original_object, k=-1)  # Rotate clockwise\n\n    # Create a larger output grid that is big enough to fit the rotated object\n    n, m = rotated_object.shape\n    output_grid_size = (n + 2, m + 2)  # Expand the grid to place the rotated object in the center\n    output_grid = np.full(output_grid_size, Color.BLACK)\n\n    # Place the rotated object in the center of the output grid\n    blit_sprite(output_grid, rotated_object, 1, 1, background=Color.BLACK)\n\n    return output_grid\n\n\ndef generate_input():\n    # Create a random-sized colored object (between 2x2 and 5x5)\n    width, height = np.random.randint(2, 6), np.random.randint(2, 6)\n    original_object = random_sprite(width, height, density=1.0, color_palette=Color.NOT_BLACK)\n    \n    # Ensure the object is entirely colored and surrounded by black pixels\n    grid_size = (width + 2, height + 2)\n    input_grid = np.full(grid_size, Color.BLACK)\n\n    # Place the original object in the center of the grid\n    blit_sprite(input_grid, original_object, 1, 1, background=Color.BLACK)\n\n    return input_grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            9,
            9,
            9,
            9,
            0
          ],
          [
            0,
            9,
            9,
            9,
            9,
            0
          ],
          [
            0,
            9,
            9,
            9,
            9,
            0
          ],
          [
            0,
            9,
            9,
            9,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            0
          ],
          [
            0,
            5,
            5,
            0
          ],
          [
            0,
            5,
            5,
            0
          ],
          [
            0,
            5,
            5,
            0
          ],
          [
            0,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "137eaa0f.py",
      "0e206a2e.py",
      "ea786f4a.py",
      "1f642eb9.py"
    ],
    "problem_id": 7364
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color extraction, central region transformation\n\n# description:\n# In the input, you will see a grid with a distinct central pattern surrounded by various colors.\n# To create the output, you should extract the central pattern and replace its colors with the average color of the surrounding pixels.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Get the dimensions of the input grid\n    height, width = input_grid.shape\n    \n    # Calculate the bounding box for the central region (a square in the center)\n    center_x_start = height // 4\n    center_x_end = (height * 3) // 4\n    center_y_start = width // 4\n    center_y_end = (width * 3) // 4\n    \n    # Extract the central pattern\n    central_pattern = input_grid[center_x_start:center_x_end, center_y_start:center_y_end]\n    \n    # Calculate the average color of the surrounding pixels\n    surrounding_pixels = input_grid.copy()\n    surrounding_pixels[center_x_start:center_x_end, center_y_start:center_y_end] = Color.BLACK  # Mask the central pattern area\n    average_color = np.mean(surrounding_pixels[surrounding_pixels != Color.BLACK])\n    \n    # Create the output grid with the same shape as the input grid\n    output_grid = np.copy(input_grid)\n    \n    # Replace the colors in the central pattern with the average surrounding color\n    output_grid[center_x_start:center_x_end, center_y_start:center_y_end] = average_color\n    \n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a grid of size n x m\n    n = np.random.randint(8, 15)\n    m = np.random.randint(8, 15)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Define the colors for the central pattern and surrounding\n    available_colors = list(Color.NOT_BLACK)\n    central_color = np.random.choice(available_colors)\n    surrounding_colors = np.random.choice(available_colors, size=4, replace=False)\n\n    # Create random surrounding colors\n    grid[:, :] = random_scatter_points(grid=grid, color=np.random.choice(surrounding_colors), density=0.5)\n\n    # Create a central pattern\n    central_pattern_size = np.random.randint(3, 5)\n    central_pattern = random_sprite(central_pattern_size, central_pattern_size, density=0.5, color_palette=[central_color])\n\n    # Place the central pattern in the middle of the grid\n    center_x_start = n // 4\n    center_x_end = (n * 3) // 4\n    center_y_start = m // 4\n    center_y_end = (m * 3) // 4\n    grid[center_x_start:center_x_end, center_y_start:center_y_end] = central_pattern\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            7,
            0,
            0,
            0,
            0,
            7,
            0
          ],
          [
            7,
            7,
            0,
            0,
            0,
            7,
            7,
            7
          ],
          [
            7,
            0,
            8,
            8,
            8,
            8,
            0,
            7
          ],
          [
            7,
            0,
            8,
            8,
            8,
            8,
            0,
            0
          ],
          [
            0,
            7,
            8,
            8,
            0,
            0,
            7,
            7
          ],
          [
            0,
            7,
            8,
            8,
            0,
            0,
            0,
            7
          ],
          [
            7,
            7,
            0,
            0,
            0,
            7,
            0,
            0
          ],
          [
            7,
            7,
            7,
            7,
            0,
            7,
            7,
            7
          ]
        ],
        [
          [
            0,
            7,
            0,
            0,
            0,
            0,
            7,
            0
          ],
          [
            7,
            7,
            0,
            0,
            0,
            7,
            7,
            7
          ],
          [
            7,
            0,
            7,
            7,
            7,
            7,
            0,
            7
          ],
          [
            7,
            0,
            7,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            0,
            7,
            7,
            7,
            7,
            7,
            0,
            7
          ],
          [
            7,
            7,
            0,
            0,
            0,
            7,
            0,
            0
          ],
          [
            7,
            7,
            7,
            7,
            0,
            7,
            7,
            7
          ]
        ]
      ],
      [
        [
          [
            7,
            0,
            7,
            0,
            7,
            0,
            7,
            7,
            0
          ],
          [
            7,
            7,
            7,
            7,
            0,
            7,
            7,
            0,
            7
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0,
            0,
            7,
            0
          ],
          [
            0,
            0,
            8,
            8,
            8,
            8,
            7,
            0,
            7
          ],
          [
            0,
            7,
            0,
            0,
            0,
            8,
            0,
            0,
            7
          ],
          [
            7,
            7,
            0,
            0,
            0,
            8,
            0,
            0,
            0
          ],
          [
            7,
            0,
            7,
            0,
            0,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            0,
            7,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            7,
            0,
            0,
            7
          ]
        ],
        [
          [
            7,
            0,
            7,
            0,
            7,
            0,
            7,
            7,
            0
          ],
          [
            7,
            7,
            7,
            7,
            0,
            7,
            7,
            0,
            7
          ],
          [
            0,
            0,
            7,
            7,
            7,
            7,
            0,
            7,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            7,
            7,
            0,
            7
          ],
          [
            0,
            7,
            7,
            7,
            7,
            7,
            0,
            0,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            0,
            0,
            0
          ],
          [
            7,
            0,
            7,
            0,
            0,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            0,
            7,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            7,
            0,
            0,
            7
          ]
        ]
      ],
      [
        [
          [
            2,
            0,
            2,
            0,
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            0,
            0,
            0,
            4,
            0,
            2,
            2
          ],
          [
            2,
            0,
            0,
            0,
            4,
            4,
            2,
            0,
            0
          ],
          [
            2,
            2,
            0,
            4,
            4,
            4,
            0,
            2,
            2
          ],
          [
            0,
            2,
            4,
            4,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            2,
            2,
            0,
            0,
            2,
            2,
            0,
            2
          ],
          [
            0,
            2,
            0,
            2,
            0,
            2,
            0,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0,
            2,
            0,
            2,
            2,
            2
          ]
        ],
        [
          [
            2,
            0,
            2,
            0,
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            0,
            2,
            2
          ],
          [
            2,
            0,
            2,
            2,
            2,
            2,
            2,
            0,
            0
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            0,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2,
            2,
            2,
            0,
            0,
            2
          ],
          [
            0,
            2,
            2,
            0,
            0,
            2,
            2,
            0,
            2
          ],
          [
            0,
            2,
            0,
            2,
            0,
            2,
            0,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0,
            2,
            0,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            0,
            0,
            5,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            0,
            5,
            5,
            0,
            5
          ],
          [
            5,
            0,
            0,
            7,
            7,
            7,
            5,
            0
          ],
          [
            5,
            5,
            7,
            7,
            7,
            7,
            5,
            5
          ],
          [
            0,
            0,
            7,
            7,
            0,
            7,
            0,
            0
          ],
          [
            0,
            5,
            7,
            7,
            7,
            7,
            5,
            5
          ],
          [
            5,
            0,
            5,
            0,
            5,
            5,
            0,
            5
          ],
          [
            0,
            5,
            0,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            0,
            0,
            0,
            5
          ]
        ],
        [
          [
            5,
            5,
            0,
            0,
            5,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            0,
            5,
            5,
            0,
            5
          ],
          [
            5,
            0,
            5,
            5,
            5,
            5,
            5,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            0,
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            0,
            5,
            0,
            5,
            5,
            0,
            5
          ],
          [
            0,
            5,
            0,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            0,
            0,
            0,
            5
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "bc1d5164.py",
      "a9f96cdd.py",
      "6cf79266.py"
    ],
    "problem_id": 7767
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern extraction, color manipulation, central placement\n\n# description:\n# In the input, you will see a grid with a randomly placed circular pattern of pixels of the same color.\n# To create the output, extract this circular pattern and place it in the center of a new grid, \n# filling the remaining area with black pixels. The output grid should be larger than the input grid \n# to accommodate the circular pattern at the center.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the circular pattern in the input grid\n    circular_pattern = detect_objects(grid=input_grid, colors=Color.NOT_BLACK, allowed_dimensions=[(3, 3)], monochromatic=True)\n    \n    # Check if we found exactly one circular pattern\n    assert len(circular_pattern) == 1, \"Input must contain exactly one circular pattern of color.\"\n    \n    # Crop the detected object to get the sprite\n    sprite = crop(circular_pattern[0], background=Color.BLACK)\n\n    # Create an output grid that is larger than the input grid\n    output_height = input_grid.shape[0] + 4\n    output_width = input_grid.shape[1] + 4\n    output_grid = np.full((output_height, output_width), Color.BLACK)\n\n    # Calculate the center placement for the sprite in the output grid\n    center_x = (output_width - sprite.shape[1]) // 2\n    center_y = (output_height - sprite.shape[0]) // 2\n\n    # Blit the sprite onto the center of the output grid\n    output_grid = blit_sprite(grid=output_grid, sprite=sprite, x=center_x, y=center_y, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a grid with a black background\n    grid_size = np.random.randint(5, 10)\n    grid = np.full((grid_size, grid_size), Color.BLACK)\n\n    # Randomly select a color for the circular pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Generate a circular pattern: A small filled circle of the selected color\n    radius = np.random.randint(2, 4)\n    diameter = radius * 2 + 1\n    circular_pattern = np.zeros((diameter, diameter), dtype=int)\n\n    for x in range(diameter):\n        for y in range(diameter):\n            if (x - radius) ** 2 + (y - radius) ** 2 <= radius ** 2:  # Check if the pixel is within the circle\n                circular_pattern[x, y] = color\n\n    # Randomly place the circular pattern in the grid\n    x_offset = np.random.randint(0, grid_size - diameter + 1)\n    y_offset = np.random.randint(0, grid_size - diameter + 1)\n    grid = blit_sprite(grid=grid, sprite=circular_pattern, x=x_offset, y=y_offset, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            3,
            0,
            0
          ],
          [
            0,
            3,
            3,
            3,
            0
          ],
          [
            3,
            3,
            3,
            3,
            3
          ],
          [
            0,
            3,
            3,
            3,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            9,
            0,
            0
          ],
          [
            0,
            9,
            9,
            9,
            0
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            0,
            9,
            9,
            9,
            0
          ],
          [
            0,
            0,
            9,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "bc1d5164.py",
      "a9f96cdd.py",
      "6cf79266.py"
    ],
    "problem_id": 9019
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color transformation, diagonal reflection\n\n# description:\n# In the input, you will see a diagonal pattern of two colors (green and yellow).\n# To create the output, reflect the pattern diagonally and swap the colors: \n# green becomes yellow and yellow becomes green.\n\ndef main(input_grid):\n    # Create a copy of the input grid for the output.\n    output_grid = input_grid.copy()\n\n    # Swap colors: green <-> yellow\n    output_grid = np.vectorize(lambda color: Color.YELLOW if color == Color.GREEN else (Color.GREEN if color == Color.YELLOW else color))(output_grid)\n\n    # Reflect the grid diagonally\n    output_grid = output_grid.T\n\n    return output_grid\n\ndef generate_input():\n    # Create a random size for the grid\n    n = m = np.random.randint(4, 8)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Create a diagonal pattern of green and yellow\n    for i in range(min(n, m)):\n        if i % 2 == 0:\n            grid[i, i] = Color.GREEN  # Set the diagonal element to green\n        else:\n            grid[i, i] = Color.YELLOW  # Set the diagonal element to yellow\n\n    return grid",
    "examples": [
      [
        [
          [
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            3
          ]
        ],
        [
          [
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            4
          ]
        ],
        [
          [
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            3
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            0
          ],
          [
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            4
          ]
        ],
        [
          [
            4,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0
          ],
          [
            0,
            0,
            0,
            3
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            3
          ]
        ],
        [
          [
            4,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            4
          ]
        ]
      ]
    ],
    "seeds": [
      "ff28f65a.py",
      "1fad071e.py",
      "0d3d703e.py",
      "6fa7a44f.py"
    ],
    "problem_id": 9035
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, pixel filling, mirroring\n\n# description:\n# In the input, you will see a grid with a symmetric pattern that is partially filled. \n# To make the output, complete the pattern by filling in the missing pixels, ensuring that the filled pixels maintain the symmetry of the original pattern.\n\ndef main(input_grid):\n    # Detect the symmetry in the input grid\n    symmetries = detect_translational_symmetry(input_grid)\n\n    # Create an output grid initialized with the input grid\n    output_grid = np.copy(input_grid)\n\n    # Fill in missing pixels while maintaining symmetry\n    for x, y in np.argwhere(input_grid != Color.BLACK):\n        # For each colored pixel, find its symmetric counterparts\n        symmetric_points = orbit(output_grid, x, y, symmetries)\n        # Copy the color from the original pixel to its symmetric counterparts\n        for sx, sy in symmetric_points:\n            if output_grid[sx, sy] == Color.BLACK:  # Only fill in black pixels\n                output_grid[sx, sy] = input_grid[x, y]\n\n    return output_grid\n\ndef generate_input():\n    # Create a random-sized grid with a partially filled symmetric pattern\n    n, m = np.random.randint(5, 8, size=(2))\n    grid = np.full((n, m), Color.BLACK)\n\n    # Choose a color for the patterns\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Select a size for the pattern ensuring it fits within the grid\n    size = np.random.randint(2, min(n, m) // 2)\n\n    # Create a symmetric pattern in the top left corner\n    pattern = random_sprite(size, size, density=0.5, symmetry='diagonal', color_palette=[color])\n\n    # Blit the symmetric pattern into the grid\n    blit_sprite(grid, pattern, x=0, y=0, background=Color.BLACK)\n\n    # Randomly mask some pixels in the pattern to create a partially filled effect\n    mask_indices = np.argwhere(pattern != Color.BLACK)\n    num_to_mask = np.random.randint(1, len(mask_indices) // 2)  # Mask some of the pixels\n    for _ in range(num_to_mask):\n        x_mask, y_mask = mask_indices[np.random.choice(len(mask_indices))]\n        grid[x_mask, y_mask] = Color.BLACK  # Set the masked pixels to black\n\n    return grid",
    "examples": [
      [
        [
          [
            6,
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            6,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            5,
            0,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            9,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "44f52bb0.py",
      "f9012d9b.py"
    ],
    "problem_id": 9554
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# stacking, blending colors\n\n# description:\n# In the input, you will see several colored squares stacked on top of each other with varying transparency levels.\n# To make the output, create a new grid where each square is laid flat, maintaining their order and blending the colors based on their transparency levels.\n\ndef main(input_grid):\n    output_grid = np.zeros_like(input_grid)\n\n    # Detect the stacked colored squares\n    squares = detect_objects(grid=input_grid, monochromatic=False, background=Color.BLACK, connectivity=4)\n\n    # Initialize the blending factor\n    blend_factor = 0.5  # This can be adjusted to influence the blending outcome\n\n    # Process each square from bottom to top\n    for square in squares:\n        # Get the bounding box of the current square\n        x, y, width, height = bounding_box(square)\n\n        # Get the square's color and transparency\n        color = square[0, 0]\n        transparency = 1.0  # Assume fully opaque for simplicity in blending\n\n        # If the color is not transparent (background), blend it onto the output grid\n        for i in range(width):\n            for j in range(height):\n                if square[i, j] != Color.BLACK:\n                    # Blend the current color with the existing color in the output grid\n                    existing_color = output_grid[x + i, y + j]\n                    output_grid[x + i, y + j] = blend_colors(existing_color, color, blend_factor)\n\n    return output_grid\n\ndef blend_colors(color1, color2, alpha):\n    # Simple blending function that takes two colors and blends them based on the alpha value\n    if color1 == Color.BLACK:\n        return color2  # If background, return the second color\n    elif color2 == Color.BLACK:\n        return color1  # If second color is background, return the first color\n    \n    # Assuming colors are represented as integers for simplicity\n    return int((1 - alpha) * color1 + alpha * color2)\n\ndef generate_input():\n    # Initialize a random grid size\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly determine the number of squares\n    num_squares = np.random.randint(2, 5)\n\n    # Generate squares with random colors and positions\n    for _ in range(num_squares):\n        width, height = np.random.randint(1, 3), np.random.randint(1, 3)\n        color = np.random.choice(list(Color.NOT_BLACK))\n        \n        # Get a random position for the square\n        x = np.random.randint(0, n - height)\n        y = np.random.randint(0, m - width)\n\n        # Draw the square in the grid\n        square = np.full((width, height), color)\n        grid = blit_sprite(grid, square, x, y, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            4,
            4,
            0,
            4,
            4
          ],
          [
            4,
            4,
            0,
            0,
            0
          ],
          [
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            0,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            3,
            3,
            3,
            0
          ],
          [
            6,
            3,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            0
          ],
          [
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            6,
            6,
            0
          ],
          [
            0,
            9,
            4,
            0,
            0,
            0
          ],
          [
            0,
            9,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            4,
            0,
            0
          ],
          [
            0,
            4,
            4,
            0,
            0
          ],
          [
            9,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "8e1813be.py",
      "1f642eb9.py",
      "bd4472b8.py",
      "017c7c7b.py"
    ],
    "problem_id": 9994
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern duplication, flipping, positioning\n\n# description:\n# In the input, you will see a unique 2x2 pattern in the top left corner of a larger grid. \n# To create the output, duplicate that pattern in each quadrant of the grid, flipping it vertically for the bottom quadrants.\n\ndef main(input_grid):\n    # Get the unique 2x2 pattern from the top left corner\n    pattern = input_grid[:2, :2]\n\n    # Create the output grid, which is the same size as the input\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Place the pattern in each quadrant of the output grid\n    output_grid[:2, :2] = pattern  # Top-left\n    output_grid[:2, 2:] = np.flipud(pattern)  # Top-right\n    output_grid[2:, :2] = pattern  # Bottom-left\n    output_grid[2:, 2:] = np.flipud(pattern)  # Bottom-right\n\n    return output_grid\n\ndef generate_input():\n    # Make a random sized grid with black background\n    n = np.random.randint(4, 8)\n    m = np.random.randint(4, 8)\n    \n    # Ensure the grid is large enough to contain a 2x2 pattern\n    n = max(n, 4)\n    m = max(m, 4)\n\n    grid = np.full((n, m), Color.BLACK)\n\n    # Select a color for the pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create a random 2x2 pattern\n    pattern = random_sprite(n=2, m=2, color_palette=[color], density=1.0)\n\n    # Place the pattern in the top left corner of the grid\n    grid[:2, :2] = pattern\n\n    return grid",
    "examples": [
      [
        [
          [
            6,
            6,
            0,
            0
          ],
          [
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            8,
            8,
            0,
            0
          ],
          [
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            3,
            3,
            0,
            0
          ],
          [
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            0,
            0
          ],
          [
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "ff28f65a.py",
      "6b9890af.py",
      "1fad071e.py"
    ],
    "problem_id": 10961
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern expansion, color transformation\n\n# description:\n# In the input, you will see a grid containing a specific pattern made of red and blue pixels in the center. \n# To create the output, expand this pattern by duplicating it in all four directions (up, down, left, right) \n# so that it fills the entire grid. The expanded patterns should maintain their original colors.\n\ndef main(input_grid):\n    # Get the center of the input grid\n    center_x, center_y = input_grid.shape[0] // 2, input_grid.shape[1] // 2\n    \n    # Find the bounding box of the pattern in the input grid\n    objects = find_connected_components(input_grid, background=Color.BLACK)\n    assert len(objects) == 1  # There should only be one pattern in the center\n    \n    # Get the pattern and its bounding box\n    pattern = crop(objects[0], background=Color.BLACK)\n    pattern_height, pattern_width = pattern.shape\n    \n    # Create the output grid, which should be the same size as the input grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n    \n    # Expand the pattern in all four directions\n    for dx in range(-center_x, center_x + 1):\n        for dy in range(-center_y, center_y + 1):\n            # Determine the position to blit the pattern\n            x_offset = dx * pattern_height\n            y_offset = dy * pattern_width\n            blit_sprite(output_grid, pattern, x=x_offset + center_x, y=y_offset + center_y, background=Color.BLACK)\n    \n    return output_grid\n\ndef generate_input():\n    # Create a grid of a random size with black background\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Define the pattern size\n    pattern_size = np.random.randint(2, min(n, m) // 2)\n    \n    # Create a random pattern of red and blue pixels\n    color_palette = [Color.RED, Color.BLUE]\n    pattern = np.random.choice(color_palette, size=(pattern_size, pattern_size))\n\n    # Place the pattern in the center of the grid\n    start_x = (n - pattern_size) // 2\n    start_y = (m - pattern_size) // 2\n    grid[start_x:start_x + pattern_size, start_y:start_y + pattern_size] = pattern\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "a9f96cdd.py",
      "1fad071e.py",
      "995c5fa3.py"
    ],
    "problem_id": 11357
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern recognition, color swapping\n\n# description:\n# In the input, you will see a grid with several geometric shapes made up of colored squares. \n# Each shape is a contiguous area of squares of the same color. \n# To make the output, identify the two most common colors of these shapes, \n# and swap them in the output grid.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find connected components (shapes) in the input grid\n    components = find_connected_components(input_grid, monochromatic=True, connectivity=4)\n    \n    # Count the colors of the components\n    color_counts = {}\n    for component in components:\n        color = component[0, 0]  # all pixels in the component have the same color\n        if color in color_counts:\n            color_counts[color] += 1\n        else:\n            color_counts[color] = 1\n            \n    # Sort colors by their counts in descending order\n    sorted_colors = sorted(color_counts.items(), key=lambda x: x[1], reverse=True)\n    \n    # If there are less than 2 different colors, return the input grid as is\n    if len(sorted_colors) < 2:\n        return input_grid\n    \n    # Get the two most common colors\n    color1, color2 = sorted_colors[0][0], sorted_colors[1][0]\n    \n    # Create the output grid\n    output_grid = np.copy(input_grid)\n    \n    # Swap colors in the output grid\n    output_grid[output_grid == color1] = Color.TEAL  # Use a temporary color for swapping\n    output_grid[output_grid == color2] = color1\n    output_grid[output_grid == Color.TEAL] = color2\n    \n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly generate a grid size\n    n, m = np.random.randint(6, 12), np.random.randint(6, 12)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Possible colors excluding black\n    available_colors = list(Color.NOT_BLACK)\n\n    # Randomly define number of shapes and their colors\n    num_shapes = np.random.randint(3, 6)\n    shapes_info = []\n\n    for _ in range(num_shapes):\n        color = np.random.choice(available_colors)\n        shape_width = np.random.randint(2, 5)\n        shape_height = np.random.randint(2, 5)\n\n        # Randomly choose a position for the shape\n        x_pos = np.random.randint(0, n - shape_height)\n        y_pos = np.random.randint(0, m - shape_width)\n\n        # Draw the shape in the grid\n        for x in range(x_pos, x_pos + shape_height):\n            for y in range(y_pos, y_pos + shape_width):\n                grid[x, y] = color\n\n        shapes_info.append((color, (x_pos, y_pos, shape_width, shape_height)))\n\n    # Ensure there are at least two different colors\n    unique_colors = set(grid.flatten())\n    while len(unique_colors) < 2:\n        color = np.random.choice(available_colors)\n        shape_width = np.random.randint(2, 5)\n        shape_height = np.random.randint(2, 5)\n        x_pos = np.random.randint(0, n - shape_height)\n        y_pos = np.random.randint(0, m - shape_width)\n\n        for x in range(x_pos, x_pos + shape_height):\n            for y in range(y_pos, y_pos + shape_width):\n                grid[x, y] = color\n\n        unique_colors.add(color)\n\n    return grid",
    "examples": [
      [
        [
          [
            3,
            3,
            8,
            0,
            0,
            0
          ],
          [
            2,
            9,
            9,
            9,
            0,
            0
          ],
          [
            2,
            9,
            9,
            9,
            0,
            0
          ],
          [
            2,
            9,
            9,
            9,
            0,
            0
          ],
          [
            2,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            3,
            3,
            3,
            3
          ],
          [
            2,
            9,
            9,
            9,
            3,
            3
          ],
          [
            2,
            9,
            9,
            9,
            3,
            3
          ],
          [
            2,
            9,
            9,
            9,
            3,
            3
          ],
          [
            2,
            2,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3
          ]
        ]
      ],
      [
        [
          [
            9,
            1,
            7,
            7,
            7,
            7,
            0,
            0
          ],
          [
            9,
            1,
            7,
            7,
            7,
            7,
            0,
            0
          ],
          [
            9,
            1,
            7,
            7,
            7,
            7,
            0,
            0
          ],
          [
            9,
            1,
            7,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            1,
            7,
            7,
            7,
            7,
            9,
            9
          ],
          [
            0,
            1,
            7,
            7,
            7,
            7,
            9,
            9
          ],
          [
            0,
            1,
            7,
            7,
            7,
            7,
            9,
            9
          ],
          [
            0,
            1,
            7,
            7,
            7,
            7,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            6,
            6,
            6,
            0,
            0
          ],
          [
            1,
            1,
            6,
            6,
            6,
            0,
            0
          ],
          [
            1,
            1,
            6,
            6,
            6,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            6,
            6,
            6,
            1,
            1
          ],
          [
            0,
            0,
            6,
            6,
            6,
            1,
            1
          ],
          [
            0,
            0,
            6,
            6,
            6,
            1,
            1
          ],
          [
            6,
            6,
            6,
            6,
            1,
            1,
            1
          ],
          [
            1,
            1,
            9,
            9,
            1,
            1,
            1
          ],
          [
            1,
            1,
            9,
            9,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            9,
            9,
            6,
            0,
            0,
            0
          ],
          [
            9,
            9,
            9,
            9,
            6,
            5,
            5,
            0
          ],
          [
            9,
            4,
            4,
            9,
            6,
            5,
            5,
            0
          ],
          [
            9,
            4,
            4,
            9,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            6,
            9,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            6,
            5,
            5,
            9
          ],
          [
            0,
            4,
            4,
            0,
            6,
            5,
            5,
            9
          ],
          [
            0,
            4,
            4,
            0,
            6,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            0,
            0,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            0,
            0,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "8e1813be.py",
      "bc1d5164.py",
      "f8b3ba0a.py"
    ],
    "problem_id": 11688
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern recognition, rotation\n\n# description:\n# In the input, you will see a 4x4 grid with a distinct pattern in one of the quadrants. \n# To create the output, identify the pattern and rotate it 90 degrees clockwise, \n# then place the rotated pattern in the center of the output grid, \n# filling the remaining cells with black.\n\ndef main(input_grid):\n    # Find the connected components (patterns) in the input grid\n    patterns = find_connected_components(input_grid, monochromatic=True, connectivity=4)\n\n    # Assuming there is only one pattern for this puzzle\n    if len(patterns) != 1:\n        raise ValueError(\"Input grid must contain exactly one distinct pattern.\")\n\n    pattern = patterns[0]\n    \n    # Get the bounding box of the pattern\n    x, y, width, height = bounding_box(pattern)\n\n    # Rotate the pattern 90 degrees clockwise\n    rotated_pattern = np.rot90(pattern, -1)\n\n    # The size of the output grid should be determined by the size of the rotated pattern\n    output_size = max(rotated_pattern.shape) + 2  # Adding 2 for black padding\n    output_grid = np.full((output_size, output_size), Color.BLACK)\n\n    # Calculate the starting position to place the rotated pattern in the center\n    start_x = (output_size - rotated_pattern.shape[0]) // 2\n    start_y = (output_size - rotated_pattern.shape[1]) // 2\n\n    # Blit the rotated pattern onto the output grid\n    blit_sprite(output_grid, rotated_pattern, x=start_x, y=start_y, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input():\n    # Create a 4x4 grid with a distinct pattern in one quadrant\n    grid = np.full((4, 4), Color.BLACK)\n\n    # Choose a color for the pattern\n    pattern_color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create a random shape pattern in one of the quadrants\n    for i in range(4):\n        for j in range(4):\n            if np.random.rand() < 0.5:  # Randomly decide whether to place a color or keep it black\n                grid[i, j] = pattern_color\n\n    # Ensure that the pattern isn't all black\n    if np.all(grid == Color.BLACK):\n        return generate_input()\n\n    return grid",
    "examples": [
      [
        [
          [
            9,
            9,
            9,
            0
          ],
          [
            9,
            0,
            9,
            0
          ],
          [
            9,
            9,
            9,
            0
          ],
          [
            9,
            9,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            9,
            9,
            9,
            9,
            0
          ],
          [
            0,
            9,
            9,
            0,
            9,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            5,
            0
          ],
          [
            5,
            0,
            5,
            0
          ],
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            0,
            5,
            5
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            5,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            1,
            0,
            1,
            1
          ],
          [
            1,
            0,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1
          ],
          [
            1,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            0
          ],
          [
            4,
            0,
            4,
            4
          ],
          [
            4,
            0,
            4,
            4
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "995c5fa3.py",
      "5c2c9af4.py",
      "3de23699.py"
    ],
    "problem_id": 12083
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# fractals, recursive pattern generation\n\n# description:\n# In the input, you will see a large square divided into smaller squares of various colors.\n# The output is generated by recursively dividing each colored square into 4 smaller squares, and coloring them based on a specific rule:\n# 1. If a square is red, color its subdivisions in the order: yellow, teal, blue, black.\n# 2. If a square is blue, color its subdivisions in the order: black, yellow, teal, red.\n# 3. If a square is yellow, color its subdivisions in the order: blue, black, red, teal.\n# 4. If a square is teal, color its subdivisions in the order: red, yellow, black, blue.\n# The recursion stops when the size of the square is 1x1.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    def divide_and_color(x, y, size):\n        # Base case: stop when the size is 1\n        if size <= 1:\n            return\n        \n        # Get the color of the current square\n        current_color = input_grid[y, x]\n        \n        # Determine the new colors for subdivisions based on the current color\n        if current_color == Color.RED:\n            new_colors = [Color.YELLOW, Color.TEAL, Color.BLUE, Color.BLACK]\n        elif current_color == Color.BLUE:\n            new_colors = [Color.BLACK, Color.YELLOW, Color.TEAL, Color.RED]\n        elif current_color == Color.YELLOW:\n            new_colors = [Color.BLUE, Color.BLACK, Color.RED, Color.TEAL]\n        elif current_color == Color.TEAL:\n            new_colors = [Color.RED, Color.YELLOW, Color.BLACK, Color.BLUE]\n        else:\n            return\n        \n        # Calculate new size for subdivisions\n        new_size = size // 2\n        \n        # Fill the 4 subdivisions with the new colors\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i * new_size, y + j * new_size\n                output_grid[ny:ny + new_size, nx:nx + new_size] = new_colors[i * 2 + j]\n                divide_and_color(nx, ny, new_size)\n\n    # Start the recursion from the top-left corner of the input grid\n    divide_and_color(0, 0, input_grid.shape[0])\n    \n    return output_grid\n\ndef generate_input():\n    # Create an input grid of size (8, 8) with random colored squares\n    grid_size = 8\n    grid = np.full((grid_size, grid_size), Color.BLACK)\n\n    # Randomly choose the number of squares\n    num_squares = np.random.randint(2, 6)\n\n    for _ in range(num_squares):\n        # Randomly choose size and position for each square\n        size = np.random.randint(2, 5)\n        x = np.random.randint(0, grid_size - size)\n        y = np.random.randint(0, grid_size - size)\n\n        # Choose a random color for the square (excluding black)\n        color = np.random.choice([Color.RED, Color.BLUE, Color.YELLOW, Color.TEAL])\n        \n        # Fill the selected area with the chosen color\n        grid[y:y+size, x:x+size] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            8,
            8,
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            8,
            1,
            1,
            8,
            8,
            8,
            8,
            0
          ],
          [
            8,
            1,
            1,
            8,
            8,
            8,
            8,
            0
          ],
          [
            8,
            1,
            1,
            8,
            8,
            8,
            8,
            0
          ],
          [
            0,
            1,
            1,
            8,
            8,
            8,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            2,
            0,
            2,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            1,
            4,
            1,
            0,
            0,
            0,
            0
          ],
          [
            2,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            4,
            1,
            4,
            2,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            4,
            2,
            0,
            2,
            0
          ],
          [
            4,
            4,
            4,
            4,
            4,
            1,
            4,
            1
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            1,
            1
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            8,
            0,
            8,
            0,
            8,
            8,
            8
          ],
          [
            4,
            2,
            4,
            2,
            4,
            2,
            8,
            8
          ],
          [
            0,
            8,
            0,
            8,
            0,
            8,
            0,
            8
          ],
          [
            4,
            2,
            4,
            2,
            4,
            2,
            4,
            2
          ],
          [
            4,
            4,
            4,
            4,
            0,
            8,
            8,
            8
          ],
          [
            4,
            4,
            4,
            4,
            4,
            2,
            8,
            8
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            2,
            2
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            4,
            8,
            8,
            8,
            0
          ],
          [
            1,
            1,
            1,
            1,
            8,
            8,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            2,
            1,
            2,
            2,
            2,
            2,
            2
          ],
          [
            0,
            8,
            0,
            8,
            2,
            2,
            2,
            2
          ],
          [
            1,
            2,
            1,
            2,
            2,
            2,
            2,
            2
          ],
          [
            0,
            8,
            0,
            8,
            2,
            2,
            2,
            2
          ],
          [
            0,
            8,
            0,
            8,
            2,
            0,
            2,
            0
          ],
          [
            4,
            2,
            4,
            2,
            4,
            1,
            4,
            1
          ],
          [
            4,
            4,
            2,
            2,
            4,
            4,
            4,
            1
          ],
          [
            4,
            4,
            2,
            2,
            4,
            4,
            8,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            4,
            0,
            2,
            2,
            0,
            0
          ],
          [
            4,
            4,
            4,
            0,
            2,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            2,
            1,
            2,
            4,
            1,
            1,
            1
          ],
          [
            0,
            8,
            0,
            8,
            8,
            0,
            1,
            1
          ],
          [
            1,
            2,
            1,
            2,
            8,
            8,
            1,
            2
          ],
          [
            0,
            8,
            0,
            8,
            8,
            8,
            0,
            8
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            8,
            8
          ]
        ]
      ]
    ],
    "seeds": [
      "1caeab9d.py",
      "8e1813be.py",
      "6b9890af.py",
      "150deff5.py"
    ],
    "problem_id": 12562
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern extraction, rotation, color transformation\n\n# description:\n# In the input, you will see a central pattern surrounded by a border of black pixels. \n# The pattern consists of four quadrants with four different colors. \n# To make the output, you should extract the central pattern, rotate it 90 degrees clockwise, \n# and then replace the original pattern in the grid with this rotated version.\n\ndef main(input_grid):\n    # Step 1: Extract the central pattern\n    # Assuming the central pattern occupies a square region\n    center_size = min(input_grid.shape) // 2  # Central pattern should be a square\n    start = (input_grid.shape[0] - center_size) // 2\n    pattern = input_grid[start:start + center_size, start:start + center_size]\n\n    # Step 2: Rotate the pattern 90 degrees clockwise\n    rotated_pattern = np.rot90(pattern, k=-1)  # Clockwise rotation\n\n    # Step 3: Place the rotated pattern back into the output grid\n    output_grid = np.copy(input_grid)\n    output_grid[start:start + center_size, start:start + center_size] = rotated_pattern\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a grid with a central pattern\n    n = m = np.random.randint(6, 10)  # Ensure the grid is large enough for a central pattern\n    grid = np.zeros((n, m), dtype=int)\n    \n    # Define the colors for the quadrants\n    colors = [Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW]\n\n    # Create a central pattern of size 4x4\n    center_size = 4\n    center_start = (n - center_size) // 2\n    pattern = np.array([[colors[0], colors[1]], \n                        [colors[2], colors[3]]])\n    pattern = np.tile(pattern, (2, 2))  # Duplicate to form a 4x4 pattern\n\n    # Place the pattern in the center of the grid\n    grid[center_start:center_start + center_size, center_start:center_start + center_size] = pattern\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            3,
            2,
            3,
            0,
            0
          ],
          [
            0,
            1,
            4,
            1,
            4,
            0,
            0
          ],
          [
            0,
            2,
            3,
            2,
            3,
            0,
            0
          ],
          [
            0,
            1,
            4,
            1,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            3,
            2,
            3,
            0,
            0
          ],
          [
            0,
            1,
            4,
            3,
            4,
            0,
            0
          ],
          [
            0,
            2,
            1,
            2,
            1,
            0,
            0
          ],
          [
            0,
            1,
            4,
            3,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            3,
            2,
            3,
            0,
            0
          ],
          [
            0,
            0,
            1,
            4,
            1,
            4,
            0,
            0
          ],
          [
            0,
            0,
            2,
            3,
            2,
            3,
            0,
            0
          ],
          [
            0,
            0,
            1,
            4,
            1,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            2,
            1,
            2,
            0,
            0
          ],
          [
            0,
            0,
            4,
            3,
            4,
            3,
            0,
            0
          ],
          [
            0,
            0,
            1,
            2,
            1,
            2,
            0,
            0
          ],
          [
            0,
            0,
            4,
            3,
            4,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            3,
            2,
            3,
            0
          ],
          [
            0,
            1,
            4,
            1,
            4,
            0
          ],
          [
            0,
            2,
            3,
            2,
            3,
            0
          ],
          [
            0,
            1,
            4,
            1,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            1,
            2,
            3,
            0
          ],
          [
            0,
            3,
            4,
            3,
            4,
            0
          ],
          [
            0,
            2,
            1,
            2,
            3,
            0
          ],
          [
            0,
            1,
            4,
            1,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            3,
            2,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            4,
            1,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            3,
            2,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            4,
            1,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            2,
            1,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            3,
            4,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            2,
            1,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            3,
            4,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "1f642eb9.py",
      "a9f96cdd.py"
    ],
    "problem_id": 13010
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, pattern duplication\n\n# description:\n# In the input, you will see a pattern of colored pixels. \n# To create the output, check if the pattern has rotational symmetry; \n# if it does, duplicate the pattern in all quadrants of the grid, \n# while keeping the center unchanged.\n\ndef main(input_grid):\n    n, m = input_grid.shape\n    # Check for rotational symmetry\n    center_x, center_y = n // 2, m // 2\n    has_rotational_symmetry = True\n    \n    # Check each quadrant against the center\n    for i in range(center_x):\n        for j in range(center_y):\n            if input_grid[i, j] != input_grid[n - 1 - i, m - 1 - j]:\n                has_rotational_symmetry = False\n                break\n        if not has_rotational_symmetry:\n            break\n\n    # Create the output grid\n    output_grid = np.full((n, m), Color.BLACK)\n    \n    if has_rotational_symmetry:\n        # Duplicate the pattern in all quadrants\n        for i in range(center_x):\n            for j in range(center_y):\n                output_grid[i, j] = input_grid[i, j]  # Top left\n                output_grid[i, m - 1 - j] = input_grid[i, j]  # Top right\n                output_grid[n - 1 - i, j] = input_grid[i, j]  # Bottom left\n                output_grid[n - 1 - i, m - 1 - j] = input_grid[i, j]  # Bottom right\n        # Keep the center unchanged (if n and m are odd)\n        if n % 2 == 1 and m % 2 == 1:\n            output_grid[center_x, center_y] = input_grid[center_x, center_y]\n    \n    return output_grid\n\ndef generate_input():\n    n, m = np.random.randint(3, 7), np.random.randint(3, 7)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly generate a pattern with potential rotational symmetry\n    has_rotational_symmetry = np.random.choice([True, False])\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    if has_rotational_symmetry:\n        # Create a symmetrical pattern manually\n        center_x, center_y = n // 2, m // 2\n        for i in range(center_x):\n            for j in range(center_y):\n                grid[i, j] = color\n                grid[i, m - 1 - j] = color\n                grid[n - 1 - i, j] = color\n                grid[n - 1 - i, m - 1 - j] = color\n        if n % 2 == 1 and m % 2 == 1:\n            grid[center_x, center_y] = color  # Center pixel\n    else:\n        # Create a random pattern without enforcing symmetry\n        grid = random_sprite(n, m, density=0.5, symmetry=\"not_symmetric\", color_palette=[color])\n\n    return grid",
    "examples": [
      [
        [
          [
            9,
            9,
            0
          ],
          [
            9,
            0,
            0
          ],
          [
            9,
            9,
            0
          ],
          [
            0,
            9,
            9
          ],
          [
            0,
            0,
            9
          ],
          [
            0,
            0,
            9
          ]
        ],
        [
          [
            9,
            0,
            9
          ],
          [
            9,
            0,
            9
          ],
          [
            9,
            0,
            9
          ],
          [
            9,
            0,
            9
          ],
          [
            9,
            0,
            9
          ],
          [
            9,
            0,
            9
          ]
        ]
      ],
      [
        [
          [
            6,
            0,
            0
          ],
          [
            6,
            0,
            0
          ],
          [
            6,
            6,
            6
          ]
        ],
        [
          [
            6,
            0,
            6
          ],
          [
            0,
            0,
            0
          ],
          [
            6,
            0,
            6
          ]
        ]
      ],
      [
        [
          [
            9,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            9,
            0,
            0
          ],
          [
            9,
            0,
            9,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            9
          ]
        ],
        [
          [
            9,
            0,
            0,
            0,
            9
          ],
          [
            9,
            9,
            0,
            9,
            9
          ],
          [
            9,
            9,
            0,
            9,
            9
          ],
          [
            9,
            0,
            0,
            0,
            9
          ]
        ]
      ],
      [
        [
          [
            0,
            4,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            0
          ]
        ],
        [
          [
            0,
            4,
            0,
            4,
            0
          ],
          [
            4,
            4,
            0,
            4,
            4
          ],
          [
            0,
            0,
            4,
            0,
            0
          ],
          [
            4,
            4,
            0,
            4,
            4
          ],
          [
            0,
            4,
            0,
            4,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "bc1d5164.py",
      "6fa7a44f.py",
      "3de23699.py"
    ],
    "problem_id": 13296
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# shape rotation, scaling\n\n# description:\n# In the input, you will see a shape that is not scaled correctly. To create the output,\n# scale the shape to a specified size while maintaining its original color and orientation.\n# The scaling factor will be determined by the ratio of the original shape's size to the target size.\n\ndef main(input_grid):\n    # Determine the original shape's dimensions\n    original_height, original_width = input_grid.shape\n\n    # Define the target size for scaling (for example, scale to 2 times the original size)\n    target_size = (original_height * 2, original_width * 2)\n\n    # Create an output grid with the target size, filled with black\n    output_grid = np.full(target_size, Color.BLACK)\n\n    # Scale the shape by copying pixels from the input grid to the output grid\n    for i in range(original_height):\n        for j in range(original_width):\n            if input_grid[i, j] != Color.BLACK:\n                # Place the pixel in the corresponding position in the output grid\n                output_grid[2 * i, 2 * j] = input_grid[i, j]\n                output_grid[2 * i + 1, 2 * j] = input_grid[i, j]\n                output_grid[2 * i, 2 * j + 1] = input_grid[i, j]\n                output_grid[2 * i + 1, 2 * j + 1] = input_grid[i, j]\n\n    return output_grid\n\n\ndef generate_input():\n    # Generate a random sprite of size (1-4)x(1-4)\n    w = np.random.randint(1, 5)\n    h = np.random.randint(1, 5)\n    sprite = random_sprite(w, h, density=1, color_palette=Color.NOT_BLACK)\n\n    # Create a grid to hold the sprite\n    grid = np.full((h, w), Color.BLACK, dtype=int)\n\n    # Place the sprite in the grid at a random location\n    x, y = random_free_location_for_sprite(grid, sprite)\n    blit_sprite(grid, sprite, x, y)\n\n    return grid",
    "examples": [
      [
        [
          [
            5,
            1
          ],
          [
            5,
            1
          ]
        ],
        [
          [
            5,
            5,
            1,
            1
          ],
          [
            5,
            5,
            1,
            1
          ],
          [
            5,
            5,
            1,
            1
          ],
          [
            5,
            5,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            9,
            5
          ],
          [
            9,
            9
          ]
        ],
        [
          [
            9,
            9,
            5,
            5
          ],
          [
            9,
            9,
            5,
            5
          ],
          [
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9
          ]
        ]
      ],
      [
        [
          [
            3,
            3,
            8
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            8
          ]
        ],
        [
          [
            3,
            3,
            3,
            3,
            8,
            8
          ],
          [
            3,
            3,
            3,
            3,
            8,
            8
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            8,
            8
          ],
          [
            3,
            3,
            3,
            3,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            9
          ],
          [
            9,
            9,
            9
          ],
          [
            9,
            9,
            9
          ]
        ],
        [
          [
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9
          ]
        ]
      ]
    ],
    "seeds": [
      "1caeab9d.py",
      "6fa7a44f.py",
      "44f52bb0.py",
      "11852cab.py"
    ],
    "problem_id": 13811
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry, object recognition\n\n# description:\n# In the input, you will see a grid populated with objects of varying shapes and colors.\n# Identify any objects that are symmetric (either vertically or horizontally) and highlight them in a contrasting color in the output.\n\ndef main(input_grid):\n    # Create an output grid initialized to black\n    output_grid = np.full_like(input_grid, Color.BLACK)\n    \n    # Detect objects in the input grid\n    objects = detect_objects(input_grid, background=Color.BLACK, monochromatic=False, connectivity=8)\n\n    # Iterate through the detected objects and check for symmetry\n    for obj in objects:\n        # Check for mirror symmetries in the object\n        mirrors = detect_mirror_symmetry(obj, ignore_colors=[Color.BLACK])\n        \n        # If any symmetry is found, color the object in the output grid\n        if mirrors:\n            # Get the coordinates of the object in the input grid\n            x_offset, y_offset = 0, 0  # Initialize offsets for placing the object in output grid\n            for x, y in np.argwhere(obj != Color.BLACK):\n                output_grid[x + x_offset, y + y_offset] = np.unique(obj[obj != Color.BLACK])\n    \n            # Highlight the symmetric object with a contrasting color (e.g., Color.YELLOW)\n            output_grid[obj != Color.BLACK] = Color.YELLOW\n            \n    return output_grid\n\ndef generate_input():\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly create a few objects with varying shapes\n    for _ in range(np.random.randint(1, 5)):  # Create 1 to 4 objects\n        # Generate random sprites of varying sizes\n        sprite_width = np.random.randint(2, 5)\n        sprite_height = np.random.randint(2, 5)\n        sprite = random_sprite(sprite_width, sprite_height, density=0.5, symmetry=np.random.choice(['horizontal', 'vertical', 'not_symmetric']), color_palette=Color.NOT_BLACK)\n\n        # Randomly place the sprite in the grid\n        x, y = random_free_location_for_sprite(grid, sprite)\n        blit_sprite(grid, sprite, x, y)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            0,
            7,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            4,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            0,
            0,
            0
          ],
          [
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "1caeab9d.py",
      "3345333e.py",
      "6fa7a44f.py"
    ],
    "problem_id": 13966
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, pattern extraction, background handling\n\n# description:\n# In the input, you will see a square pattern of colored pixels surrounded by a black border. \n# To produce the output, rotate the square pattern 90 degrees counterclockwise and place it back into the same position, effectively transforming its orientation.\n\ndef main(input_grid):\n    # Crop out the black border to get the pattern\n    pattern = crop(input_grid, background=Color.BLACK)\n\n    # Rotate the pattern 90 degrees counterclockwise\n    rotated_pattern = np.rot90(pattern)\n\n    # Create an output grid that maintains the original size\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Place the rotated pattern back into the original position\n    output_grid[1:-1, 1:-1] = rotated_pattern  # Assuming a 1-pixel black border\n\n    return output_grid\n\ndef generate_input():\n    # Make a random square pattern of random size and colors\n    n = m = np.random.randint(4, 8)  # Pattern size should allow for a border\n    grid = random_sprite(n, m, density=1, symmetry=\"not_symmetric\", color_palette=Color.NOT_BLACK)\n\n    # Create a new grid with a black border around the pattern\n    bordered_grid = np.full((n + 2, m + 2), Color.BLACK)\n    bordered_grid[1:-1, 1:-1] = grid  # Place the pattern in the center\n\n    return bordered_grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            6,
            6,
            1,
            4,
            8,
            0
          ],
          [
            0,
            9,
            4,
            6,
            1,
            1,
            8,
            0
          ],
          [
            0,
            4,
            4,
            6,
            5,
            2,
            9,
            0
          ],
          [
            0,
            4,
            6,
            7,
            7,
            3,
            7,
            0
          ],
          [
            0,
            4,
            4,
            8,
            8,
            8,
            6,
            0
          ],
          [
            0,
            4,
            4,
            2,
            8,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            8,
            9,
            7,
            6,
            3,
            0
          ],
          [
            0,
            4,
            1,
            2,
            3,
            8,
            3,
            0
          ],
          [
            0,
            1,
            1,
            5,
            7,
            8,
            8,
            0
          ],
          [
            0,
            6,
            6,
            6,
            7,
            8,
            2,
            0
          ],
          [
            0,
            6,
            4,
            4,
            6,
            4,
            4,
            0
          ],
          [
            0,
            6,
            9,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            7,
            7,
            7,
            1,
            8,
            0
          ],
          [
            0,
            1,
            7,
            7,
            1,
            1,
            1,
            0
          ],
          [
            0,
            4,
            7,
            6,
            7,
            2,
            2,
            0
          ],
          [
            0,
            4,
            4,
            4,
            4,
            2,
            2,
            0
          ],
          [
            0,
            4,
            1,
            4,
            9,
            2,
            2,
            0
          ],
          [
            0,
            8,
            5,
            4,
            9,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            1,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            1,
            1,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            7,
            1,
            7,
            4,
            9,
            9,
            0
          ],
          [
            0,
            7,
            7,
            6,
            4,
            4,
            4,
            0
          ],
          [
            0,
            7,
            7,
            7,
            4,
            1,
            5,
            0
          ],
          [
            0,
            6,
            1,
            4,
            4,
            4,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            2,
            8,
            8,
            8,
            0
          ],
          [
            0,
            8,
            2,
            4,
            9,
            8,
            0
          ],
          [
            0,
            6,
            7,
            4,
            8,
            8,
            0
          ],
          [
            0,
            9,
            9,
            4,
            8,
            3,
            0
          ],
          [
            0,
            5,
            5,
            1,
            8,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            8,
            8,
            3,
            8,
            0
          ],
          [
            0,
            8,
            9,
            8,
            8,
            8,
            0
          ],
          [
            0,
            8,
            4,
            4,
            4,
            1,
            0
          ],
          [
            0,
            2,
            2,
            7,
            9,
            5,
            0
          ],
          [
            0,
            3,
            8,
            6,
            9,
            5,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            6,
            6,
            4,
            3,
            7,
            0
          ],
          [
            0,
            4,
            4,
            3,
            4,
            6,
            6,
            0
          ],
          [
            0,
            6,
            4,
            4,
            4,
            5,
            3,
            0
          ],
          [
            0,
            6,
            5,
            8,
            3,
            5,
            8,
            0
          ],
          [
            0,
            5,
            3,
            8,
            9,
            9,
            6,
            0
          ],
          [
            0,
            9,
            9,
            9,
            9,
            3,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            7,
            6,
            3,
            8,
            6,
            1,
            0
          ],
          [
            0,
            3,
            6,
            5,
            5,
            9,
            3,
            0
          ],
          [
            0,
            4,
            4,
            4,
            3,
            9,
            9,
            0
          ],
          [
            0,
            6,
            3,
            4,
            8,
            8,
            9,
            0
          ],
          [
            0,
            6,
            4,
            4,
            5,
            3,
            9,
            0
          ],
          [
            0,
            4,
            4,
            6,
            6,
            5,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "8e1813be.py",
      "6b9890af.py"
    ],
    "problem_id": 14136
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern recognition, color mapping, connectivity\n\n# description:\n# In the input, you will see a grid containing several colored shapes, where each shape is made up of a single color \n# and is separated by black pixels. Each unique shape corresponds to a specific color (red, blue, green, or yellow).\n# The output grid should consist of a new shape where each original shape is replaced by its corresponding color \n# defined in a mapping: red becomes blue, blue becomes green, green becomes yellow, and yellow becomes red.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Define the color mapping\n    color_mapping = {\n        Color.RED: Color.BLUE,\n        Color.BLUE: Color.GREEN,\n        Color.GREEN: Color.YELLOW,\n        Color.YELLOW: Color.RED\n    }\n\n    # Find all connected components in the input grid\n    shapes = find_connected_components(input_grid, background=Color.BLACK, connectivity=8, monochromatic=True)\n\n    # Create an output grid that is the same size as the input grid\n    output_grid = np.zeros_like(input_grid)\n\n    # For each shape, replace it with its corresponding mapped color\n    for shape in shapes:\n        # Get the color of the current shape\n        shape_color = shape[0, 0]  # Since it's monochromatic, we can take any pixel\n        if shape_color in color_mapping:\n            new_color = color_mapping[shape_color]\n            # Fill the output grid with the new color at the same shape positions\n            output_grid[shape == shape_color] = new_color\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a grid with random dimensions\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Available colors for shapes\n    available_colors = [Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW]\n\n    # Randomly generate shapes in the grid\n    for _ in range(np.random.randint(1, 5)):  # Create 1 to 4 shapes\n        # Random size and position for each shape\n        shape_size = np.random.randint(2, 4)\n        color = np.random.choice(available_colors)\n\n        # Random position for the shape\n        x_start = np.random.randint(0, n - shape_size)\n        y_start = np.random.randint(0, m - shape_size)\n\n        # Create the shape in the grid\n        for i in range(shape_size):\n            for j in range(shape_size):\n                grid[x_start + i, y_start + j] = color\n\n        # Add a border of black pixels around the shape\n        for i in range(shape_size + 2):\n            if x_start - 1 >= 0:\n                grid[x_start - 1, y_start + i - 1] = Color.BLACK\n            if y_start - 1 >= 0:\n                grid[x_start + i - 1, y_start - 1] = Color.BLACK\n            if x_start + shape_size < n:\n                grid[x_start + shape_size, y_start + i - 1] = Color.BLACK\n            if y_start + shape_size < m:\n                grid[x_start + i - 1, y_start + shape_size] = Color.BLACK\n\n    return grid",
    "examples": [
      [
        [
          [
            2,
            0,
            0,
            0,
            0
          ],
          [
            2,
            0,
            4,
            4,
            0
          ],
          [
            2,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            3,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            3,
            3,
            0
          ],
          [
            2,
            2,
            0,
            3,
            3,
            0
          ],
          [
            2,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            2,
            0,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            0,
            0,
            0
          ],
          [
            3,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            2,
            2,
            2,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "995c5fa3.py",
      "bc1d5164.py",
      "a9f96cdd.py"
    ],
    "problem_id": 14265
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color transformation, pattern expansion\n\n# description:\n# The input is a grid that contains a single colored pixel in the center. \n# The output grid should be an expanded pattern based on the input color: \n# If the input color is red, fill the grid with a checkerboard pattern of red and yellow.\n# If the input color is blue, fill the grid with a checkerboard pattern of blue and green.\n# If the input color is green, fill the grid with a checkerboard pattern of green and teal.\n# If the input color is yellow, fill the grid with a checkerboard pattern of yellow and pink.\n\ndef main(input_grid):\n    # Find the center pixel\n    center_objects = detect_objects(grid=input_grid, colors=Color.NOT_BLACK, allowed_dimensions=[(1, 1)], monochromatic=True)\n    assert len(center_objects) == 1\n    center_pixel = center_objects[0]\n\n    # Get the color of the center pixel\n    center_x, center_y = object_position(center_pixel, background=Color.BLACK)\n    center_color = input_grid[center_x, center_y]\n\n    # Define color patterns based on the center color\n    if center_color == Color.RED:\n        color1, color2 = Color.RED, Color.YELLOW\n    elif center_color == Color.BLUE:\n        color1, color2 = Color.BLUE, Color.GREEN\n    elif center_color == Color.GREEN:\n        color1, color2 = Color.GREEN, Color.TEAL\n    elif center_color == Color.YELLOW:\n        color1, color2 = Color.YELLOW, Color.PINK\n    else:\n        raise ValueError(\"Invalid center color\")\n\n    # Create the output grid with a checkerboard pattern\n    output_grid = np.zeros((8, 8), dtype=int)\n    for i in range(8):\n        for j in range(8):\n            if (i + j) % 2 == 0:\n                output_grid[i, j] = color1\n            else:\n                output_grid[i, j] = color2\n\n    return output_grid\n\ndef generate_input():\n    # Create a blank grid\n    grid = np.full((5, 5), Color.BLACK)\n\n    # Randomly choose the position for the colored pixel\n    x, y = 2, 2  # Center of the grid\n    available_colors = [Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW]\n    grid[x, y] = random.choice(available_colors)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            3,
            1,
            3,
            1,
            3,
            1,
            3
          ],
          [
            3,
            1,
            3,
            1,
            3,
            1,
            3,
            1
          ],
          [
            1,
            3,
            1,
            3,
            1,
            3,
            1,
            3
          ],
          [
            3,
            1,
            3,
            1,
            3,
            1,
            3,
            1
          ],
          [
            1,
            3,
            1,
            3,
            1,
            3,
            1,
            3
          ],
          [
            3,
            1,
            3,
            1,
            3,
            1,
            3,
            1
          ],
          [
            1,
            3,
            1,
            3,
            1,
            3,
            1,
            3
          ],
          [
            3,
            1,
            3,
            1,
            3,
            1,
            3,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            8,
            3,
            8,
            3,
            8,
            3,
            8
          ],
          [
            8,
            3,
            8,
            3,
            8,
            3,
            8,
            3
          ],
          [
            3,
            8,
            3,
            8,
            3,
            8,
            3,
            8
          ],
          [
            8,
            3,
            8,
            3,
            8,
            3,
            8,
            3
          ],
          [
            3,
            8,
            3,
            8,
            3,
            8,
            3,
            8
          ],
          [
            8,
            3,
            8,
            3,
            8,
            3,
            8,
            3
          ],
          [
            3,
            8,
            3,
            8,
            3,
            8,
            3,
            8
          ],
          [
            8,
            3,
            8,
            3,
            8,
            3,
            8,
            3
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            2,
            4,
            2,
            4,
            2,
            4,
            2,
            4
          ],
          [
            4,
            2,
            4,
            2,
            4,
            2,
            4,
            2
          ],
          [
            2,
            4,
            2,
            4,
            2,
            4,
            2,
            4
          ],
          [
            4,
            2,
            4,
            2,
            4,
            2,
            4,
            2
          ],
          [
            2,
            4,
            2,
            4,
            2,
            4,
            2,
            4
          ],
          [
            4,
            2,
            4,
            2,
            4,
            2,
            4,
            2
          ],
          [
            2,
            4,
            2,
            4,
            2,
            4,
            2,
            4
          ],
          [
            4,
            2,
            4,
            2,
            4,
            2,
            4,
            2
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            6,
            4,
            6,
            4,
            6,
            4,
            6
          ],
          [
            6,
            4,
            6,
            4,
            6,
            4,
            6,
            4
          ],
          [
            4,
            6,
            4,
            6,
            4,
            6,
            4,
            6
          ],
          [
            6,
            4,
            6,
            4,
            6,
            4,
            6,
            4
          ],
          [
            4,
            6,
            4,
            6,
            4,
            6,
            4,
            6
          ],
          [
            6,
            4,
            6,
            4,
            6,
            4,
            6,
            4
          ],
          [
            4,
            6,
            4,
            6,
            4,
            6,
            4,
            6
          ],
          [
            6,
            4,
            6,
            4,
            6,
            4,
            6,
            4
          ]
        ]
      ]
    ],
    "seeds": [
      "0d3d703e.py",
      "995c5fa3.py",
      "a9f96cdd.py",
      "3de23699.py"
    ],
    "problem_id": 15208
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, color filling\n\n# description:\n# In the input grid, you will see a symmetric pattern of colored pixels that is either missing its left or right half. \n# The task is to identify which half is missing and fill it in with the same color as the existing half to restore the full symmetric pattern.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    n, m = input_grid.shape\n    \n    # Check for symmetry along the vertical axis\n    left_half = input_grid[:, :m//2]\n    right_half = input_grid[:, m//2:]\n    \n    if np.array_equal(left_half, np.flip(right_half, axis=1)):\n        output_grid = np.copy(input_grid)\n        output_grid[:, m//2:] = left_half  # Fill the right half\n    elif np.array_equal(right_half, np.flip(left_half, axis=1)):\n        output_grid = np.copy(input_grid)\n        output_grid[:, :m//2] = right_half  # Fill the left half\n    else:\n        output_grid = np.copy(input_grid)  # No filling needed if already symmetric\n        \n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    n = np.random.randint(5, 8)  # Height of the grid\n    m = np.random.randint(6, 10)  # Width of the grid (even to ensure symmetry)\n    grid = np.zeros((n, m), dtype=int)\n\n    color = np.random.choice(list(Color.NOT_BLACK))  # Random color for patterns\n\n    # Create a symmetric pattern on one side and leave one half blank\n    if np.random.choice([True, False]):\n        # Fill left half\n        grid[:, :m//2] = np.random.choice([color, Color.BLACK], size=(n, m//2), p=[0.7, 0.3])\n    else:\n        # Fill right half\n        grid[:, m//2:] = np.random.choice([color, Color.BLACK], size=(n, m//2), p=[0.7, 0.3])\n\n    # Make the other half a mirror of the filled half\n    if np.sum(grid) == 0:  # Check if the grid is all black\n        return generate_input()  # Regenerate if empty\n\n    # Create symmetry\n    if np.random.choice([True, False]):\n        grid[:, m//2:] = np.flip(grid[:, :m//2], axis=1)\n    else:\n        grid[:, :m//2] = np.flip(grid[:, m//2:], axis=1)\n\n    return grid",
    "examples": [
      [
        [
          [
            7,
            7,
            7,
            0,
            0,
            7,
            7,
            7
          ],
          [
            7,
            0,
            7,
            7,
            7,
            7,
            0,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            0,
            0,
            0,
            0,
            7,
            7
          ],
          [
            0,
            7,
            7,
            7,
            7,
            7,
            7,
            0
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            0,
            7,
            7,
            0,
            7,
            7
          ]
        ],
        [
          [
            7,
            7,
            7,
            0,
            7,
            7,
            7,
            0
          ],
          [
            7,
            0,
            7,
            7,
            7,
            0,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            0,
            0,
            7,
            7,
            0,
            0
          ],
          [
            0,
            7,
            7,
            7,
            0,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            0,
            7,
            7,
            7,
            0,
            7
          ]
        ]
      ],
      [
        [
          [
            0,
            5,
            5,
            5,
            5,
            5,
            5,
            0
          ],
          [
            5,
            5,
            0,
            5,
            5,
            0,
            5,
            5
          ],
          [
            0,
            5,
            5,
            5,
            5,
            5,
            5,
            0
          ],
          [
            5,
            0,
            0,
            5,
            5,
            0,
            0,
            5
          ],
          [
            0,
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            5,
            0,
            0,
            5,
            5,
            0,
            0,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ]
        ],
        [
          [
            0,
            5,
            5,
            5,
            0,
            5,
            5,
            5
          ],
          [
            5,
            5,
            0,
            5,
            5,
            5,
            0,
            5
          ],
          [
            0,
            5,
            5,
            5,
            0,
            5,
            5,
            5
          ],
          [
            5,
            0,
            0,
            5,
            5,
            0,
            0,
            5
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0,
            5,
            5
          ],
          [
            5,
            0,
            0,
            5,
            5,
            0,
            0,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            0,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            4,
            4,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            4,
            4
          ],
          [
            0,
            0,
            4,
            4,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            4,
            4
          ],
          [
            0,
            4,
            0,
            0,
            4,
            0
          ]
        ],
        [
          [
            0,
            4,
            4,
            0,
            4,
            4
          ],
          [
            0,
            0,
            4,
            0,
            0,
            4
          ],
          [
            4,
            4,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0,
            4
          ],
          [
            4,
            4,
            0,
            4,
            4,
            0
          ],
          [
            0,
            4,
            0,
            0,
            4,
            0
          ]
        ]
      ],
      [
        [
          [
            8,
            8,
            8,
            0,
            0,
            8,
            8,
            8
          ],
          [
            8,
            0,
            0,
            0,
            0,
            0,
            0,
            8
          ],
          [
            8,
            0,
            8,
            8,
            8,
            8,
            0,
            8
          ],
          [
            8,
            0,
            8,
            0,
            0,
            8,
            0,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            8,
            8,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            0,
            8,
            8,
            8,
            0
          ],
          [
            8,
            0,
            0,
            0,
            8,
            0,
            0,
            0
          ],
          [
            8,
            0,
            8,
            8,
            8,
            0,
            8,
            8
          ],
          [
            8,
            0,
            8,
            0,
            8,
            0,
            8,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            8
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "44f52bb0.py",
      "3de23699.py",
      "995c5fa3.py"
    ],
    "problem_id": 15498
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, symmetry, color transformation\n\n# description:\n# In the input grid, you will see a small colored sprite placed on a black background. \n# To create the output, you need to rotate this sprite by 90 degrees clockwise, \n# and then change its color to a new color that is determined by the sprite's original color. \n# Each original color corresponds to a new color: \n# Red -> Blue, Blue -> Green, Green -> Yellow, Yellow -> Red, \n# and the black background remains unchanged.\n\ndef main(input_grid):\n    # Create the output grid with the same shape as input\n    output_grid = np.zeros_like(input_grid)\n\n    # Find the unique colors in the input grid\n    unique_colors = np.unique(input_grid)\n    \n    # Define color transformation rules\n    color_transform = {\n        Color.RED: Color.BLUE,\n        Color.BLUE: Color.GREEN,\n        Color.GREEN: Color.YELLOW,\n        Color.YELLOW: Color.RED,\n        Color.BLACK: Color.BLACK\n    }\n    \n    # Rotate the sprite 90 degrees clockwise\n    # For each non-black pixel, rotate its position and change its color\n    for x in range(input_grid.shape[0]):\n        for y in range(input_grid.shape[1]):\n            current_color = input_grid[x, y]\n            if current_color != Color.BLACK:\n                # New coordinates after a 90-degree clockwise rotation\n                new_x = y\n                new_y = input_grid.shape[0] - 1 - x\n                new_color = color_transform[current_color]\n                output_grid[new_x, new_y] = new_color\n\n    return output_grid\n\n\ndef generate_input():\n    # Generate a grid of size 5x5 with a black background\n    n, m = 5, 5\n    grid = np.zeros((n, m), dtype=int)\n\n    # Create a random sprite with one color in the center\n    sprite_color = random.choice(Color.NOT_BLACK)\n    \n    # Place the sprite in the center with a random shape\n    # Let's make a simple 3x3 sprite for clarity\n    for i in range(1, 4):\n        for j in range(1, 4):\n            grid[i, j] = sprite_color\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "31aa019c.py",
      "00d62c1b.py",
      "6cdd2623.py",
      "2c608aff.py"
    ],
    "problem_id": 16409
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern replication, quadrant mirroring\n\n# description:\n# In the input, you will see a small square pattern at the center of the grid.\n# To produce the output, replicate the pattern across the grid in all four quadrants,\n# ensuring that each replication is a mirror image of the original pattern about the center.\n\ndef main(input_grid):\n    # Find the center of the input grid\n    center_x, center_y = input_grid.shape[0] // 2, input_grid.shape[1] // 2\n    \n    # Crop the central pattern from the input grid\n    pattern = crop(input_grid[center_x-1:center_x+1, center_y-1:center_y+1])\n\n    # Get the dimensions of the pattern\n    pattern_height, pattern_width = pattern.shape\n\n    # Create the output grid with double the dimensions of the pattern\n    output_height = pattern_height * 2\n    output_width = pattern_width * 2\n    output_grid = np.full((output_height, output_width), Color.BLACK)\n\n    # Place the original pattern in the center\n    blit_sprite(output_grid, pattern, x=1, y=1)\n\n    # Create the mirrored patterns for the other quadrants\n    mirrored_pattern_top = pattern[::-1, :]  # Mirror vertically\n    mirrored_pattern_bottom = pattern[:, ::-1]  # Mirror horizontally\n\n    # Place mirrored patterns in the output grid\n    blit_sprite(output_grid, mirrored_pattern_top, x=1, y=0)  # Top quadrant\n    blit_sprite(output_grid, mirrored_pattern_bottom, x=0, y=1)  # Left quadrant\n    blit_sprite(output_grid, mirrored_pattern_bottom[::-1, :], x=0, y=0)  # Top-left quadrant\n\n    return output_grid\n\ndef generate_input():\n    # Randomly generate a small grid with a central pattern\n    n = np.random.randint(3, 6)  # Size of the grid\n    m = np.random.randint(3, 6)\n\n    # Create a grid with black background\n    grid = np.full((n, m), Color.BLACK)\n\n    # Define the size of the central pattern\n    pattern_size = np.random.randint(1, min(n, m) // 2)  # Size of the pattern\n\n    # Generate a central pattern\n    central_pattern = random_sprite(pattern_size, pattern_size, density=0.5, color_palette=Color.NOT_BLACK)\n\n    # Place the central pattern in the middle of the grid\n    start_x = n // 2 - pattern_size // 2\n    start_y = m // 2 - pattern_size // 2\n    blit_sprite(grid, central_pattern, x=start_x, y=start_y, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1
          ],
          [
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1
          ],
          [
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1
          ],
          [
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1
          ],
          [
            1,
            1
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "3de23699.py",
      "44f52bb0.py"
    ],
    "problem_id": 17355
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# reflection, mirroring, grid manipulation\n\n# description:\n# In the input, you will see a rectangular grid with a colorful pattern on one side and empty space on the other.\n# To create the output, reflect the colorful pattern across the center line of the grid, ensuring that the mirrored pattern matches the original in color and orientation.\n\ndef main(input_grid):\n    # Determine the height and width of the input grid\n    height, width = input_grid.shape\n    \n    # Determine the midpoint for reflection\n    mid_x = height // 2\n    \n    # Extract the colorful pattern from the top half of the grid\n    pattern = input_grid[:mid_x, :]\n    \n    # Reflect the pattern vertically\n    reflected_pattern = pattern[::-1, :]\n    \n    # Create the output grid\n    output_grid = np.copy(input_grid)\n    \n    # Place the original pattern and the reflected pattern in the output grid\n    output_grid[mid_x:, :] = reflected_pattern\n    \n    return output_grid\n\ndef generate_input():\n    # Randomly determine the dimensions of the grid\n    height = np.random.randint(4, 8)  # At least 4 rows to have a pattern and a reflection\n    width = np.random.randint(4, 8)   # At least 4 columns\n    \n    # Create a grid filled with black\n    grid = np.full((height, width), Color.BLACK)\n    \n    # Generate a random pattern in the top half of the grid\n    pattern_height = height // 2\n    pattern = random_sprite(pattern_height, width, density=0.7, color_palette=Color.NOT_BLACK, symmetry=None)\n    \n    # Place the pattern into the top half of the grid\n    grid[:pattern_height, :] = pattern\n    \n    return grid",
    "examples": [
      [
        [
          [
            8,
            8,
            4,
            4,
            8,
            8
          ],
          [
            6,
            9,
            7,
            7,
            9,
            6
          ],
          [
            6,
            6,
            5,
            5,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            4,
            4,
            8,
            8
          ],
          [
            6,
            9,
            7,
            7,
            9,
            6
          ],
          [
            6,
            6,
            5,
            5,
            6,
            6
          ],
          [
            6,
            6,
            5,
            5,
            6,
            6
          ],
          [
            6,
            9,
            7,
            7,
            9,
            6
          ],
          [
            8,
            8,
            4,
            4,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            3,
            1,
            1,
            1
          ],
          [
            3,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            1,
            1,
            1
          ],
          [
            3,
            1,
            1,
            1
          ],
          [
            3,
            1,
            1,
            1
          ],
          [
            3,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            7,
            7,
            7,
            7,
            3,
            3,
            5
          ],
          [
            7,
            1,
            4,
            4,
            3,
            5,
            5
          ],
          [
            0,
            0,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            7,
            7,
            7,
            7,
            3,
            3,
            5
          ],
          [
            7,
            1,
            4,
            4,
            3,
            5,
            5
          ],
          [
            0,
            0,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            9,
            0
          ],
          [
            7,
            1,
            4,
            4,
            3,
            5,
            5
          ],
          [
            7,
            7,
            7,
            7,
            3,
            3,
            5
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            3,
            3,
            4,
            0
          ],
          [
            3,
            3,
            2,
            3,
            1,
            0
          ],
          [
            3,
            0,
            5,
            2,
            1,
            4
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            3,
            3,
            4,
            0
          ],
          [
            3,
            3,
            2,
            3,
            1,
            0
          ],
          [
            3,
            0,
            5,
            2,
            1,
            4
          ],
          [
            3,
            0,
            5,
            2,
            1,
            4
          ],
          [
            3,
            3,
            2,
            3,
            1,
            0
          ],
          [
            0,
            0,
            3,
            3,
            4,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "44f52bb0.py",
      "3de23699.py"
    ],
    "problem_id": 17709
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, color fill\n\n# description:\n# In the input, you will see a grid with a colored object that has some symmetry.\n# To make the output, check if the object is symmetric along the horizontal axis.\n# If it is, fill the opposite side with the same color as the object; otherwise, leave it blank.\n\ndef main(input_grid):\n    # Check if the object is symmetric along the horizontal axis\n    middle_y = len(input_grid) // 2\n    top_half = input_grid[0: middle_y]\n    bottom_half = input_grid[middle_y:][::-1]  # Reverse the bottom half for comparison\n    \n    output_grid = np.zeros_like(input_grid)\n\n    # If the top half is equal to the flipped bottom half, fill the bottom half with the same color\n    if np.array_equal(top_half, bottom_half):\n        output_grid[middle_y:] = top_half  # Fill the bottom half\n    return output_grid\n\ndef generate_input():\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly generate a grid with a symmetric pattern or not\n    has_horizontal_symmetry = np.random.choice([True, False])\n    symmetry_type = \"horizontal\" if has_horizontal_symmetry else \"not_symmetric\"\n    density = np.random.choice([0.4, 0.5, 0.6])\n    grid = random_sprite(n=n, m=m, density=density, symmetry=symmetry_type, color_palette=Color.NOT_BLACK)\n\n    # If the pattern is not symmetric, scatter some black pixels on the grid to make it not symmetric\n    if not has_horizontal_symmetry:\n        # Randomly 40% colored pixels on the grid\n        target_density = 0.4\n        target_number_of_pixels = int(target_density * m * n)\n        for i in range(target_number_of_pixels):\n            x = np.random.randint(0, n)\n            y = np.random.randint(0, m)\n            grid[x, y] = Color.BLACK\n\n    return grid",
    "examples": [
      [
        [
          [
            8,
            7,
            6,
            0,
            0
          ],
          [
            4,
            8,
            6,
            9,
            0
          ],
          [
            6,
            5,
            5,
            5,
            5
          ],
          [
            6,
            5,
            5,
            5,
            5
          ],
          [
            4,
            8,
            6,
            9,
            0
          ],
          [
            8,
            7,
            6,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            7,
            6,
            0,
            0
          ],
          [
            4,
            8,
            6,
            9,
            0
          ],
          [
            6,
            5,
            5,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            6,
            8,
            8
          ],
          [
            5,
            6,
            4,
            3,
            2
          ],
          [
            5,
            6,
            6,
            0,
            2
          ],
          [
            5,
            6,
            6,
            0,
            2
          ],
          [
            5,
            6,
            4,
            3,
            2
          ],
          [
            5,
            5,
            6,
            8,
            8
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            6,
            8,
            8
          ],
          [
            5,
            6,
            4,
            3,
            2
          ],
          [
            5,
            6,
            6,
            0,
            2
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            3,
            5,
            0,
            0
          ],
          [
            9,
            3,
            3,
            3,
            3,
            3
          ],
          [
            0,
            0,
            2,
            7,
            3,
            3
          ],
          [
            0,
            0,
            2,
            7,
            3,
            3
          ],
          [
            9,
            3,
            3,
            3,
            3,
            3
          ],
          [
            9,
            9,
            3,
            5,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            3,
            5,
            0,
            0
          ],
          [
            9,
            3,
            3,
            3,
            3,
            3
          ],
          [
            0,
            0,
            2,
            7,
            3,
            3
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            9,
            9,
            6
          ],
          [
            0,
            0,
            8,
            9,
            6
          ],
          [
            0,
            0,
            7,
            7,
            7
          ],
          [
            0,
            0,
            7,
            7,
            7
          ],
          [
            0,
            0,
            8,
            9,
            6
          ],
          [
            2,
            2,
            9,
            9,
            6
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            9,
            9,
            6
          ],
          [
            0,
            0,
            8,
            9,
            6
          ],
          [
            0,
            0,
            7,
            7,
            7
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "3345333e.py",
      "6fa7a44f.py",
      "8e1813be.py"
    ],
    "problem_id": 18773
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, color mapping\n\n# description:\n# In the input, you will see a 4x4 grid containing colored squares arranged in a specific pattern. \n# The colors are either blue, red, or green, and they are arranged in a way that forms a letter \"T\". \n# The output will be a new 4x4 grid where the colors of the \"T\" shape are rotated 90 degrees clockwise, \n# leaving the background black.\n\ndef main(input_grid):\n    # Create an output grid filled with black\n    output_grid = np.full_like(input_grid, Color.BLACK)\n\n    # Find the coordinates of the colors in the input grid\n    colored_coords = np.argwhere(input_grid != Color.BLACK)\n\n    # Rotate the coordinates by 90 degrees clockwise around the center of the grid\n    for x, y in colored_coords:\n        new_x = y  # New x is the old y\n        new_y = 3 - x  # New y is 3 - old x (for 4x4 grid)\n        output_grid[new_x, new_y] = input_grid[x, y]\n\n    return output_grid\n\ndef generate_input():\n    # Initialize a 4x4 black grid\n    grid = np.full((4, 4), Color.BLACK, dtype=int)\n    \n    # Create the letter \"T\" shape\n    T_shape = [\n        [Color.BLACK, Color.RED, Color.RED, Color.BLACK],\n        [Color.BLACK, Color.RED, Color.RED, Color.BLACK],\n        [Color.BLACK, Color.RED, Color.RED, Color.BLACK],\n        [Color.BLACK, Color.BLUE, Color.BLACK, Color.BLACK]\n    ]\n\n    # Copy the T shape into the grid\n    for i in range(4):\n        for j in range(4):\n            grid[i, j] = T_shape[i][j]\n\n    # Randomly rotate the grid to make the puzzle more interesting\n    if np.random.choice([True, False]):\n        grid = np.rot90(grid, k=np.random.randint(0, 4))\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            1,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            1,
            2,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            2,
            1
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            1,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            1,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            2,
            1
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            1,
            2,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            1,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "8e1813be.py",
      "a8c38be5.py",
      "1caeab9d.py",
      "1fad071e.py"
    ],
    "problem_id": 19372
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry, shape completion\n\n# description:\n# In the input, you will see a pattern that is symmetric along the vertical axis but has some sections missing. \n# To produce the output, fill in the missing sections to complete the symmetry using the existing colors from the pattern.\n\ndef main(input_grid):\n    # Step 1: Create a copy of the input grid to work with.\n    output_grid = input_grid.copy()\n\n    # Step 2: Detect the vertical symmetry points in the input grid.\n    symmetries = detect_mirror_symmetry(input_grid)\n\n    # Step 3: Fill in the missing colors to complete the symmetry.\n    for x, y in np.argwhere(output_grid != Color.BLACK):\n        for symmetry in symmetries:\n            symmetric_x, symmetric_y = symmetry.apply(x, y)\n            if output_grid[symmetric_x, symmetric_y] == Color.BLACK:\n                output_grid[symmetric_x, symmetric_y] = output_grid[x, y]\n\n    return output_grid\n\ndef generate_input():\n    # Step 1: Create a random grid size.\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Step 2: Generate random colors for the pattern, avoiding black.\n    available_colors = list(Color.NOT_BLACK)\n    \n    # Step 3: Create a random pattern with a vertical symmetry.\n    half_width = m // 2\n    left_pattern = random_sprite(n, half_width, density=1, symmetry=\"not_symmetric\", color_palette=available_colors)\n    \n    # Mirror the left pattern to create the right side\n    right_pattern = np.fliplr(left_pattern)\n\n    # Combine the left and the right patterns to form a full grid\n    grid[:, :half_width] = left_pattern\n    grid[:, half_width:] = right_pattern\n\n    # Step 4: Randomly remove some sections to create missing parts.\n    num_missing_sections = np.random.randint(1, n // 2)\n    for _ in range(num_missing_sections):\n        x_start = np.random.randint(0, n)\n        width = np.random.randint(1, half_width // 2)\n        grid[x_start, half_width:half_width+width] = Color.BLACK  # Make part of the right section black (missing)\n\n    return grid",
    "examples": [
      [
        [
          [
            5,
            6,
            7,
            7,
            7,
            7,
            6,
            5
          ],
          [
            3,
            3,
            9,
            8,
            8,
            9,
            3,
            3
          ],
          [
            9,
            6,
            6,
            9,
            0,
            6,
            6,
            9
          ],
          [
            9,
            7,
            7,
            7,
            7,
            7,
            7,
            9
          ],
          [
            8,
            7,
            7,
            3,
            3,
            7,
            7,
            8
          ],
          [
            8,
            4,
            7,
            7,
            7,
            7,
            4,
            8
          ],
          [
            8,
            8,
            8,
            8,
            0,
            8,
            8,
            8
          ],
          [
            7,
            8,
            1,
            1,
            1,
            1,
            8,
            7
          ]
        ],
        [
          [
            5,
            6,
            7,
            7,
            7,
            7,
            6,
            5
          ],
          [
            3,
            3,
            9,
            8,
            8,
            9,
            3,
            3
          ],
          [
            9,
            6,
            6,
            9,
            9,
            6,
            6,
            9
          ],
          [
            9,
            7,
            7,
            7,
            7,
            7,
            7,
            9
          ],
          [
            8,
            7,
            7,
            3,
            3,
            7,
            7,
            8
          ],
          [
            8,
            4,
            7,
            7,
            7,
            7,
            4,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            7,
            8,
            1,
            1,
            1,
            1,
            8,
            7
          ]
        ]
      ],
      [
        [
          [
            5,
            4,
            4,
            8,
            8,
            4,
            4,
            5
          ],
          [
            5,
            5,
            5,
            5,
            0,
            5,
            5,
            5
          ],
          [
            7,
            9,
            9,
            6,
            6,
            9,
            9,
            7
          ],
          [
            3,
            6,
            8,
            6,
            6,
            8,
            6,
            3
          ],
          [
            6,
            6,
            7,
            8,
            8,
            7,
            6,
            6
          ],
          [
            2,
            2,
            2,
            4,
            0,
            2,
            2,
            2
          ]
        ],
        [
          [
            5,
            4,
            4,
            8,
            8,
            4,
            4,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            7,
            9,
            9,
            6,
            6,
            9,
            9,
            7
          ],
          [
            3,
            6,
            8,
            6,
            6,
            8,
            6,
            3
          ],
          [
            6,
            6,
            7,
            8,
            8,
            7,
            6,
            6
          ],
          [
            2,
            2,
            2,
            4,
            4,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            9,
            5,
            8,
            8,
            8,
            8,
            5,
            9
          ],
          [
            9,
            5,
            3,
            8,
            8,
            3,
            5,
            9
          ],
          [
            2,
            5,
            9,
            7,
            7,
            9,
            5,
            2
          ],
          [
            5,
            5,
            5,
            7,
            0,
            5,
            5,
            5
          ],
          [
            2,
            4,
            5,
            4,
            4,
            5,
            4,
            2
          ],
          [
            1,
            6,
            4,
            7,
            7,
            4,
            6,
            1
          ],
          [
            5,
            7,
            7,
            7,
            0,
            7,
            7,
            5
          ],
          [
            5,
            5,
            7,
            7,
            7,
            7,
            5,
            5
          ]
        ],
        [
          [
            9,
            5,
            8,
            8,
            8,
            8,
            5,
            9
          ],
          [
            9,
            5,
            3,
            8,
            8,
            3,
            5,
            9
          ],
          [
            2,
            5,
            9,
            7,
            7,
            9,
            5,
            2
          ],
          [
            5,
            5,
            5,
            7,
            7,
            5,
            5,
            5
          ],
          [
            2,
            4,
            5,
            4,
            4,
            5,
            4,
            2
          ],
          [
            1,
            6,
            4,
            7,
            7,
            4,
            6,
            1
          ],
          [
            5,
            7,
            7,
            7,
            7,
            7,
            7,
            5
          ],
          [
            5,
            5,
            7,
            7,
            7,
            7,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            7,
            1,
            4,
            4,
            0,
            4,
            1,
            7
          ],
          [
            7,
            7,
            1,
            1,
            1,
            1,
            7,
            7
          ],
          [
            3,
            6,
            3,
            5,
            5,
            3,
            6,
            3
          ],
          [
            3,
            6,
            7,
            8,
            8,
            7,
            6,
            3
          ],
          [
            6,
            6,
            8,
            8,
            8,
            8,
            6,
            6
          ],
          [
            6,
            7,
            4,
            5,
            5,
            4,
            7,
            6
          ],
          [
            6,
            4,
            4,
            5,
            5,
            4,
            4,
            6
          ]
        ],
        [
          [
            7,
            1,
            4,
            4,
            4,
            4,
            1,
            7
          ],
          [
            7,
            7,
            1,
            1,
            1,
            1,
            7,
            7
          ],
          [
            3,
            6,
            3,
            5,
            5,
            3,
            6,
            3
          ],
          [
            3,
            6,
            7,
            8,
            8,
            7,
            6,
            3
          ],
          [
            6,
            6,
            8,
            8,
            8,
            8,
            6,
            6
          ],
          [
            6,
            7,
            4,
            5,
            5,
            4,
            7,
            6
          ],
          [
            6,
            4,
            4,
            5,
            5,
            4,
            4,
            6
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "f9012d9b.py",
      "8e1813be.py",
      "3345333e.py"
    ],
    "problem_id": 19869
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotational symmetry detection, color replacement\n\n# description:\n# In the input, you will see a grid with a repeating pattern that is rotationally symmetric. \n# To make the output, detect the symmetric pattern and replace every occurrence of that color in the grid \n# with a new color of your choice.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Detect the color of the central symmetric pattern\n    center_color = input_grid[1, 1]  # Assume the center of the symmetry is at (1, 1) in a 3x3 grid\n\n    # Check if the grid has rotational symmetry\n    is_symmetric = np.array_equal(input_grid, np.rot90(input_grid))  # Check 90-degree rotational symmetry\n\n    # Create the output grid\n    output_grid = np.copy(input_grid)\n\n    # If symmetric, replace the center color with a new color, say Color.GREEN\n    if is_symmetric:\n        output_grid[output_grid == center_color] = Color.GREEN\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a 3x3 grid with a rotationally symmetric pattern\n    # Randomly choose a color for the pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Generate a base pattern with rotational symmetry\n    grid = np.array([[color, Color.BLACK, color],\n                     [Color.BLACK, color, Color.BLACK],\n                     [color, Color.BLACK, color]])\n\n    # Create a larger grid with some random background\n    larger_grid_size = np.random.randint(5, 8)\n    larger_grid = np.full((larger_grid_size, larger_grid_size), Color.BLACK)\n\n    # Randomly place the pattern in the larger grid\n    start_x = np.random.randint(0, larger_grid_size - 3)\n    start_y = np.random.randint(0, larger_grid_size - 3)\n    larger_grid[start_x:start_x + 3, start_y:start_y + 3] = grid\n\n    return larger_grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            0,
            5,
            0
          ],
          [
            0,
            0,
            5,
            0,
            0
          ],
          [
            0,
            5,
            0,
            5,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            3,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0
          ],
          [
            0,
            3,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            0,
            8,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            8,
            0,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            3,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0
          ],
          [
            0,
            3,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            6,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0
          ],
          [
            0,
            6,
            0,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            3,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0
          ],
          [
            0,
            3,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            0,
            2,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            2,
            0,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            3,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0
          ],
          [
            0,
            3,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "3de23699.py",
      "bc1d5164.py",
      "44f52bb0.py"
    ],
    "problem_id": 20004
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# object transformation, reflection\n\n# description:\n# In the input, you will see a multi-colored shape that is irregularly placed on a black canvas. To produce the output, reflect the shape vertically and place it beside the original shape on the canvas, maintaining its original color palette.\n\ndef main(input_grid):\n    # Step 1: Extract the connected components (the main shape)\n    components = find_connected_components(input_grid, background=Color.BLACK, monochromatic=False)\n\n    # We assume there's only one main shape in this puzzle, so we take the first component\n    original_shape = components[0]\n\n    # Step 2: Reflect the shape vertically\n    reflected_shape = np.flipud(original_shape)\n\n    # Step 3: Create the output grid, initializing it with the background color\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Step 4: Blit the original shape and the reflected shape next to each other\n    blit_object(output_grid, original_shape, background=Color.BLACK)\n    blit_sprite(output_grid, reflected_shape, x=0, y=original_shape.shape[0])\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random sprite of size at least 1x1 and at most 5x5\n    height, width = np.random.randint(1, 6), np.random.randint(1, 6)\n    original_sprite = random_sprite(height, width, density=1, symmetry=\"not_symmetric\", color_palette=Color.NOT_BLACK)\n\n    # Create a black grid large enough to fit the original shape and its reflection\n    output_height = height * 2  # We need space for both the original and reflected shape\n    output_width = width\n\n    grid = np.full((output_height, output_width), Color.BLACK)\n\n    # Place the original sprite at the top\n    blit_sprite(grid, original_sprite, x=0, y=0)\n\n    return grid",
    "examples": [
      [
        [
          [
            5,
            5,
            5
          ],
          [
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            5
          ],
          [
            0,
            0,
            5
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1
          ],
          [
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            1
          ],
          [
            0,
            0,
            1
          ]
        ]
      ],
      [
        [
          [
            3,
            3,
            3,
            4,
            4
          ],
          [
            7,
            7,
            7,
            4,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            3,
            4,
            4
          ],
          [
            7,
            7,
            7,
            4,
            2
          ],
          [
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            3
          ]
        ]
      ],
      [
        [
          [
            6,
            6,
            9,
            7,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            9,
            7,
            7
          ],
          [
            0,
            0,
            6,
            6,
            9
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "0e206a2e.py",
      "1f642eb9.py",
      "1caeab9d.py"
    ],
    "problem_id": 20126
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# vertical alignment, color stacking\n\n# description:\n# In the input, you will see a vertical column of colored pixels on a black background, terminated by a yellow pixel at the bottom. \n# To create the output, copy the colors from the column above the yellow pixel and stack them horizontally in a single row.\n# The order of the colors should be maintained from top to bottom.\n\ndef main(input_grid):\n    # Create output grid\n    output_grid = np.full((1, input_grid.shape[1]), fill_value=Color.BLACK)\n\n    # Find the index of the yellow pixel (which marks the end of the stack)\n    yellow_pixel_index = np.where(input_grid[:, 0] == Color.YELLOW)[0][0]\n\n    # Extract colors above the yellow pixel\n    colors = input_grid[:yellow_pixel_index, 0]\n\n    # Fill the output grid with the extracted colors\n    for i, color in enumerate(colors):\n        output_grid[0, i] = color\n\n    return output_grid\n\ndef generate_input():\n    # Plan:\n    # 1. Randomly determine the height of the column and the number of colored pixels (must be at least 2)\n    # 2. Randomly select colors for the pixels, ensuring that the last pixel is yellow.\n    # 3. Fill a grid with these colors in a single column.\n\n    height = np.random.randint(3, 10)  # At least 2 colored pixels + 1 yellow pixel\n    column_colors = np.random.choice(Color.NOT_BLACK, size=height - 1, replace=True)  # Colors excluding black\n    column_colors = np.append(column_colors, Color.YELLOW)  # Add yellow at the bottom\n\n    # Create a grid with a single column\n    input_grid = np.full((height, 1), fill_value=Color.BLACK)  # Initialize with black background\n    for i in range(height):\n        input_grid[i, 0] = column_colors[i]\n\n    return input_grid",
    "examples": [
      [
        [
          [
            3
          ],
          [
            4
          ],
          [
            4
          ]
        ],
        [
          [
            3
          ]
        ]
      ],
      [
        [
          [
            2
          ],
          [
            4
          ],
          [
            5
          ],
          [
            4
          ]
        ],
        [
          [
            2
          ]
        ]
      ],
      [
        [
          [
            1
          ],
          [
            4
          ],
          [
            8
          ],
          [
            4
          ]
        ],
        [
          [
            1
          ]
        ]
      ],
      [
        [
          [
            9
          ],
          [
            4
          ],
          [
            1
          ],
          [
            3
          ],
          [
            5
          ],
          [
            7
          ],
          [
            2
          ],
          [
            4
          ]
        ],
        [
          [
            9
          ]
        ]
      ]
    ],
    "seeds": [
      "2c608aff.py",
      "8e1813be.py",
      "bd4472b8.py",
      "623ea044.py"
    ],
    "problem_id": 20571
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color pattern extraction, grid segmentation, frequency counting\n\n# description:\n# In the input, you will see a grid that is divided into smaller rectangular segments, each containing a colored pattern. \n# To create the output, identify the most common color in each segment and fill each segment with that color. \n# If a segment is empty (all black), color it grey.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Get the shape of the input grid\n    n, m = input_grid.shape\n\n    # Prepare the output grid\n    output_grid = np.zeros((n, m), dtype=int)\n\n    # Segment size (assuming segments are 2x2)\n    segment_size = 2\n\n    # Iterate over the grid in segments\n    for i in range(0, n, segment_size):\n        for j in range(0, m, segment_size):\n            # Extract the current segment\n            segment = input_grid[i:i+segment_size, j:j+segment_size]\n            # Flatten the segment to count colors\n            colors, counts = np.unique(segment, return_counts=True)\n\n            # Determine the most common color\n            # If the segment is all black (no colors), fill it with grey\n            if Color.BLACK in colors and len(colors) == 1:\n                output_grid[i:i+segment_size, j:j+segment_size] = Color.GREY\n            else:\n                most_common_color = colors[np.argmax(counts)]\n                output_grid[i:i+segment_size, j:j+segment_size] = most_common_color\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly generate the size of the grid\n    n, m = np.random.randint(4, 12, size=2)\n\n    # Create a grid filled with black color initially\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly fill segments of the grid with colors\n    segment_size = 2  # we are working with 2x2 segments\n    for i in range(0, n, segment_size):\n        for j in range(0, m, segment_size):\n            # Randomly decide if this segment should be colored\n            if np.random.rand() < 0.7:  # 70% chance to add a color\n                # Generate a random sprite for the segment\n                color = np.random.choice(Color.NOT_BLACK)\n                sprite = random_sprite(segment_size, segment_size, density=1, color_palette=[color])\n                grid[i:i+segment_size, j:j+segment_size] = sprite\n\n    return grid",
    "examples": [
      [
        [
          [
            5,
            5,
            0,
            0,
            4,
            4
          ],
          [
            5,
            5,
            0,
            0,
            4,
            4
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            4,
            4
          ],
          [
            5,
            5,
            5,
            5,
            4,
            4
          ],
          [
            5,
            5,
            6,
            6,
            5,
            5
          ],
          [
            5,
            5,
            6,
            6,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            5,
            5,
            7,
            7
          ],
          [
            0,
            0,
            5,
            5,
            7,
            7
          ],
          [
            6,
            6,
            9,
            9,
            0,
            0
          ],
          [
            6,
            6,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            9,
            9
          ],
          [
            0,
            0,
            5,
            5,
            9,
            9
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            7,
            7
          ],
          [
            5,
            5,
            5,
            5,
            7,
            7
          ],
          [
            6,
            6,
            9,
            9,
            5,
            5
          ],
          [
            6,
            6,
            9,
            9,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            9,
            9
          ],
          [
            5,
            5,
            5,
            5,
            9,
            9
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            2,
            2,
            8,
            8
          ],
          [
            0,
            0,
            2,
            2,
            8,
            8
          ],
          [
            0,
            0,
            6,
            6,
            7,
            7
          ],
          [
            0,
            0,
            6,
            6,
            7,
            7
          ],
          [
            0,
            0,
            5,
            5,
            1,
            1
          ],
          [
            0,
            0,
            5,
            5,
            1,
            1
          ]
        ],
        [
          [
            5,
            5,
            2,
            2,
            8,
            8
          ],
          [
            5,
            5,
            2,
            2,
            8,
            8
          ],
          [
            5,
            5,
            6,
            6,
            7,
            7
          ],
          [
            5,
            5,
            6,
            6,
            7,
            7
          ],
          [
            5,
            5,
            5,
            5,
            1,
            1
          ],
          [
            5,
            5,
            5,
            5,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            8,
            8,
            4,
            4,
            0,
            0,
            6,
            6
          ],
          [
            8,
            8,
            4,
            4,
            0,
            0,
            6,
            6
          ],
          [
            7,
            7,
            5,
            5,
            9,
            9,
            0,
            0
          ],
          [
            7,
            7,
            5,
            5,
            9,
            9,
            0,
            0
          ],
          [
            2,
            2,
            8,
            8,
            2,
            2,
            1,
            1
          ],
          [
            2,
            2,
            8,
            8,
            2,
            2,
            1,
            1
          ],
          [
            2,
            2,
            5,
            5,
            8,
            8,
            0,
            0
          ],
          [
            2,
            2,
            5,
            5,
            8,
            8,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            4,
            4,
            5,
            5,
            6,
            6
          ],
          [
            8,
            8,
            4,
            4,
            5,
            5,
            6,
            6
          ],
          [
            7,
            7,
            5,
            5,
            9,
            9,
            5,
            5
          ],
          [
            7,
            7,
            5,
            5,
            9,
            9,
            5,
            5
          ],
          [
            2,
            2,
            8,
            8,
            2,
            2,
            1,
            1
          ],
          [
            2,
            2,
            8,
            8,
            2,
            2,
            1,
            1
          ],
          [
            2,
            2,
            5,
            5,
            8,
            8,
            5,
            5
          ],
          [
            2,
            2,
            5,
            5,
            8,
            8,
            5,
            5
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "25d8a9c8.py",
      "bc1d5164.py",
      "f8b3ba0a.py"
    ],
    "problem_id": 20652
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# radial symmetry, pattern replication\n\n# description:\n# In the input, you will see a pattern that exhibits radial symmetry around a central point.\n# To generate the output, replicate the pattern in all four quadrants of the grid,\n# maintaining the same distance from the center. The output should display a fully symmetrical arrangement based on the original pattern.\n\ndef main(input_grid):\n    # Find the central point of the grid\n    center_x, center_y = input_grid.shape[0] // 2, input_grid.shape[1] // 2\n    \n    # Create an output grid that is the same size as the input grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Extract the pattern from the input grid\n    objects = find_connected_components(input_grid, background=Color.BLACK)\n    \n    # Assuming there's only one pattern that is radially symmetric\n    if len(objects) == 0:\n        return output_grid\n    \n    pattern = objects[0]\n    \n    # Get the bounding box of the pattern\n    x, y, width, height = bounding_box(pattern)\n    \n    # Get the sprite of the pattern\n    sprite = crop(pattern)\n\n    # Blit the sprite in all four quadrants\n    blit_sprite(output_grid, sprite, x=center_x - (width // 2), y=center_y - (height // 2), background=Color.BLACK)  # Top-Left\n    blit_sprite(output_grid, sprite, x=center_x - (width // 2), y=center_y + (height // 2), background=Color.BLACK)  # Bottom-Left\n    blit_sprite(output_grid, sprite, x=center_x + (width // 2), y=center_y - (height // 2), background=Color.BLACK)  # Top-Right\n    blit_sprite(output_grid, sprite, x=center_x + (width // 2), y=center_y + (height // 2), background=Color.BLACK)  # Bottom-Right\n    \n    return output_grid\n\ndef generate_input():\n    # Create a random size for the grid\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Create a central pattern with radial symmetry\n    center_x, center_y = n // 2, m // 2\n\n    # Choose a color for the pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create a small pattern around the center\n    pattern_size = np.random.randint(1, min(center_x, center_y) // 2)\n    \n    # Draw the pattern in a radial manner\n    for i in range(-pattern_size, pattern_size + 1):\n        for j in range(-pattern_size, pattern_size + 1):\n            if abs(i) + abs(j) <= pattern_size:  # Manhattan distance condition for radial symmetry\n                grid[center_x + i, center_y + j] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            6,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            6,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            6,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            4,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            8,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            8,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            8,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "44f52bb0.py",
      "3de23699.py"
    ],
    "problem_id": 20931
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry, reflection\n\n# description:\n# In the input, you will see a grid with a pattern that is partially symmetric. \n# To produce the output, reflect the non-symmetric part over the axis of symmetry, \n# completing the pattern and ensuring it is fully symmetric.\n\ndef main(input_grid):\n    # Find the height and width of the input grid\n    height, width = input_grid.shape\n\n    # Determine the symmetry axis (for this case, we'll assume vertical symmetry)\n    mid_col = width // 2\n\n    # Create an output grid initialized to black\n    output_grid = np.full((height, width), Color.BLACK)\n\n    # Copy the existing pattern to the output grid\n    output_grid[:, :mid_col] = input_grid[:, :mid_col]\n\n    # Reflect the left side to the right side\n    output_grid[:, mid_col:] = output_grid[:, :mid_col][:, ::-1]\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random grid size\n    n = np.random.randint(4, 8)\n    m = np.random.randint(4, 8)\n\n    # Create a random sprite with a density of 0.5 and allow for some non-symmetry\n    grid = random_sprite(n, m, density=0.5, symmetry=\"not_symmetric\", color_palette=Color.NOT_BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            5,
            5
          ],
          [
            9,
            9,
            9,
            9,
            4,
            0
          ],
          [
            9,
            4,
            7,
            9,
            9,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            4,
            7,
            7,
            4,
            9
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            9,
            8,
            0,
            0,
            0
          ],
          [
            4,
            4,
            8,
            9,
            0,
            0
          ],
          [
            4,
            4,
            8,
            4,
            3,
            3
          ],
          [
            9,
            0,
            8,
            8,
            0,
            3
          ],
          [
            0,
            0,
            3,
            3,
            3,
            3
          ],
          [
            0,
            0,
            0,
            3,
            3,
            0
          ]
        ],
        [
          [
            5,
            9,
            8,
            8,
            9,
            5
          ],
          [
            4,
            4,
            8,
            8,
            4,
            4
          ],
          [
            4,
            4,
            8,
            8,
            4,
            4
          ],
          [
            9,
            0,
            8,
            8,
            0,
            9
          ],
          [
            0,
            0,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            0,
            2,
            2,
            2,
            2,
            2
          ],
          [
            6,
            6,
            2,
            0,
            0,
            7
          ],
          [
            2,
            0,
            5,
            0,
            0,
            0
          ],
          [
            4,
            0,
            7,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            2,
            0
          ],
          [
            6,
            6,
            2,
            2,
            6,
            6
          ],
          [
            2,
            0,
            5,
            5,
            0,
            2
          ],
          [
            4,
            0,
            7,
            7,
            0,
            4
          ]
        ]
      ],
      [
        [
          [
            0,
            1,
            7,
            9,
            0,
            0
          ],
          [
            0,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            4,
            0,
            9,
            0,
            0
          ],
          [
            1,
            4,
            1,
            3,
            4,
            0
          ],
          [
            3,
            6,
            2,
            6,
            6,
            0
          ],
          [
            5,
            6,
            5,
            7,
            9,
            4
          ]
        ],
        [
          [
            0,
            1,
            7,
            7,
            1,
            0
          ],
          [
            0,
            1,
            1,
            1,
            1,
            0
          ],
          [
            0,
            4,
            0,
            0,
            4,
            0
          ],
          [
            1,
            4,
            1,
            1,
            4,
            1
          ],
          [
            3,
            6,
            2,
            2,
            6,
            3
          ],
          [
            5,
            6,
            5,
            5,
            6,
            5
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "44f52bb0.py",
      "f9012d9b.py",
      "bc1d5164.py"
    ],
    "problem_id": 21333
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, color transformation\n\n# description:\n# In the input, you will see a grid with a colorful square pattern in the center and a single black pixel at one of the corners.\n# To make the output, rotate the colorful square pattern 90 degrees clockwise around the black pixel,\n# and fill the surrounding area with the background color.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the location of the black pixel\n    black_pixel_location = np.argwhere(input_grid == Color.BLACK)\n    assert len(black_pixel_location) == 1, \"There should be exactly one black pixel.\"\n    black_x, black_y = black_pixel_location[0]\n\n    # Determine the bounding box of the colorful square pattern\n    pattern = np.copy(input_grid)\n    pattern[black_x, black_y] = Color.BLACK  # Exclude the black pixel from the pattern\n    \n    # Get the bounding box coordinates\n    objects = find_connected_components(pattern, background=Color.BLACK)\n    assert len(objects) == 1, \"There should be one connected component of colors.\"\n    bounding_box_coords = bounding_box(objects[0])\n\n    # Extract the colorful pattern\n    pattern_crop = pattern[bounding_box_coords[1]:bounding_box_coords[1] + bounding_box_coords[3],\n                           bounding_box_coords[0]:bounding_box_coords[0] + bounding_box_coords[2]]\n    \n    # Rotate the pattern 90 degrees clockwise around the black pixel\n    rotated_pattern = np.rot90(pattern_crop, k=-1)\n\n    # Create an output grid filled with the background color\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Calculate the position for the rotated pattern\n    pattern_center_x = black_x - (rotated_pattern.shape[0] // 2)\n    pattern_center_y = black_y - (rotated_pattern.shape[1] // 2)\n\n    # Place the rotated pattern in the output grid\n    blit_sprite(output_grid, rotated_pattern, x=pattern_center_x, y=pattern_center_y, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a grid with a random background color (not black)\n    background_color = np.random.choice(Color.NOT_BLACK)\n    width, height = np.random.randint(5, 10, size=2)\n    input_grid = np.full((width, height), background_color, dtype=int)\n\n    # Create a colorful square pattern in the center\n    pattern_size = np.random.randint(2, min(width, height) // 2)  # Ensure the pattern fits\n    pattern_color = np.random.choice(Color.NOT_BLACK)\n\n    # Center the pattern in the grid\n    start_x = (width - pattern_size) // 2\n    start_y = (height - pattern_size) // 2\n    input_grid[start_x:start_x + pattern_size, start_y:start_y + pattern_size] = pattern_color\n\n    # Place a black pixel in one of the corners\n    corner_choice = np.random.choice(['top_left', 'top_right', 'bottom_left', 'bottom_right'])\n    if corner_choice == 'top_left':\n        input_grid[0, 0] = Color.BLACK\n    elif corner_choice == 'top_right':\n        input_grid[0, -1] = Color.BLACK\n    elif corner_choice == 'bottom_left':\n        input_grid[-1, 0] = Color.BLACK\n    elif corner_choice == 'bottom_right':\n        input_grid[-1, -1] = Color.BLACK\n\n    return input_grid",
    "examples": [
      [
        [
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            0,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "3de23699.py",
      "ea786f4a.py"
    ],
    "problem_id": 22292
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pixel shifting, pattern alignment, color matching\n\n# description:\n# In the input, you will see a grid with various colored patterns. Each pattern is a distinct shape made up of connected pixels of the same color.\n# To make the output, shift each pattern horizontally until their leftmost pixels align, maintaining their vertical positions. If a pattern is already aligned, it remains in place.\n\ndef main(input_grid):\n    # Find all connected components in the input grid\n    objects = find_connected_components(input_grid, monochromatic=False, connectivity=8)\n\n    # Initialize the output grid\n    output_height = input_grid.shape[0]\n    max_width = max(bounding_box(obj)[2] for obj in objects)  # Get the maximum width of the patterns\n    output_grid = np.full((output_height, max_width), Color.BLACK)\n\n    # For each object, find its bounding box and shift it to the leftmost position\n    for obj in objects:\n        # Get the bounding box of the object\n        x, y, width, height = bounding_box(obj)\n        # Crop the sprite for the object to be placed\n        sprite = crop(obj, background=Color.BLACK)\n\n        # Calculate the new x position for the object to align it to the leftmost position\n        new_x = 0  # Align to the leftmost position\n        output_grid[y:y+height, new_x:new_x+width] = sprite\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly select a number of patterns\n    num_patterns = np.random.randint(2, 5)\n\n    for _ in range(num_patterns):\n        # Generate a random pattern size\n        pattern_height = np.random.randint(1, 3)\n        pattern_width = np.random.randint(1, 3)\n\n        # Select a random color for the pattern\n        color = np.random.choice(list(Color.NOT_BLACK))\n\n        # Randomly choose a starting position in the grid\n        start_x = np.random.randint(0, n - pattern_height + 1)\n        start_y = np.random.randint(0, m - pattern_width + 1)\n\n        # Draw the pattern in the grid\n        for i in range(pattern_height):\n            for j in range(pattern_width):\n                grid[start_x + i, start_y + j] = color\n\n    # Ensure at least some patterns are created\n    if np.all(grid == Color.BLACK):\n        return generate_input()\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0,
            0,
            0,
            0,
            1,
            0
          ]
        ],
        [
          [
            0,
            0
          ],
          [
            2,
            2
          ],
          [
            2,
            2
          ],
          [
            0,
            0
          ],
          [
            0,
            0
          ],
          [
            0,
            0
          ],
          [
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            8,
            8,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            8,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0
          ],
          [
            8,
            8
          ],
          [
            8,
            8
          ],
          [
            5,
            5
          ],
          [
            5,
            5
          ],
          [
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0,
            0
          ],
          [
            9,
            9,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            1,
            0
          ],
          [
            0,
            0,
            1,
            0
          ],
          [
            0,
            0,
            8,
            8
          ],
          [
            9,
            9,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0,
            0
          ],
          [
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2
          ]
        ],
        [
          [
            1,
            1
          ],
          [
            6,
            0
          ],
          [
            0,
            0
          ],
          [
            0,
            0
          ],
          [
            2,
            0
          ],
          [
            0,
            0
          ],
          [
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "1e32b0e9.py",
      "8e1813be.py",
      "6fa7a44f.py"
    ],
    "problem_id": 22368
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pixel manipulation, color transformation\n\n# description:\n# In the input, you will see a grid with two special pixels: a yellow pixel and a teal pixel positioned in separate corners.\n# To create the output grid, draw two lines: \n# 1. A horizontal line of green pixels across the row of the yellow pixel,\n# 2. A vertical line of orange pixels along the column of the teal pixel.\n# The intersection of these two lines should be marked with a red pixel.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Copy the input grid to the output grid\n    output_grid = np.copy(input_grid)\n\n    # Get the position of the yellow pixel\n    yellow_pixel = np.where(input_grid == Color.YELLOW)\n    yellow_x, yellow_y = yellow_pixel[0][0], yellow_pixel[1][0]\n\n    # Get the position of the teal pixel\n    teal_pixel = np.where(input_grid == Color.TEAL)\n    teal_x, teal_y = teal_pixel[0][0], teal_pixel[1][0]\n\n    # Draw a horizontal green line at the row of the yellow pixel\n    output_grid[yellow_x, :] = Color.GREEN\n\n    # Draw a vertical orange line at the column of the teal pixel\n    output_grid[:, teal_y] = Color.ORANGE\n\n    # Mark the intersection with a red pixel\n    output_grid[yellow_x, teal_y] = Color.RED\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a 9x9 black grid for the background\n    n = m = 9\n    grid = np.zeros((n, m), dtype=int)\n\n    # Place a yellow pixel at a random corner\n    corner_choices = [(0, 0), (0, m - 1), (n - 1, 0), (n - 1, m - 1)]\n    yellow_x, yellow_y = corner_choices[np.random.randint(0, 4)]\n    grid[yellow_x, yellow_y] = Color.YELLOW\n\n    # Place a teal pixel in the opposite corner\n    opposite_corner = [(n - 1, m - 1), (n - 1, 0), (0, m - 1), (0, 0)]\n    grid[opposite_corner[corner_choices.index((yellow_x, yellow_y))]] = Color.TEAL\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            2,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            8
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            2
          ]
        ]
      ],
      [
        [
          [
            4,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            8
          ]
        ],
        [
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ]
        ]
      ],
      [
        [
          [
            8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4
          ]
        ],
        [
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "0ca9ddb6.py",
      "23581191.py",
      "8d510a79.py"
    ],
    "problem_id": 22874
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# layering, transparency, color blending\n\n# description:\n# In the input, you will see multiple layers of colored squares stacked on top of each other with varying levels of transparency. \n# Each square has a specific color and a transparency level associated with it. \n# To make the output, determine the visible color at each pixel based on the stacking order and transparency of the layers. \n# The output should represent the composite image that results from blending these transparent colors.\n\ndef main(input_grid):\n    # Create an output grid initialized to black\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Extract the colors and their transparency from the input grid\n    layers = find_connected_components(input_grid, monochromatic=False)\n    \n    for layer in layers:\n        # Get the color of the layer\n        color = layer[0, 0]\n        # Get the transparency of the layer; for simplicity, assume transparency is defined by the color's intensity (0-10)\n        transparency = (color != Color.BLACK)\n        \n        # Blend the color into the output grid based on its transparency level\n        for x in range(input_grid.shape[0]):\n            for y in range(input_grid.shape[1]):\n                if layer[x, y] != Color.BLACK:  # Check if there is a color at this pixel\n                    # If the output pixel is black, just take the color\n                    if output_grid[x, y] == Color.BLACK:\n                        output_grid[x, y] = color\n                    else:\n                        # Blend the color based on the transparency level (here, we use a simple blend)\n                        output_grid[x, y] = blend_colors(output_grid[x, y], color, transparency)\n    \n    return output_grid\n\ndef blend_colors(base_color, overlay_color, transparency):\n    # A simple blending function which assumes transparency is a binary factor (1 for opaque, 0 for transparent)\n    if transparency:\n        return overlay_color  # If the overlay is opaque, take the overlay color\n    return base_color  # Otherwise, keep the base color\n\ndef generate_input():\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    num_layers = np.random.randint(3, 6)\n    colors = np.random.choice(list(Color.NOT_BLACK), num_layers, replace=False)\n\n    for i in range(num_layers):\n        # Random position for each layer\n        x, y = np.random.randint(0, n), np.random.randint(0, m)\n        grid[x, y] = colors[i]  # Place the color\n        # Add transparency (simulated by treating colors as non-black for now)\n    \n    return grid",
    "examples": [
      [
        [
          [
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            0
          ],
          [
            0,
            0,
            0,
            0,
            3
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0
          ],
          [
            0,
            5,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            0,
            0,
            0,
            6
          ],
          [
            0,
            0,
            7,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            0,
            0,
            0,
            0
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            3,
            0,
            9,
            0
          ],
          [
            0,
            0,
            5,
            0,
            0
          ],
          [
            0,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "0e206a2e.py",
      "aabf363d.py",
      "8e1813be.py",
      "2c608aff.py"
    ],
    "problem_id": 23136
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color mapping, pattern recognition, grid transformation\n\n# description:\n# In the input, you will see a 5x5 grid filled with various colors. \n# To create the output, you need to identify patterns of colors, where each unique color pattern corresponds to a distinct output color.\n# The mapping is as follows:\n# - Pattern A (all red) -> blue\n# - Pattern B (checkerboard of red and green) -> yellow\n# - Pattern C (diagonal red and teal) -> pink\n# - Pattern D (solid green) -> orange\n# The output grid should reflect these transformations based on the patterns identified.\n\ndef main(input_grid):\n    # Define color patterns\n    pattern_A = np.array([[Color.RED, Color.RED, Color.RED, Color.RED, Color.RED],\n                          [Color.RED, Color.RED, Color.RED, Color.RED, Color.RED],\n                          [Color.RED, Color.RED, Color.RED, Color.RED, Color.RED],\n                          [Color.RED, Color.RED, Color.RED, Color.RED, Color.RED],\n                          [Color.RED, Color.RED, Color.RED, Color.RED, Color.RED]])\n\n    pattern_B = np.array([[Color.RED, Color.GREEN, Color.RED, Color.GREEN, Color.RED],\n                          [Color.GREEN, Color.RED, Color.GREEN, Color.RED, Color.GREEN],\n                          [Color.RED, Color.GREEN, Color.RED, Color.GREEN, Color.RED],\n                          [Color.GREEN, Color.RED, Color.GREEN, Color.RED, Color.GREEN],\n                          [Color.RED, Color.GREEN, Color.RED, Color.GREEN, Color.RED]])\n\n    pattern_C = np.array([[Color.RED, Color.BLACK, Color.BLACK, Color.BLACK, Color.TEAL],\n                          [Color.BLACK, Color.RED, Color.BLACK, Color.TEAL, Color.BLACK],\n                          [Color.BLACK, Color.BLACK, Color.RED, Color.BLACK, Color.BLACK],\n                          [Color.BLACK, Color.TEAL, Color.BLACK, Color.RED, Color.BLACK],\n                          [Color.TEAL, Color.BLACK, Color.BLACK, Color.BLACK, Color.RED]])\n\n    pattern_D = np.array([[Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN],\n                          [Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN],\n                          [Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN],\n                          [Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN],\n                          [Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN]])\n\n    # Create the output grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Check for each pattern and fill in the output grid accordingly\n    if np.array_equal(input_grid, pattern_A):\n        output_grid = np.full_like(input_grid, Color.BLUE)\n    elif np.array_equal(input_grid, pattern_B):\n        output_grid = np.full_like(input_grid, Color.YELLOW)\n    elif np.array_equal(input_grid, pattern_C):\n        output_grid = np.full_like(input_grid, Color.PINK)\n    elif np.array_equal(input_grid, pattern_D):\n        output_grid = np.full_like(input_grid, Color.ORANGE)\n    else:\n        raise ValueError(\"Input grid does not match any known patterns.\")\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random 5x5 grid with predefined patterns.\n    patterns = [np.array([[Color.RED, Color.RED, Color.RED, Color.RED, Color.RED],\n                          [Color.RED, Color.RED, Color.RED, Color.RED, Color.RED],\n                          [Color.RED, Color.RED, Color.RED, Color.RED, Color.RED],\n                          [Color.RED, Color.RED, Color.RED, Color.RED, Color.RED],\n                          [Color.RED, Color.RED, Color.RED, Color.RED, Color.RED]]),\n                np.array([[Color.RED, Color.GREEN, Color.RED, Color.GREEN, Color.RED],\n                          [Color.GREEN, Color.RED, Color.GREEN, Color.RED, Color.GREEN],\n                          [Color.RED, Color.GREEN, Color.RED, Color.GREEN, Color.RED],\n                          [Color.GREEN, Color.RED, Color.GREEN, Color.RED, Color.GREEN],\n                          [Color.RED, Color.GREEN, Color.RED, Color.GREEN, Color.RED]]),\n                np.array([[Color.RED, Color.BLACK, Color.BLACK, Color.BLACK, Color.TEAL],\n                          [Color.BLACK, Color.RED, Color.BLACK, Color.TEAL, Color.BLACK],\n                          [Color.BLACK, Color.BLACK, Color.RED, Color.BLACK, Color.BLACK],\n                          [Color.BLACK, Color.TEAL, Color.BLACK, Color.RED, Color.BLACK],\n                          [Color.TEAL, Color.BLACK, Color.BLACK, Color.BLACK, Color.RED]]),\n                np.array([[Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN],\n                          [Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN],\n                          [Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN],\n                          [Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN],\n                          [Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN]])]\n\n    # Randomly select one of the patterns to return as input\n    return patterns[np.random.randint(len(patterns))]",
    "examples": [
      [
        [
          [
            2,
            3,
            2,
            3,
            2
          ],
          [
            3,
            2,
            3,
            2,
            3
          ],
          [
            2,
            3,
            2,
            3,
            2
          ],
          [
            3,
            2,
            3,
            2,
            3
          ],
          [
            2,
            3,
            2,
            3,
            2
          ]
        ],
        [
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ]
        ]
      ],
      [
        [
          [
            2,
            0,
            0,
            0,
            8
          ],
          [
            0,
            2,
            0,
            8,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            8,
            0,
            2,
            0
          ],
          [
            8,
            0,
            0,
            0,
            2
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3
          ]
        ],
        [
          [
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7
          ]
        ]
      ]
    ],
    "seeds": [
      "0d3d703e.py",
      "995c5fa3.py",
      "6cdd2623.py",
      "941d9a10.py"
    ],
    "problem_id": 24203
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color rotation, pattern matching\n\n# description:\n# In the input, you will see a grid containing a central square of color pixels surrounded by a border of a different color.\n# To create the output, rotate the colors of the central square clockwise by 90 degrees while keeping the border color intact.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Extract the central pattern and border colors\n    central_pattern = crop(input_grid)\n    \n    # Get the dimensions of the central pattern\n    n, m = central_pattern.shape\n\n    # Create an empty output grid of the same size as the input grid\n    output_grid = np.copy(input_grid)\n\n    # Rotate the central pattern clockwise by 90 degrees\n    rotated_pattern = np.rot90(central_pattern, k=-1)\n\n    # Place the rotated pattern back into the output grid, ensuring to preserve the border\n    start_x = (output_grid.shape[0] - n) // 2\n    start_y = (output_grid.shape[1] - m) // 2\n    output_grid[start_x:start_x + n, start_y:start_y + m] = rotated_pattern\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a random size for the grid\n    n, m = np.random.randint(5, 12), np.random.randint(5, 12)\n    \n    # Ensure the central square size is smaller than the grid\n    central_size = np.random.randint(1, min(n, m) // 2)\n    \n    # Create the grid with a black border\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly select a central color that is not black\n    central_color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Fill the central square with the selected color\n    start_x = (n - central_size) // 2\n    start_y = (m - central_size) // 2\n    for i in range(start_x, start_x + central_size):\n        for j in range(start_y, start_y + central_size):\n            grid[i, j] = central_color\n\n    # Ensure the border is a different color, randomly selected\n    border_color = np.random.choice([c for c in Color.NOT_BLACK if c != central_color])\n    \n    # Fill the border\n    grid[0, :] = border_color\n    grid[-1, :] = border_color\n    grid[:, 0] = border_color\n    grid[:, -1] = border_color\n    \n    return grid",
    "examples": [
      [
        [
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            6,
            6,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            6,
            6,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            6,
            6,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            6,
            6,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            0,
            0,
            0,
            0,
            6
          ],
          [
            6,
            0,
            4,
            0,
            0,
            6
          ],
          [
            6,
            0,
            0,
            0,
            0,
            6
          ],
          [
            6,
            0,
            0,
            0,
            0,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            0,
            0,
            0,
            0,
            6
          ],
          [
            6,
            0,
            0,
            4,
            0,
            6
          ],
          [
            6,
            0,
            0,
            0,
            0,
            6
          ],
          [
            6,
            0,
            0,
            0,
            0,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            8,
            8,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            8,
            8,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            8,
            8,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            8,
            8,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            0,
            4,
            4,
            0,
            0,
            2
          ],
          [
            2,
            0,
            4,
            4,
            0,
            0,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ]
        ],
        [
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            0,
            0,
            4,
            4,
            0,
            2
          ],
          [
            2,
            0,
            0,
            4,
            4,
            0,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "8e1813be.py",
      "3de23699.py",
      "a9f96cdd.py"
    ],
    "problem_id": 25278
  },
  {
    "source": "from common import *\nimport numpy as np\nimport random\nfrom typing import *\n\n# concepts:\n# color replacement, pattern extraction\n\n# description:\n# The input is a grid with distinct color patterns formed by blocks of colors. \n# To create the output, replace each distinct block pattern with a new color according to a predefined mapping, \n# ensuring that the shapes of the blocks are retained.\n\ndef main(input_grid):\n    # Initialize the output grid\n    output_grid = input_grid.copy()\n\n    # Find the distinct color blocks\n    objects = detect_objects(grid=input_grid, monochromatic=False, connectivity=4)\n    \n    # Replace each block with the corresponding new color\n    for obj in objects:\n        # Get the color of the block\n        original_color = obj[0, 0]\n        # Determine the new color using the color mapping\n        new_color = color_map.get(original_color, original_color)\n        # Replace the block's color in the output grid\n        output_grid[output_grid == original_color] = new_color\n    \n    return output_grid\n\n# Constructing the color map for block color transformation\ncolor_map = {\n    Color.RED: Color.BLUE,\n    Color.GREEN: Color.YELLOW,\n    Color.BLUE: Color.RED,\n    Color.YELLOW: Color.GREEN,\n    Color.PINK: Color.ORANGE,\n    Color.ORANGE: Color.PINK,\n    Color.TEAL: Color.MAROON,\n    Color.MAROON: Color.TEAL,\n    Color.GRAY: Color.GRAY,\n    Color.BLACK: Color.BLACK\n}\n\ndef generate_input():\n    # Randomly determine the grid size\n    n, m = random.randint(5, 10), random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly fill the grid with blocks of colors\n    num_blocks = random.randint(3, 5)\n    for _ in range(num_blocks):\n        # Randomly choose a color for the block\n        block_color = random.choice(Color.NOT_BLACK)\n        # Determine the size of the block\n        block_height = random.randint(1, n // 2)\n        block_width = random.randint(1, m // 2)\n\n        # Randomly choose a position to place the block\n        start_x = random.randint(0, n - block_height)\n        start_y = random.randint(0, m - block_width)\n\n        # Fill the block area with the chosen color\n        grid[start_x:start_x + block_height, start_y:start_y + block_width] = block_color\n    \n    return grid",
    "examples": [
      [
        [
          [
            8,
            0,
            0,
            0,
            0,
            8,
            8,
            8
          ],
          [
            8,
            9,
            9,
            0,
            0,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            0,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            0,
            9,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            9,
            0
          ]
        ],
        [
          [
            9,
            0,
            0,
            0,
            0,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            0,
            0,
            9,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            9,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            9,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            9,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            7,
            7,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            7,
            7,
            0
          ]
        ],
        [
          [
            3,
            3,
            3,
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            3,
            3,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            7,
            7,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            7,
            7,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            0,
            0,
            0,
            0,
            0,
            6,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0,
            0,
            6,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            9,
            9,
            9
          ],
          [
            6,
            6,
            6,
            6,
            9,
            9,
            9,
            9
          ],
          [
            6,
            6,
            6,
            6,
            9,
            9,
            9,
            9
          ],
          [
            6,
            6,
            6,
            6,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            0,
            0,
            0,
            0,
            0,
            6,
            0
          ],
          [
            3,
            0,
            0,
            0,
            0,
            0,
            6,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            9,
            9,
            9
          ],
          [
            6,
            6,
            6,
            6,
            9,
            9,
            9,
            9
          ],
          [
            6,
            6,
            6,
            6,
            9,
            9,
            9,
            9
          ],
          [
            6,
            6,
            6,
            6,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            4,
            4,
            3,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            4,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            3,
            3,
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "0d3d703e.py",
      "8e1813be.py",
      "3de23699.py",
      "25d8a9c8.py"
    ],
    "problem_id": 25294
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, color transformation\n\n# description:\n# In the input, you will see a colored square pattern. \n# To make the output, rotate the pattern 90 degrees clockwise and change all the colors to their complementary counterparts.\n\ndef main(input_grid):\n    # Rotate the input pattern 90 degrees clockwise\n    rotated_pattern = np.rot90(input_grid, k=-1)\n\n    # Create a color mapping for complementary colors\n    color_mapping = {\n        Color.BLACK: Color.YELLOW,\n        Color.YELLOW: Color.BLACK,\n        Color.RED: Color.ORANGE,\n        Color.GREEN: Color.PINK,\n        Color.BLUE: Color.YELLOW,\n        Color.YELLOW: Color.BLUE,\n        Color.ORANGE: Color.RED,\n        Color.PINK: Color.GREEN,\n        Color.ORANGE: Color.TEAL,\n        Color.TEAL: Color.ORANGE\n    }\n    \n    # Change colors to their complementary counterparts\n    output_grid = np.vectorize(color_mapping.get)(rotated_pattern)\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random square pattern of random size and colors\n    n = m = np.random.randint(3, 6)\n    grid = random_sprite(n, m, density=1, symmetry=\"not_symmetric\", color_palette=Color.NOT_BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            6,
            1,
            8
          ],
          [
            1,
            1,
            4
          ],
          [
            1,
            6,
            2
          ]
        ],
        [
          [
            4,
            4,
            3
          ],
          [
            3,
            4,
            4
          ],
          [
            7,
            1,
            7
          ]
        ]
      ],
      [
        [
          [
            1,
            6,
            4,
            4
          ],
          [
            1,
            6,
            7,
            4
          ],
          [
            1,
            7,
            8,
            8
          ],
          [
            1,
            7,
            6,
            7
          ]
        ],
        [
          [
            4,
            4,
            4,
            4
          ],
          [
            8,
            8,
            3,
            3
          ],
          [
            3,
            7,
            8,
            1
          ],
          [
            8,
            7,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1
          ],
          [
            2,
            1,
            1
          ],
          [
            7,
            1,
            1
          ]
        ],
        [
          [
            8,
            7,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ]
      ],
      [
        [
          [
            6,
            6,
            8
          ],
          [
            6,
            8,
            8
          ],
          [
            6,
            8,
            8
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            7,
            7,
            3
          ],
          [
            7,
            7,
            7
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "8e1813be.py",
      "6b9890af.py",
      "3de23699.py"
    ],
    "problem_id": 25327
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, color mapping\n\n# description:\n# In the input, you will see a grid with a pattern of colored pixels arranged in a circular formation.\n# To create the output, rotate this pattern by 90 degrees clockwise and map the colors to new positions, maintaining the circular formation.\n\ndef main(input_grid):\n    # Get the objects (circular patterns)\n    objects = find_connected_components(input_grid, connectivity=8, monochromatic=False)\n    \n    # Create an output grid that is the same size as the input grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # For each object, rotate it 90 degrees clockwise and place it in the output grid\n    for obj in objects:\n        # Crop the object to remove any black borders\n        sprite = crop(obj, background=Color.BLACK)\n\n        # Rotate the sprite 90 degrees clockwise\n        rotated_sprite = np.rot90(sprite, -1)  # -1 for clockwise rotation\n\n        # Find the position of the original object\n        x, y = object_position(obj, background=Color.BLACK, anchor=\"upper left\")\n\n        # Place the rotated sprite in the output grid at the same coordinates\n        blit_sprite(output_grid, rotated_sprite, x=x, y=y, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random size for the grid\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    \n    # Create a grid filled with black color\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly select a color for the pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create a circular pattern in the center of the grid\n    radius = np.random.randint(1, min(n, m) // 4)\n    center_x, center_y = n // 2, m // 2\n\n    for angle in np.linspace(0, 2 * np.pi, num=12, endpoint=False):  # Create a circular pattern\n        x = int(center_x + radius * np.cos(angle))\n        y = int(center_y + radius * np.sin(angle))\n        if 0 <= x < n and 0 <= y < m:\n            grid[x, y] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "6fa7a44f.py",
      "a9f96cdd.py"
    ],
    "problem_id": 25534
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color mapping, pattern recognition, boundary detection\n\n# description:\n# In the input you will see a 5x5 grid of colored pixels containing a solid blue shape and a border of red pixels.\n# To make the output grid, you should identify the solid blue shape and color its boundary in yellow, \n# while the inside of the shape should remain transparent (black). If no blue shape is detected, the output should be all black.\n\ndef main(input_grid):\n    # Detect the blue shape in the grid\n    blue_objects = detect_objects(grid=input_grid, colors=[Color.BLUE], allowed_dimensions=None, monochromatic=True, connectivity=4)\n\n    # Create an output grid that starts off as all black\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    if len(blue_objects) > 0:\n        # Assuming only one blue shape, take the first detected object\n        blue_shape = blue_objects[0]\n\n        # Get the bounding box of the blue shape\n        x, y, width, height = bounding_box(blue_shape, background=Color.BLACK)\n\n        # Draw the boundary of the blue shape in yellow\n        for i in range(x, x + width):\n            output_grid[i, y] = Color.YELLOW  # Left boundary\n            output_grid[i, y + height - 1] = Color.YELLOW  # Right boundary\n        for j in range(y, y + height):\n            output_grid[x, j] = Color.YELLOW  # Top boundary\n            output_grid[x + width - 1, j] = Color.YELLOW  # Bottom boundary\n\n    return output_grid\n\ndef generate_input():\n    # Initialize a 5x5 grid\n    n, m = 5, 5\n    grid = np.full((n, m), Color.BLACK)  # Start with a black grid\n\n    # Randomly choose to place a blue shape with a red border\n    solid_shape = random_sprite(n=3, m=3, density=1.0, color_palette=[Color.BLUE], symmetry=None)  # Solid blue shape\n    x, y = np.random.randint(0, n-3), np.random.randint(0, m-3)  # Random position for the shape\n\n    # Place the blue shape in the grid\n    grid = blit_sprite(grid=grid, sprite=solid_shape, x=x, y=y, background=Color.BLACK)\n\n    # Add a border of red pixels around the blue shape\n    for i in range(max(0, x-1), min(n, x+3+1)):\n        for j in range(max(0, y-1), min(m, y+3+1)):\n            if grid[i, j] == Color.BLACK:  # Only change if it's background\n                grid[i, j] = Color.RED\n\n    return grid",
    "examples": [
      [
        [
          [
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            1,
            1,
            1,
            2
          ],
          [
            2,
            1,
            1,
            1,
            2
          ],
          [
            2,
            1,
            1,
            1,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            0,
            4,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            2,
            1,
            1,
            1,
            2
          ],
          [
            2,
            1,
            1,
            1,
            2
          ],
          [
            2,
            1,
            1,
            1,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            0,
            4,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1,
            2,
            0
          ],
          [
            1,
            1,
            1,
            2,
            0
          ],
          [
            1,
            1,
            1,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            4,
            0,
            0
          ],
          [
            4,
            0,
            4,
            0,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            2,
            2,
            0
          ],
          [
            1,
            1,
            1,
            2,
            0
          ],
          [
            1,
            1,
            1,
            2,
            0
          ],
          [
            1,
            1,
            1,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0
          ],
          [
            4,
            0,
            4,
            0,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "3e980e27.py",
      "a9f96cdd.py",
      "995c5fa3.py"
    ],
    "problem_id": 26795
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# layering, masking, color blending\n\n# description:\n# In the input, you will see multiple colored layers that overlap each other in a grid. \n# To make the output, apply a mask to reveal only the topmost layer's color in certain areas, while blending the colors of the underlying layers in the masked regions.\n\ndef main(input_grid):\n    # Plan:\n    # 1. Identify the topmost layer by finding the first non-black layer in each column.\n    # 2. Create a mask of the topmost layer's position.\n    # 3. For each pixel, if it is part of the topmost layer, keep its color.\n    # 4. If it's not part of the topmost layer, blend the colors of the overlapping layers.\n\n    # Create an output grid and initialize with the background color\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Get the number of rows and columns\n    rows, cols = input_grid.shape\n\n    # Process each column to find the topmost layer\n    for col in range(cols):\n        topmost_color = Color.BLACK  # Initialize to black\n        for row in range(rows):\n            current_color = input_grid[row, col]\n            if current_color != Color.BLACK:\n                if topmost_color == Color.BLACK:  # First non-black color found\n                    topmost_color = current_color\n                else:\n                    # Blend colors if there's already a topmost color\n                    topmost_color = blend_colors(topmost_color, current_color)\n\n        # Assign the topmost color to the output grid\n        if topmost_color != Color.BLACK:\n            output_grid[0:rows, col] = topmost_color\n\n    return output_grid\n\ndef blend_colors(color1, color2):\n    # Simplified blending function for two colors\n    if color1 == color2:\n        return color1\n    # This is a basic blending logic, can be expanded based on requirements\n    return Color.GREY  # For simplicity, we will blend colors to grey\n\ndef generate_input():\n    # Create a random grid with overlapping colored layers\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly determine how many layers to add\n    num_layers = np.random.randint(2, 5)\n\n    # For each layer, add random colored pixels\n    for _ in range(num_layers):\n        # Create a random sprite\n        layer_sprite = random_sprite(np.random.randint(2, 6), np.random.randint(2, 6), density=0.5, color_palette=Color.NOT_BLACK)\n        # Randomly place the sprite in the grid\n        x, y = random_free_location_for_sprite(grid, layer_sprite, border_size=1)\n        blit_sprite(grid, layer_sprite, x, y, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            4,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            8,
            8,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            8,
            8,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            6,
            1,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            1,
            1,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            1,
            1,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            1,
            1,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            1,
            1,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            1,
            1,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            1,
            1,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            1,
            1,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            1,
            1,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            1,
            1,
            5,
            5,
            5,
            5,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            2,
            2,
            0,
            2,
            0
          ],
          [
            0,
            0,
            0,
            8,
            7,
            7,
            1,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            3,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            8,
            7,
            7,
            1,
            8,
            0
          ],
          [
            0,
            0,
            0,
            3,
            2,
            2,
            8,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            5,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            5,
            5,
            5,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            2,
            2,
            0
          ],
          [
            0,
            0,
            1,
            2,
            2,
            0
          ],
          [
            0,
            0,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            6,
            0,
            0,
            2,
            0
          ],
          [
            0,
            6,
            1,
            6,
            2,
            2,
            2,
            0
          ],
          [
            0,
            6,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            5,
            1,
            5,
            2,
            2,
            2,
            0
          ],
          [
            0,
            5,
            1,
            5,
            2,
            2,
            2,
            0
          ],
          [
            0,
            5,
            1,
            5,
            2,
            2,
            2,
            0
          ],
          [
            0,
            5,
            1,
            5,
            2,
            2,
            2,
            0
          ],
          [
            0,
            5,
            1,
            5,
            2,
            2,
            2,
            0
          ],
          [
            0,
            5,
            1,
            5,
            2,
            2,
            2,
            0
          ],
          [
            0,
            5,
            1,
            5,
            2,
            2,
            2,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bd4472b8.py",
      "0e206a2e.py",
      "aabf363d.py",
      "1f642eb9.py"
    ],
    "problem_id": 26830
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# alternating patterns, color swapping\n\n# description:\n# In the input, you will see a checkerboard pattern of two colors. \n# To make the output, swap the colors of each square, creating a new checkerboard pattern where the colors are inverted from the original.\n\ndef main(input_grid):\n    # Initialize the output grid with the same shape as the input\n    output_grid = np.zeros_like(input_grid)\n\n    # Get the height and width of the input grid\n    height, width = input_grid.shape\n\n    # Loop through each cell in the grid\n    for x in range(height):\n        for y in range(width):\n            # Determine the color to swap; assume two colors are present\n            if input_grid[x, y] == Color.BLUE:\n                output_grid[x, y] = Color.RED  # Swap BLUE with RED\n            elif input_grid[x, y] == Color.RED:\n                output_grid[x, y] = Color.BLUE  # Swap RED with BLUE\n            else:\n                output_grid[x, y] = input_grid[x, y]  # Keep other colors unchanged\n\n    return output_grid\n\ndef generate_input():\n    # Create a checkerboard pattern with two colors\n    n = m = np.random.randint(4, 8)  # Random size for the grid\n    grid = np.zeros((n, m), dtype=int)\n\n    # Define two colors to use in the checkerboard\n    color1 = Color.BLUE\n    color2 = Color.RED\n\n    # Fill the grid with a checkerboard pattern\n    for x in range(n):\n        for y in range(m):\n            if (x + y) % 2 == 0:\n                grid[x, y] = color1\n            else:\n                grid[x, y] = color2\n\n    return grid",
    "examples": [
      [
        [
          [
            1,
            2,
            1,
            2,
            1
          ],
          [
            2,
            1,
            2,
            1,
            2
          ],
          [
            1,
            2,
            1,
            2,
            1
          ],
          [
            2,
            1,
            2,
            1,
            2
          ],
          [
            1,
            2,
            1,
            2,
            1
          ]
        ],
        [
          [
            2,
            1,
            2,
            1,
            2
          ],
          [
            1,
            2,
            1,
            2,
            1
          ],
          [
            2,
            1,
            2,
            1,
            2
          ],
          [
            1,
            2,
            1,
            2,
            1
          ],
          [
            2,
            1,
            2,
            1,
            2
          ]
        ]
      ],
      [
        [
          [
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1
          ]
        ],
        [
          [
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2
          ]
        ]
      ],
      [
        [
          [
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1
          ]
        ],
        [
          [
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2
          ]
        ]
      ],
      [
        [
          [
            1,
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2,
            1
          ]
        ],
        [
          [
            2,
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1,
            2
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "8e1813be.py",
      "6b9890af.py",
      "1fad071e.py"
    ],
    "problem_id": 28920
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# spatial arrangement, color gradient, interpolation\n\n# description:\n# In the input, you will see a grid with a series of colored pixels arranged randomly. \n# To create the output, arrange the pixels in a gradient that transitions smoothly from the top left corner to the bottom right corner, \n# using the colors present in the input. The transition should follow the proximity of the original colors.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Get unique colors from the input grid, excluding the background color\n    unique_colors = np.unique(input_grid[input_grid != Color.BLACK])\n    \n    # Create an empty output grid with the same shape as the input grid\n    output_grid = np.zeros_like(input_grid)\n    \n    # Get the dimensions of the grid\n    height, width = input_grid.shape\n    \n    # Create a color gradient based on the position\n    for y in range(height):\n        for x in range(width):\n            # Determine the proportion of the position in the grid\n            proportion_x = x / (width - 1)\n            proportion_y = y / (height - 1)\n            color_index = int((proportion_x + proportion_y) * (len(unique_colors) - 1))\n            output_grid[y, x] = unique_colors[color_index]\n    \n    return output_grid\n\n\ndef generate_input() -> np.ndarray:\n    # Decide how many colors to use\n    num_colors = np.random.randint(2, 6)\n    \n    # Select colors for the grid, ensuring no duplicates\n    colors = np.random.choice(list(Color.NOT_BLACK), num_colors, replace=False)\n    \n    # Create a grid with a random size\n    height, width = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((height, width), dtype=int)\n    \n    # Randomly place colors in the grid\n    for _ in range(num_colors):\n        # Random position to place the color\n        x, y = np.random.randint(0, width), np.random.randint(0, height)\n        grid[y, x] = np.random.choice(colors)\n        \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            7,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            8
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ]
    ],
    "seeds": [
      "bd4472b8.py",
      "bc1d5164.py",
      "3de23699.py",
      "995c5fa3.py"
    ],
    "problem_id": 29961
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# transparency, layering\n\n# description:\n# In the input, you will see a series of colored layers represented with varying transparency levels on a black background.\n# To create the output, blend the colors of each layer according to their transparency levels, producing a new visually blended pattern that reflects the layers beneath.\n\ndef main(input_grid):\n    # Create an output grid initialized to black\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n    \n    # Get the number of layers in the input grid\n    layers = find_connected_components(input_grid, background=Color.BLACK, monochromatic=False, connectivity=8)\n    \n    for layer in layers:\n        # Get the color of the layer\n        color = layer[0][0]  # Assume the first pixel defines the color of the layer\n        \n        # Blend the color into the output grid based on the layer's transparency\n        for x in range(layer.shape[0]):\n            for y in range(layer.shape[1]):\n                if layer[x, y] != Color.BLACK:\n                    # Blend colors based on transparency\n                    if output_grid[x, y] == Color.BLACK:\n                        output_grid[x, y] = color\n                    else:\n                        # Here we could implement some blending logic; for simplicity, we will just overwrite\n                        output_grid[x, y] = color  # This can be refined to a proper alpha blending\n                    \n    return output_grid\n\ndef generate_input():\n    # Initialize the grid size\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Number of layers\n    num_layers = np.random.randint(3, 6)\n\n    for _ in range(num_layers):\n        # Create a random layer with a random color\n        layer_color = np.random.choice(list(Color.NOT_BLACK))\n        layer = random_sprite(np.random.randint(2, n // 2), np.random.randint(2, m // 2), density=0.5, color_palette=[layer_color])\n        \n        # Randomly place the layer in the grid\n        x, y = random_free_location_for_sprite(grid, layer, padding=0)\n        blit_sprite(grid, layer, x, y, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            6,
            6,
            0,
            0,
            0,
            9,
            9
          ],
          [
            6,
            6,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            5,
            0
          ],
          [
            6,
            6,
            0,
            0,
            5,
            5,
            0
          ],
          [
            6,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            7,
            7,
            0
          ],
          [
            0,
            0,
            0,
            0,
            7,
            7,
            0
          ]
        ],
        [
          [
            6,
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            6,
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            0,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6,
            0
          ],
          [
            0,
            9,
            9,
            0,
            6,
            6,
            0
          ],
          [
            0,
            9,
            9,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            7,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            6,
            6,
            7,
            0,
            0,
            0
          ],
          [
            0,
            6,
            3,
            7,
            7,
            0,
            0
          ],
          [
            0,
            6,
            3,
            0,
            6,
            6,
            0
          ],
          [
            0,
            3,
            3,
            0,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            7,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            7,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            7,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            7,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            7,
            7,
            0,
            7,
            7,
            0
          ],
          [
            0,
            7,
            7,
            0,
            7,
            7,
            0
          ],
          [
            0,
            0,
            0,
            0,
            7,
            7,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ],
          [
            9,
            9,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ],
          [
            9,
            0,
            9,
            0,
            0,
            5,
            5,
            0,
            0
          ],
          [
            9,
            9,
            9,
            0,
            0,
            5,
            5,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            3,
            0,
            3,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            3,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "8e1813be.py",
      "0e206a2e.py",
      "bd4472b8.py"
    ],
    "problem_id": 32899
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, transformation, grid expansion\n\n# description:\n# In the input, you will see a small pattern made up of colored pixels located in the center of the grid. \n# To create the output, generate a larger grid by rotating the original pattern in 90-degree increments \n# and filling the grid with the resulting patterns, ensuring the original pattern is centered in the output grid.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Detect the central pattern\n    objects = detect_objects(grid=input_grid, colors=Color.NOT_BLACK, connectivity=8, monochromatic=True)\n    \n    assert len(objects) == 1, \"There should be exactly one pattern in the input.\"\n    \n    # Crop the detected pattern\n    pattern = crop(objects[0], background=Color.BLACK)\n    \n    # Prepare a rotation function\n    def rotate_90(grid):\n        return np.rot90(grid)\n    \n    # Create an output grid that is four times the size of the original pattern\n    output_size = (pattern.shape[0] * 2, pattern.shape[1] * 2)\n    output_grid = np.full(output_size, Color.BLACK)\n    \n    # Place the original pattern in the center\n    output_grid[output_size[0]//2 - pattern.shape[0]//2:output_size[0]//2 + pattern.shape[0]//2,\n                output_size[1]//2 - pattern.shape[1]//2:output_size[1]//2 + pattern.shape[1]//2] = pattern\n\n    # Rotate and fill the output grid\n    for i in range(4):\n        rotated_pattern = rotate_90(pattern)\n        output_grid[output_size[0]//2 - rotated_pattern.shape[0]//2:output_size[0]//2 + rotated_pattern.shape[0]//2,\n                    output_size[1]//2 - rotated_pattern.shape[1]//2:output_size[1]//2 + rotated_pattern.shape[1]//2] = rotated_pattern\n        # Rotate the pattern for the next position\n        pattern = rotated_pattern\n    \n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a random pattern size between 2 and 5\n    n = np.random.randint(2, 6)\n    m = np.random.randint(2, 6)\n    \n    # Generate a random pattern with a specified density\n    pattern = random_sprite(n, m, density=0.6, color_palette=list(Color.NOT_BLACK), background=Color.BLACK)\n    \n    # Create a larger black background grid to place the pattern in the center\n    grid_size = max(n, m) + 4  # Ensure there is space around the pattern\n    grid = np.full((grid_size, grid_size), Color.BLACK)\n    \n    # Place the pattern in the center of the grid\n    start_x = (grid_size - n) // 2\n    start_y = (grid_size - m) // 2\n    grid[start_x:start_x + n, start_y:start_y + m] = pattern\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            0
          ],
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5
          ],
          [
            0,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "995c5fa3.py",
      "a9f96cdd.py",
      "3de23699.py"
    ],
    "problem_id": 32955
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern extraction, tiling, color mapping\n\n# description:\n# In the input, you will see a grid containing a central pattern of colored pixels.\n# To make the output, extract the central pattern, and tile this pattern across the entire output grid, \n# using a color mapping where each color in the original pattern is replaced by a corresponding color from a predefined palette.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Define a color mapping palette\n    color_palette = {\n        Color.RED: Color.GREEN,\n        Color.BLUE: Color.YELLOW,\n        Color.GREEN: Color.RED,\n        Color.YELLOW: Color.BLUE,\n        Color.TEAL: Color.MAROON,\n        Color.MAROON: Color.TEAL,\n        Color.PINK: Color.GREY,\n        Color.GREY: Color.PINK,\n        Color.ORANGE: Color.BLUE,\n        Color.BLACK: Color.BLACK  # Keep black as black\n    }\n\n    # Crop the central pattern out of the input grid\n    central_pattern = crop(input_grid)\n\n    # Create a new output grid of the same size as the original input grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Tile the central pattern across the output grid\n    pattern_height, pattern_width = central_pattern.shape\n    for i in range(0, output_grid.shape[0], pattern_height):\n        for j in range(0, output_grid.shape[1], pattern_width):\n            # Get the current section of the output grid where the pattern will be placed\n            output_grid[i:i + pattern_height, j:j + pattern_width] = central_pattern\n\n    # Apply the color mapping to the output grid\n    for original_color, mapped_color in color_palette.items():\n        output_grid[output_grid == original_color] = mapped_color\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly select the size of the central pattern\n    n, m = np.random.randint(3, 6), np.random.randint(3, 6)\n\n    # Generate a random central pattern\n    central_pattern = random_sprite(n, m, density=0.5, color_palette=list(Color.NOT_BLACK))\n\n    # Create the grid with a border for the pattern\n    grid_size = (n + 4, m + 4)  # Add a border of 2 pixels around the central pattern\n    grid = np.zeros(grid_size, dtype=int)\n\n    # Place the central pattern in the middle of the grid\n    grid[2:2 + n, 2:2 + m] = central_pattern\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            3,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1
          ],
          [
            1,
            1,
            2,
            2,
            1,
            1,
            2,
            2
          ],
          [
            1,
            1,
            2,
            1,
            1,
            1,
            2,
            1
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            1
          ],
          [
            1,
            1,
            2,
            2,
            1,
            1,
            2,
            2
          ],
          [
            1,
            1,
            2,
            1,
            1,
            1,
            2,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            6,
            0,
            0,
            1,
            6,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            8
          ],
          [
            1,
            6,
            0,
            0,
            1,
            6,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            5,
            0,
            0
          ],
          [
            0,
            0,
            1,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            1,
            1,
            6,
            0,
            1,
            1,
            6
          ],
          [
            1,
            6,
            0,
            0,
            1,
            6,
            0,
            0
          ],
          [
            0,
            6,
            6,
            0,
            0,
            6,
            6,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            0,
            6,
            0
          ],
          [
            0,
            1,
            1,
            6,
            0,
            1,
            1,
            6
          ],
          [
            1,
            6,
            0,
            0,
            1,
            6,
            0,
            0
          ],
          [
            0,
            6,
            6,
            0,
            0,
            6,
            6,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            0,
            6,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            6,
            1,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            5,
            4,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            5,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            6,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            8,
            6,
            1,
            0,
            8,
            6,
            1
          ],
          [
            8,
            8,
            6,
            1,
            8,
            8,
            6,
            1
          ],
          [
            8,
            8,
            6,
            1,
            8,
            8,
            6,
            1
          ],
          [
            0,
            8,
            6,
            1,
            0,
            8,
            6,
            1
          ],
          [
            0,
            8,
            6,
            1,
            0,
            8,
            6,
            1
          ],
          [
            8,
            8,
            6,
            1,
            8,
            8,
            6,
            1
          ],
          [
            8,
            8,
            6,
            1,
            8,
            8,
            6,
            1
          ],
          [
            0,
            8,
            6,
            1,
            0,
            8,
            6,
            1
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "bd4472b8.py",
      "8e1813be.py",
      "3de23699.py"
    ],
    "problem_id": 33212
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pixel rotation, symmetry detection\n\n# description:\n# In the input, you will see a square pattern of colored pixels. To produce the output, \n# rotate the pattern 90 degrees clockwise and check for symmetry. \n# If the rotated pattern has rotational symmetry, color the output grid with the same color as the original pattern. \n# If not, color it black.\n\ndef main(input_grid):\n    # Rotate the input pattern 90 degrees clockwise\n    rotated_pattern = np.rot90(input_grid, k=-1)\n    \n    # Check for rotational symmetry\n    # A pattern has rotational symmetry if it looks the same when rotated 180 degrees\n    is_symmetrical = np.array_equal(rotated_pattern, np.rot90(rotated_pattern, k=2))\n    \n    # Prepare the output grid\n    if is_symmetrical:\n        output_grid = np.full(input_grid.shape, input_grid[0, 0])  # Fill with the color of the original pattern\n    else:\n        output_grid = np.full(input_grid.shape, Color.BLACK)  # Fill with black\n    \n    return output_grid\n\ndef generate_input():\n    # Generate a random square pattern of random size and colors\n    n = m = np.random.randint(3, 6)  # Size of the grid will be between 3x3 and 5x5\n    grid = random_sprite(n, m, density=1, symmetry=None, color_palette=Color.NOT_BLACK)\n    \n    return grid",
    "examples": [
      [
        [
          [
            9,
            9,
            9,
            9
          ],
          [
            9,
            8,
            8,
            9
          ],
          [
            9,
            8,
            8,
            9
          ],
          [
            9,
            9,
            9,
            9
          ]
        ],
        [
          [
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9
          ]
        ]
      ],
      [
        [
          [
            3,
            4,
            4,
            3,
            3
          ],
          [
            3,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            2,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            3
          ],
          [
            3,
            3,
            4,
            4,
            3
          ]
        ],
        [
          [
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            2
          ],
          [
            2,
            1,
            2
          ],
          [
            2,
            2,
            2
          ]
        ],
        [
          [
            2,
            2,
            2
          ],
          [
            2,
            2,
            2
          ],
          [
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1,
            6,
            1
          ],
          [
            6,
            6,
            6,
            6,
            1
          ],
          [
            1,
            6,
            9,
            6,
            1
          ],
          [
            1,
            6,
            6,
            6,
            6
          ],
          [
            1,
            6,
            1,
            1,
            1
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "44f52bb0.py",
      "bc1d5164.py",
      "995c5fa3.py"
    ],
    "problem_id": 33554
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern repetition, pixel filling\n\n# description:\n# In the input, you will see a grid with a central pattern. \n# The output should replicate that central pattern throughout the entire grid, \n# filling the grid with copies of the central pattern without changing the orientation. \n# The output grid should maintain the same dimensions as the input grid.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Get the central pattern by finding the bounding box of the non-background pixels\n    pattern = crop(input_grid, background=Color.BLACK)\n    pattern_height, pattern_width = pattern.shape\n\n    # Create an output grid of the same size as the input grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Fill the output grid with the repeated pattern\n    for i in range(0, output_grid.shape[0], pattern_height):\n        for j in range(0, output_grid.shape[1], pattern_width):\n            output_grid[i:i + pattern_height, j:j + pattern_width] = pattern\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly generate the size for the central pattern\n    pattern_height = np.random.randint(2, 5)\n    pattern_width = np.random.randint(2, 5)\n\n    # Generate a random pattern with some density\n    central_pattern = random_sprite(pattern_height, pattern_width, density=0.5, color_palette=None)\n\n    # Create the input grid, large enough to fit the pattern repeated at least once\n    grid_height = np.random.randint(pattern_height, 2 * pattern_height + 1)\n    grid_width = np.random.randint(pattern_width, 2 * pattern_width + 1)\n\n    input_grid = np.full((grid_height, grid_width), Color.BLACK)\n\n    # Place the central pattern in the middle of the input grid\n    start_x = (grid_height - pattern_height) // 2\n    start_y = (grid_width - pattern_width) // 2\n    input_grid[start_x:start_x + pattern_height, start_y:start_y + pattern_width] = central_pattern\n\n    return input_grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            6,
            0,
            0,
            0
          ],
          [
            6,
            0,
            6,
            0
          ],
          [
            6,
            6,
            1,
            6
          ],
          [
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            0,
            0,
            0
          ],
          [
            6,
            0,
            6,
            0
          ],
          [
            6,
            6,
            1,
            6
          ],
          [
            1,
            1,
            1,
            0
          ],
          [
            6,
            0,
            0,
            0
          ],
          [
            6,
            0,
            6,
            0
          ],
          [
            6,
            6,
            1,
            6
          ],
          [
            1,
            1,
            1,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            5,
            0,
            0
          ],
          [
            0,
            0,
            1,
            5,
            0,
            0
          ],
          [
            0,
            1,
            1,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            5,
            1,
            1,
            5
          ],
          [
            0,
            1,
            5,
            0,
            1,
            5
          ],
          [
            1,
            1,
            5,
            1,
            1,
            5
          ],
          [
            1,
            1,
            5,
            1,
            1,
            5
          ],
          [
            0,
            1,
            5,
            0,
            1,
            5
          ],
          [
            1,
            1,
            5,
            1,
            1,
            5
          ]
        ]
      ],
      [
        [
          [
            0,
            0
          ],
          [
            6,
            6
          ],
          [
            6,
            6
          ],
          [
            6,
            6
          ],
          [
            0,
            0
          ],
          [
            0,
            0
          ]
        ],
        [
          [
            6,
            6
          ],
          [
            6,
            6
          ],
          [
            6,
            6
          ],
          [
            6,
            6
          ],
          [
            6,
            6
          ],
          [
            6,
            6
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "bd4472b8.py",
      "995c5fa3.py"
    ],
    "problem_id": 34142
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, color inference\n\n# description:\n# In the input, you will see a pattern that is circularly symmetric, but with some of the colors missing. \n# To create the output, analyze the existing pattern and fill in the missing colors to restore symmetry. \n# The filled sections should match the surrounding colors.\n\ndef main(input_grid):\n    # Plan:\n    # 1. Identify the circular symmetry in the input grid.\n    # 2. For each pixel in the grid, check if it's color is missing (e.g., Color.BLACK).\n    # 3. For each missing pixel, find its symmetric counterpart based on the detected symmetry.\n    # 4. Fill in the missing colors based on the surrounding colors of the identified symmetric counterparts.\n\n    # Detect circular symmetry in the grid\n    symmetries = detect_translational_symmetry(input_grid, ignore_colors=[Color.BLACK])\n    \n    # Create an output grid to store the filled colors\n    output_grid = input_grid.copy()\n\n    # Iterate over all pixels in the input grid\n    for x, y in np.argwhere(input_grid != Color.BLACK):\n        color = input_grid[x, y]\n        # Find the symmetric points under the identified symmetries\n        for sym in symmetries:\n            symmetric_x, symmetric_y = sym.apply(x, y)\n            if output_grid[symmetric_x, symmetric_y] == Color.BLACK:\n                output_grid[symmetric_x, symmetric_y] = color\n\n    return output_grid\n\n\ndef generate_input():\n    # Plan:\n    # 1. Generate a random sprite with circular symmetry.\n    # 2. Randomly occlude some sections by changing their colors to black.\n\n    # Generate a base sprite with circular symmetry\n    n, m = np.random.randint(5, 10, size=(2))\n    sprite = random_sprite(n, m, symmetry=\"not_symmetric\", color_palette=Color.NOT_BLACK)\n\n    # Tile the sprite in a circular manner\n    center_x, center_y = n // 2, m // 2\n    pattern = np.full((n, m), Color.BLACK)\n    radius = min(n, m) // 2\n\n    for angle in np.linspace(0, 2 * np.pi, num=8, endpoint=False):\n        x_offset = int(radius * np.cos(angle))\n        y_offset = int(radius * np.sin(angle))\n        blit_sprite(pattern, sprite, center_x + x_offset, center_y + y_offset, background=Color.BLACK)\n\n    # Randomly occlude some sections by changing their colors to black\n    num_occlusions = np.random.randint(1, 5)\n    for _ in range(num_occlusions):\n        x_occluder = np.random.randint(0, n)\n        y_occluder = np.random.randint(0, m)\n        if pattern[x_occluder, y_occluder] != Color.BLACK:\n            pattern[x_occluder, y_occluder] = Color.BLACK\n\n    return pattern",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            7,
            3,
            3
          ],
          [
            0,
            0,
            0,
            0,
            4,
            1,
            9,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            7,
            9,
            9,
            3,
            7
          ],
          [
            0,
            0,
            4,
            4,
            5,
            9,
            9,
            0,
            9
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            7,
            3,
            3
          ],
          [
            0,
            0,
            0,
            0,
            4,
            1,
            9,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            7,
            9,
            9,
            3,
            7
          ],
          [
            0,
            0,
            4,
            4,
            5,
            9,
            9,
            1,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            7,
            3,
            3
          ],
          [
            0,
            0,
            0,
            0,
            4,
            1,
            9,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            7,
            9,
            9,
            3,
            7
          ],
          [
            0,
            0,
            4,
            4,
            5,
            9,
            9,
            1,
            9
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            6,
            0,
            0,
            1
          ],
          [
            0,
            2,
            5,
            4,
            6,
            6
          ],
          [
            0,
            6,
            6,
            1,
            1,
            1
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            6,
            0,
            0,
            1
          ],
          [
            0,
            2,
            5,
            4,
            6,
            6
          ],
          [
            0,
            6,
            6,
            1,
            1,
            1
          ],
          [
            0,
            2,
            5,
            4,
            6,
            6
          ],
          [
            0,
            6,
            6,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            9,
            9,
            8
          ],
          [
            0,
            0,
            9,
            9,
            9,
            8,
            9
          ],
          [
            0,
            9,
            9,
            9,
            8,
            9,
            9
          ],
          [
            0,
            0,
            9,
            9,
            9,
            8,
            9
          ],
          [
            0,
            0,
            0,
            9,
            0,
            5,
            3
          ]
        ],
        [
          [
            9,
            9,
            8,
            0,
            9,
            9,
            8
          ],
          [
            9,
            8,
            9,
            9,
            9,
            8,
            9
          ],
          [
            8,
            9,
            9,
            9,
            8,
            9,
            9
          ],
          [
            9,
            8,
            9,
            9,
            9,
            8,
            9
          ],
          [
            0,
            5,
            3,
            9,
            0,
            5,
            3
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            6
          ],
          [
            0,
            0,
            4,
            0,
            4,
            4,
            6,
            6
          ],
          [
            0,
            0,
            4,
            4,
            7,
            4,
            4,
            4
          ],
          [
            0,
            4,
            6,
            4,
            4,
            6,
            4,
            4
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            0,
            4,
            0,
            4,
            6
          ],
          [
            6,
            6,
            4,
            0,
            4,
            4,
            6,
            6
          ],
          [
            4,
            4,
            4,
            4,
            7,
            4,
            4,
            4
          ],
          [
            4,
            4,
            6,
            4,
            4,
            6,
            4,
            4
          ]
        ]
      ]
    ],
    "seeds": [
      "f9012d9b.py",
      "6fa7a44f.py",
      "8e1813be.py",
      "3345333e.py"
    ],
    "problem_id": 34323
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, occlusion, color inference\n\n# description:\n# In the input you will see a grid containing a symmetric pattern that is partially occluded by black pixels.\n# The output should complete the symmetric pattern by filling in the occluded areas with the corresponding colors\n# inferred from the visible parts of the pattern.\n\ndef main(input_grid):\n    # Plan:\n    # 1. Identify the visible colors in the grid\n    # 2. Detect symmetry in the visible parts of the grid\n    # 3. Fill in the occluded parts based on the inferred colors from the symmetry\n\n    # Create a copy of the input grid for the output\n    output_grid = np.copy(input_grid)\n\n    # Detect the symmetries in the grid while ignoring black pixels\n    symmetries = detect_translational_symmetry(input_grid, ignore_colors=[Color.BLACK])\n    \n    # Fill in the occluded pixels based on the symmetry\n    for x in range(input_grid.shape[0]):\n        for y in range(input_grid.shape[1]):\n            if input_grid[x, y] == Color.BLACK:\n                # Use the symmetry to infer the color of the occluded pixel\n                for symmetric_x, symmetric_y in orbit(input_grid, x, y, symmetries):\n                    if input_grid[symmetric_x, symmetric_y] != Color.BLACK:\n                        output_grid[x, y] = input_grid[symmetric_x, symmetric_y]\n                        break\n    \n    return output_grid\n\ndef generate_input():\n    # Plan:\n    # 1. Create a random base sprite\n    # 2. Tile it to create a symmetric pattern\n    # 3. Randomly occlude parts of the pattern with black pixels to create the input grid\n\n    # Create a random base sprite\n    sprite_size = np.random.randint(3, 6)\n    sprite = random_sprite(sprite_size, sprite_size, density=0.5, color_palette=Color.NOT_BLACK)\n\n    # Tile the sprite to create a symmetric pattern\n    horizontal_repetitions, vertical_repetitions = np.random.randint(2, 4, size=(2))\n    pattern = np.tile(sprite, (horizontal_repetitions, vertical_repetitions))\n\n    # Create a black mask to occlude parts of the pattern\n    occlusion_count = np.random.randint(1, 5)\n    for _ in range(occlusion_count):\n        occluder_size = np.random.randint(1, 4)\n        x_occluder = np.random.randint(0, pattern.shape[0] - occluder_size)\n        y_occluder = np.random.randint(0, pattern.shape[1] - occluder_size)\n        black_rectangle = np.full((occluder_size, occluder_size), Color.BLACK)\n        blit_sprite(pattern, black_rectangle, x_occluder, y_occluder)\n\n    return pattern",
    "examples": [
      [
        [
          [
            0,
            1,
            0,
            0,
            1,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            1,
            0,
            0,
            1,
            0
          ],
          [
            0,
            1,
            0,
            0,
            1,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            1,
            0,
            0,
            1,
            0
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            1,
            1,
            0,
            1,
            1
          ],
          [
            1,
            1,
            0,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            0,
            1,
            1
          ],
          [
            0,
            1,
            1,
            0,
            1,
            1
          ],
          [
            1,
            1,
            0,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            0,
            1,
            1
          ],
          [
            0,
            1,
            1,
            0,
            1,
            1
          ],
          [
            1,
            1,
            0,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            0,
            1,
            1
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            0,
            1,
            0,
            0,
            1
          ],
          [
            0,
            0,
            1,
            0,
            0,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            0,
            1,
            0,
            0,
            1
          ],
          [
            0,
            0,
            1,
            0,
            0,
            1
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ]
    ],
    "seeds": [
      "0dfd9992.py",
      "f9012d9b.py",
      "3de23699.py",
      "bc1d5164.py"
    ],
    "problem_id": 34411
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color transformation, radial gradient, distance-based filling\n\n# description:\n# In the input, you will see a 5x5 grid with a single colored pixel in the center. \n# To create the output grid, fill the surrounding pixels with a gradient that transitions \n# from the color of the center pixel to black, radiating outward.\n\ndef main(input_grid):\n    # Find the center pixel\n    center_x, center_y = input_grid.shape[0] // 2, input_grid.shape[1] // 2\n    center_color = input_grid[center_x, center_y]\n\n    # Initialize the output grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Fill the grid with a gradient from the center pixel color to black\n    for x in range(input_grid.shape[0]):\n        for y in range(input_grid.shape[1]):\n            # Calculate the distance from the center\n            distance = max(abs(center_x - x), abs(center_y - y))\n            # Compute the blend factor based on distance (distance 0 = full color, distance 1 = black)\n            blend_factor = min(1, distance / 2)  # distance will be 0 to 2 for a 5x5 grid\n            # Mix the colors based on the blend factor\n            if blend_factor < 1:\n                # Interpolate between the center color and black\n                output_grid[x, y] = blend_color(center_color, Color.BLACK, blend_factor)\n            else:\n                output_grid[x, y] = Color.BLACK\n\n    return output_grid\n\ndef blend_color(color1, color2, factor):\n    # Simple color blending function\n    # Assuming colors are represented as strings, we can define a simple mapping\n    color_map = {\n        Color.BLACK: (0, 0, 0),\n        Color.BLUE: (0, 0, 255),\n        Color.RED: (255, 0, 0),\n        Color.GREEN: (0, 255, 0),\n        Color.YELLOW: (255, 255, 0),\n        Color.GREY: (128, 128, 128),\n        Color.PINK: (255, 192, 203),\n        Color.ORANGE: (255, 165, 0),\n        Color.TEAL: (0, 128, 128),\n        Color.MAROON: (128, 0, 0)\n    }\n    \n    rgb1 = np.array(color_map[color1])\n    rgb2 = np.array(color_map[color2])\n    blended_rgb = (1 - factor) * rgb1 + factor * rgb2\n    # Find the closest color\n    closest_color = min(color_map.keys(), key=lambda c: np.linalg.norm(blended_rgb - np.array(color_map[c])))\n    return closest_color\n\ndef generate_input():\n    # Create a 5x5 grid with a random color in the center\n    input_grid = np.full((5, 5), Color.BLACK)\n    center_color = np.random.choice(Color.NOT_BLACK)\n    input_grid[2, 2] = center_color\n    return input_grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            9,
            9,
            9,
            0
          ],
          [
            0,
            9,
            4,
            9,
            0
          ],
          [
            0,
            9,
            9,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            5,
            6,
            5,
            0
          ],
          [
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            9,
            9,
            9,
            0
          ],
          [
            0,
            9,
            2,
            9,
            0
          ],
          [
            0,
            9,
            9,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            9,
            9,
            9,
            0
          ],
          [
            0,
            9,
            7,
            9,
            0
          ],
          [
            0,
            9,
            9,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "ea786f4a.py",
      "6d58a25d.py",
      "6cdd2623.py",
      "5c2c9af4.py"
    ],
    "problem_id": 36283
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry restoration, color mapping\n\n# description:\n# In the input you will see a grid with a symmetric pattern disrupted by randomly placed pixels that violate symmetry.\n# To create the output, you should replace the disrupting pixels with the corresponding colors from their mirrored positions, \n# effectively restoring the symmetry of the pattern.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Create an output grid that starts as a copy of the input grid\n    output_grid = np.copy(input_grid)\n    \n    # Get the dimensions of the input grid\n    n, m = input_grid.shape\n    \n    # Loop through the grid and restore symmetry\n    for i in range(n):\n        for j in range(m):\n            # Calculate mirrored position\n            mirrored_i = n - 1 - i\n            mirrored_j = m - 1 - j\n            \n            # If the current pixel is disrupting the symmetry (i.e., not matching its mirrored counterpart)\n            if (input_grid[i, j] != Color.BLACK) and (input_grid[i, j] != input_grid[mirrored_i, mirrored_j]):\n                # Replace the current pixel with its symmetric counterpart's color\n                output_grid[i, j] = input_grid[mirrored_i, mirrored_j]\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    n, m = np.random.randint(5, 8), np.random.randint(5, 8)  # Random dimensions\n    grid = np.zeros((n, m), dtype=int)\n\n    # Create a symmetric pattern\n    pattern = random_sprite(n // 2, m // 2, density=0.8, symmetry=\"not_symmetric\", color_palette=Color.NOT_BLACK)\n    \n    # Place the pattern in the top left and bottom right to ensure symmetry\n    grid[0:n//2, 0:m//2] = pattern\n    grid[n//2:n, m//2:m] = pattern[:, ::-1]  # Reflect the pattern horizontally\n\n    # Introduce some random disrupting pixels to break symmetry\n    num_disruptions = np.random.randint(1, 5)\n    for _ in range(num_disruptions):\n        x = np.random.randint(0, n)\n        y = np.random.randint(0, m)\n        grid[x, y] = np.random.choice(list(Color.NOT_BLACK))  # Random color to disrupt symmetry\n\n    return grid",
    "examples": [
      [
        [
          [
            6,
            4,
            4,
            0,
            0,
            0
          ],
          [
            6,
            7,
            4,
            0,
            0,
            0
          ],
          [
            0,
            7,
            5,
            0,
            0,
            0
          ],
          [
            2,
            0,
            0,
            4,
            4,
            6
          ],
          [
            0,
            0,
            0,
            8,
            7,
            6
          ],
          [
            0,
            0,
            0,
            1,
            7,
            2
          ]
        ],
        [
          [
            2,
            7,
            1,
            0,
            0,
            0
          ],
          [
            6,
            7,
            8,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            7,
            0
          ],
          [
            0,
            0,
            0,
            4,
            7,
            6
          ],
          [
            0,
            0,
            0,
            4,
            4,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            4,
            4,
            0,
            0,
            0
          ],
          [
            3,
            4,
            9,
            0,
            0,
            0
          ],
          [
            2,
            7,
            7,
            9,
            3,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            3,
            4,
            3
          ],
          [
            0,
            0,
            0,
            7,
            7,
            3
          ]
        ],
        [
          [
            0,
            7,
            7,
            0,
            0,
            0
          ],
          [
            3,
            4,
            3,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            7,
            0
          ],
          [
            0,
            0,
            0,
            9,
            4,
            3
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            5,
            0,
            0,
            0
          ],
          [
            2,
            7,
            4,
            0,
            0,
            0
          ],
          [
            0,
            6,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            5,
            4,
            2
          ],
          [
            0,
            0,
            0,
            4,
            7,
            2
          ],
          [
            0,
            0,
            0,
            1,
            1,
            0
          ]
        ],
        [
          [
            0,
            1,
            1,
            0,
            0,
            0
          ],
          [
            2,
            7,
            4,
            0,
            0,
            0
          ],
          [
            0,
            4,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            6,
            0
          ],
          [
            0,
            0,
            0,
            4,
            7,
            2
          ],
          [
            0,
            0,
            0,
            5,
            2,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            1,
            4,
            0,
            0,
            0
          ],
          [
            1,
            6,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            1,
            7
          ],
          [
            0,
            0,
            0,
            4,
            2,
            0
          ],
          [
            0,
            0,
            0,
            4,
            6,
            4
          ]
        ],
        [
          [
            4,
            6,
            4,
            0,
            0,
            0
          ],
          [
            0,
            2,
            4,
            0,
            0,
            0
          ],
          [
            7,
            1,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            6,
            1
          ],
          [
            0,
            0,
            0,
            4,
            1,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            5
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "6fa7a44f.py",
      "bc1d5164.py",
      "3de23699.py"
    ],
    "problem_id": 37731
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern filling, connectivity, spatial arrangement\n\n# description:\n# In the input, you will see a grid with a few scattered colored pixels forming a specific pattern. \n# The output grid should be created by filling in the blank spaces around the existing colored pixels \n# such that the entire grid forms a connected shape of the same color. The output should keep the original color \n# of the pixels while ensuring all filled pixels are connected to the existing ones.\n\ndef main(input_grid):\n    # Find the connected components of the existing colored pixels\n    objects = find_connected_components(input_grid, background=Color.BLACK, connectivity=8, monochromatic=False)\n\n    # Create an output grid initialized to the background color\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # For each connected component, fill the output grid with the color of that component\n    for obj in objects:\n        # Get the color of the first pixel (since they are connected, all pixels will be the same color)\n        color = obj[0, 0]\n        # Fill the output grid with the color\n        output_grid[np.where(obj != Color.BLACK)] = color\n\n    return output_grid\n\ndef generate_input():\n    # Create a grid of size n x m\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly choose a color for the pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Randomly generate a number of colored pixels\n    num_pixels = np.random.randint(5, 15)\n\n    # Scatter colored pixels randomly in the grid\n    for _ in range(num_pixels):\n        x, y = np.random.randint(0, n), np.random.randint(0, m)\n        grid[x, y] = color\n\n    # Ensure there is at least one pixel of the chosen color\n    if np.all(grid == Color.BLACK):\n        return generate_input()\n\n    return grid",
    "examples": [
      [
        [
          [
            8,
            8,
            8,
            0,
            8
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            8,
            8,
            0
          ],
          [
            0,
            0,
            8,
            0,
            8
          ]
        ],
        [
          [
            8,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            0,
            3,
            0,
            3
          ],
          [
            0,
            0,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            3,
            0,
            0
          ]
        ],
        [
          [
            3,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            6,
            0
          ],
          [
            6,
            6,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            6,
            0,
            0
          ],
          [
            0,
            6,
            0,
            0,
            0,
            0,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            6
          ]
        ],
        [
          [
            6,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            9,
            0,
            9,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            0,
            0,
            0
          ],
          [
            0,
            9,
            9,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "6cf79266.py",
      "a9f96cdd.py"
    ],
    "problem_id": 38050
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry, pattern recognition, color mapping\n\n# description:\n# In the input, you will see a grid with a symmetrical pattern of colors. \n# The pattern consists of a central square of colors surrounded by another layer of colors. \n# To create the output grid, you should map the central square colors to the outer layer colors in a specific way:\n# - If the central square is of color A, it will be replaced with color B in the output grid.\n# - If the outer layer is of color B, it will be replaced with color A in the output grid.\n# The output grid will maintain the same size as the input grid.\n\ndef main(input_grid):\n    # Define the colors to be mapped\n    central_color = Color.RED\n    outer_color = Color.BLUE\n\n    # Create a copy of the input grid for output\n    output_grid = np.copy(input_grid)\n    \n    # Create a mask for the central square and outer layer\n    center_mask = (output_grid == central_color)\n    outer_mask = (output_grid == outer_color)\n\n    # Replace colors according to the mapping\n    output_grid[center_mask] = outer_color\n    output_grid[outer_mask] = central_color\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random size for the grid\n    n, m = np.random.randint(5, 8), np.random.randint(5, 8)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Define the central square size\n    center_size = np.random.randint(2, min(n, m) // 2)\n\n    # Calculate positions for the central square\n    start_x = (n - center_size) // 2\n    start_y = (m - center_size) // 2\n\n    # Fill the central square with a color (e.g., red)\n    grid[start_x:start_x + center_size, start_y:start_y + center_size] = Color.RED\n\n    # Fill the outer layer with another color (e.g., blue)\n    grid[0, :] = Color.BLUE  # Top row\n    grid[-1, :] = Color.BLUE  # Bottom row\n    grid[:, 0] = Color.BLUE  # Left column\n    grid[:, -1] = Color.BLUE  # Right column\n\n    return grid",
    "examples": [
      [
        [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          [
            1,
            0,
            2,
            2,
            0,
            0,
            1
          ],
          [
            1,
            0,
            2,
            2,
            0,
            0,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ],
        [
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            0,
            1,
            1,
            0,
            0,
            2
          ],
          [
            2,
            0,
            1,
            1,
            0,
            0,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            1
          ],
          [
            1,
            0,
            2,
            2,
            0,
            1
          ],
          [
            1,
            0,
            2,
            2,
            0,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ],
        [
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            0,
            1,
            1,
            0,
            2
          ],
          [
            2,
            0,
            1,
            1,
            0,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          [
            1,
            0,
            2,
            2,
            0,
            0,
            1
          ],
          [
            1,
            0,
            2,
            2,
            0,
            0,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ],
        [
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            0,
            1,
            1,
            0,
            0,
            2
          ],
          [
            2,
            0,
            1,
            1,
            0,
            0,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            1
          ],
          [
            1,
            0,
            2,
            2,
            0,
            1
          ],
          [
            1,
            0,
            2,
            2,
            0,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            1
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ],
        [
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            0,
            1,
            1,
            0,
            2
          ],
          [
            2,
            0,
            1,
            1,
            0,
            2
          ],
          [
            2,
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "995c5fa3.py",
      "bc1d5164.py",
      "a9f96cdd.py"
    ],
    "problem_id": 38601
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# shape transformation, color change, object detection\n\n# description:\n# In the input, you will see a blue circle and a red square overlapping with each other. \n# To create the output, you should keep the shape of the blue circle and transform it into a star shape \n# by extending its points outward, while also changing the color of the overlapping area to purple.\n\ndef main(input_grid):\n    # Detect the blue circle and red square\n    blue_objects = detect_objects(grid=input_grid, colors=[Color.BLUE], monochromatic=False, connectivity=8)\n    red_objects = detect_objects(grid=input_grid, colors=[Color.RED], monochromatic=False, connectivity=8)\n\n    # Create an output grid filled with black color\n    output_grid = np.full_like(input_grid, Color.BLACK)\n\n    # Transform the blue circle to a star shape\n    for blue_obj in blue_objects:\n        blue_x, blue_y, blue_width, blue_height = bounding_box(blue_obj)\n        if blue_width > 1 and blue_height > 1:  # Ensure it's a significant shape\n            # Create a star shape pattern\n            star_shape = np.zeros((blue_height + 4, blue_width + 4), dtype=int)\n            star_shape[2, :] = Color.BLUE  # Horizontal line\n            star_shape[:, 2] = Color.BLUE  # Vertical line\n            star_shape[1, 1] = Color.BLUE\n            star_shape[1, 3] = Color.BLUE\n            star_shape[3, 1] = Color.BLUE\n            star_shape[3, 3] = Color.BLUE\n            \n            # Blit the star shape into the output grid\n            blit_sprite(output_grid, star_shape, blue_x - 2, blue_y - 2, background=Color.BLACK)\n\n    # Change the overlapping area to purple\n    for red_obj in red_objects:\n        for blue_obj in blue_objects:\n            if contact(object1=blue_obj, object2=red_obj):\n                overlap_x, overlap_y, _, _ = bounding_box(red_obj)\n                output_grid[overlap_x:overlap_x + red_obj.shape[0], overlap_y:overlap_y + red_obj.shape[1]] = Color.PINK\n\n    return output_grid\n\ndef generate_input():\n    # Create a black grid\n    n, m = 9, 9\n    grid = np.zeros((n, m), dtype=int)\n\n    # Generate a blue circle sprite\n    radius = 2\n    circle = np.zeros((radius * 2 + 1, radius * 2 + 1), dtype=int)\n    y, x = np.ogrid[-radius:radius + 1, -radius:radius + 1]\n    mask = x**2 + y**2 <= radius**2\n    circle[mask] = Color.BLUE\n\n    # Place the blue circle in a random location\n    x_pos, y_pos = random_free_location_for_sprite(grid, circle)\n    blit_sprite(grid, circle, x_pos, y_pos)\n\n    # Generate a red square sprite\n    red_square = np.full((4, 4), Color.RED, dtype=int)\n\n    # Place the red square in a random location\n    x_square, y_square = random_free_location_for_sprite(grid, red_square)\n    blit_sprite(grid, red_square, x_square, y_square)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2
          ],
          [
            0,
            0,
            1,
            0,
            0,
            2,
            2,
            2,
            2
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2,
            0
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
          ],
          [
            2,
            2,
            2,
            2,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            2,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            2,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            2,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "1fad071e.py",
      "1caeab9d.py",
      "aedd82e4.py",
      "6b9890af.py"
    ],
    "problem_id": 38704
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern recognition, grid tiling, color transformation\n\n# description:\n# In the input grid, there is a central pattern surrounded by a border of black pixels. \n# The central pattern consists of colored pixels that are repeated horizontally and vertically in a tiled manner.\n# To create the output grid, detect the central pattern, and then fill the entire grid by repeating this pattern \n# such that the output grid is of the same dimensions as the input grid but filled with the detected pattern.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Detect the central pattern\n    objects = detect_objects(input_grid, colors=Color.NOT_BLACK, monochromatic=False, connectivity=8)\n    \n    # Assuming there is exactly one central object which is the pattern\n    central_pattern = objects[0]\n\n    # Find the bounding box of the central pattern\n    x, y, w, h = bounding_box(central_pattern)\n\n    # Crop the pattern\n    pattern = crop(central_pattern)\n\n    # Create the output grid of the same size as the input grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Fill the output grid with the detected pattern by tiling\n    for i in range(0, output_grid.shape[0], pattern.shape[0]):\n        for j in range(0, output_grid.shape[1], pattern.shape[1]):\n            output_grid[i:i + pattern.shape[0], j:j + pattern.shape[1]] = pattern\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly generate the size of the grid\n    n = np.random.randint(8, 12)  # Height of the grid\n    m = np.random.randint(8, 12)  # Width of the grid\n    grid = np.zeros((n, m), dtype=int)\n\n    # Define the size of the central pattern\n    pattern_height = np.random.randint(3, 5)\n    pattern_width = np.random.randint(3, 5)\n\n    # Generate a random pattern\n    pattern = random_sprite(pattern_height, pattern_width, density=0.5, color_palette=list(Color.NOT_BLACK))\n\n    # Place the pattern in the center of the grid, surrounded by black pixels\n    start_x = (n - pattern_height) // 2\n    start_y = (m - pattern_width) // 2\n    grid[start_x:start_x + pattern_height, start_y:start_y + pattern_width] = pattern\n\n    # Return the generated input grid\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            9,
            1,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            1,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            1,
            8,
            0,
            0
          ],
          [
            0,
            0,
            6,
            9,
            1,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            9,
            1,
            8,
            6,
            9,
            1,
            8
          ],
          [
            0,
            5,
            1,
            8,
            0,
            5,
            1,
            8
          ],
          [
            0,
            5,
            1,
            8,
            0,
            5,
            1,
            8
          ],
          [
            6,
            9,
            1,
            8,
            6,
            9,
            1,
            8
          ],
          [
            6,
            9,
            1,
            8,
            6,
            9,
            1,
            8
          ],
          [
            0,
            5,
            1,
            8,
            0,
            5,
            1,
            8
          ],
          [
            0,
            5,
            1,
            8,
            0,
            5,
            1,
            8
          ],
          [
            6,
            9,
            1,
            8,
            6,
            9,
            1,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            0,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            1,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            0,
            9,
            9,
            0,
            9,
            9,
            0,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            6,
            1,
            6,
            6,
            1,
            6,
            6,
            1,
            6
          ],
          [
            6,
            0,
            6,
            6,
            0,
            6,
            6,
            0,
            6
          ],
          [
            9,
            0,
            9,
            9,
            0,
            9,
            9,
            0,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9
          ],
          [
            6,
            1,
            6,
            6,
            1,
            6,
            6,
            1,
            6
          ],
          [
            6,
            0,
            6,
            6,
            0,
            6,
            6,
            0,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            7,
            0,
            0,
            7,
            0,
            0,
            7,
            0,
            0
          ],
          [
            2,
            0,
            0,
            2,
            0,
            0,
            2,
            0,
            0
          ],
          [
            2,
            0,
            0,
            2,
            0,
            0,
            2,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            7,
            0,
            0,
            7,
            0,
            0,
            7,
            0,
            0
          ],
          [
            2,
            0,
            0,
            2,
            0,
            0,
            2,
            0,
            0
          ],
          [
            2,
            0,
            0,
            2,
            0,
            0,
            2,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            6,
            6,
            8,
            0,
            0
          ],
          [
            0,
            0,
            8,
            6,
            6,
            8,
            0,
            0
          ],
          [
            0,
            0,
            8,
            6,
            6,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            6,
            6,
            8,
            8,
            6,
            6,
            8
          ],
          [
            8,
            6,
            6,
            8,
            8,
            6,
            6,
            8
          ],
          [
            8,
            6,
            6,
            8,
            8,
            6,
            6,
            8
          ],
          [
            0,
            7,
            7,
            0,
            0,
            7,
            7,
            0
          ],
          [
            8,
            6,
            6,
            8,
            8,
            6,
            6,
            8
          ],
          [
            8,
            6,
            6,
            8,
            8,
            6,
            6,
            8
          ],
          [
            8,
            6,
            6,
            8,
            8,
            6,
            6,
            8
          ],
          [
            0,
            7,
            7,
            0,
            0,
            7,
            7,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "bd4472b8.py",
      "995c5fa3.py"
    ],
    "problem_id": 39007
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern expansion, symmetry\n\n# description:\n# In the input, you will see a small symmetric pattern of colored pixels in the center of a grid. \n# To create the output, expand the pattern symmetrically outward until the entire grid is filled, \n# maintaining the same colors and structure of the original pattern.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the central pattern\n    objects = find_connected_components(input_grid, background=Color.BLACK, monochromatic=True)\n    assert len(objects) == 1  # Ensure there is only one central pattern\n    \n    central_pattern = objects[0]\n    # Get the bounding box of the central pattern\n    x, y, width, height = bounding_box(central_pattern)\n    \n    # Determine the maximum dimension for the output grid\n    output_dim = max(width, height) * 2 - 1  # Expand the pattern size\n    output_grid = np.full((output_dim, output_dim), Color.BLACK)\n    \n    # Calculate the center of the output grid\n    center_x = output_dim // 2\n    center_y = output_dim // 2\n    \n    # Place the central pattern in the output grid\n    # Compute the offset to place the pattern centered\n    offset_x = center_x - (width // 2)\n    offset_y = center_y - (height // 2)\n    \n    # Copy the central pattern into the output grid\n    blit_sprite(output_grid, central_pattern, x=offset_x, y=offset_y, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly generate the size of the central pattern\n    n = np.random.randint(2, 5)\n    m = np.random.randint(2, 5)\n\n    # Create a random color palette excluding black\n    color_palette = np.random.choice(list(Color.NOT_BLACK), size=4, replace=False)\n\n    # Generate a random symmetric pattern\n    pattern = random_sprite(n, m, density=0.5, symmetry='not_symmetric', color_palette=color_palette)\n\n    # Create a larger grid to place the pattern in the center\n    grid_size = max(n, m) + 2  # Leave space around the pattern\n    grid = np.full((grid_size, grid_size), Color.BLACK)\n\n    # Calculate position to place the pattern in the center\n    pos_x = (grid_size - n) // 2\n    pos_y = (grid_size - m) // 2\n\n    # Place the pattern in the center of the grid\n    grid = blit_sprite(grid=grid, sprite=pattern, x=pos_x, y=pos_y)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0
          ],
          [
            0,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5
          ],
          [
            0,
            0,
            5,
            5,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0
          ],
          [
            0,
            1,
            0
          ],
          [
            0,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "6fa7a44f.py",
      "a9f96cdd.py"
    ],
    "problem_id": 39376
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, color inversion\n\n# description:\n# In the input, you will see a grid with a symmetric pattern of colored pixels. \n# To make the output, check if the pattern is perfectly symmetric. \n# If it is, invert the colors of the entire grid; if not, leave the grid unchanged.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Check for symmetry along both the x and y axes\n    vertical_symmetry = np.all(input_grid == input_grid[:, ::-1])\n    horizontal_symmetry = np.all(input_grid == input_grid[::-1, :])\n    \n    # If the input grid is symmetric both horizontally and vertically, invert the colors\n    if vertical_symmetry and horizontal_symmetry:\n        inverted_grid = np.vectorize(lambda x: Color.BLACK if x != Color.BLACK else Color.YELLOW)(input_grid)\n        return inverted_grid\n    else:\n        # If not symmetric, return the grid unchanged\n        return input_grid\n\ndef generate_input() -> np.ndarray:\n    n, m = np.random.randint(3, 6), np.random.randint(3, 6)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly decide if we want to create a symmetric grid or not\n    has_symmetry = np.random.choice([True, False])\n\n    if has_symmetry:\n        # Generate a symmetric pattern\n        density = np.random.uniform(0.3, 0.5)\n        grid = random_sprite(n, m, density=density, symmetry='horizontal', color_palette=list(Color.NOT_BLACK))\n        grid = np.maximum(grid, grid[:, ::-1])  # Ensure vertical symmetry as well\n    else:\n        # Create a non-symmetric pattern\n        grid = random_sprite(n, m, density=0.4, color_palette=list(Color.NOT_BLACK), symmetry='not_symmetric')\n\n    return grid",
    "examples": [
      [
        [
          [
            6,
            7,
            6,
            7,
            6
          ],
          [
            6,
            9,
            0,
            9,
            6
          ],
          [
            0,
            4,
            0,
            4,
            0
          ],
          [
            6,
            9,
            0,
            9,
            6
          ],
          [
            6,
            7,
            6,
            7,
            6
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0
          ],
          [
            4,
            0,
            4,
            0,
            4
          ],
          [
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            1,
            1,
            3
          ],
          [
            4,
            4,
            4,
            4
          ],
          [
            0,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4
          ],
          [
            3,
            1,
            1,
            3
          ]
        ],
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            2,
            6,
            7,
            6,
            2
          ],
          [
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            0,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8
          ],
          [
            2,
            6,
            7,
            6,
            2
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            2,
            0,
            2
          ],
          [
            2,
            2,
            2
          ],
          [
            6,
            6,
            6
          ],
          [
            2,
            2,
            2
          ],
          [
            2,
            0,
            2
          ]
        ],
        [
          [
            0,
            4,
            0
          ],
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0
          ],
          [
            0,
            4,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "bc1d5164.py",
      "3de23699.py",
      "6fa7a44f.py"
    ],
    "problem_id": 40693
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry, color blending, transformation\n\n# description:\n# In the input, you will see a pattern of colors arranged in a circular manner.\n# To make the output, create a new pattern by rotating this pattern 90 degrees clockwise, \n# and blend the colors between the original and the rotated pattern.\n\ndef main(input_grid):\n    # Get the dimensions of the input grid\n    n, m = input_grid.shape\n\n    # Create an empty output grid of the same size\n    output_grid = np.zeros((n, m), dtype=int)\n\n    # Rotate the input grid 90 degrees clockwise\n    rotated_grid = np.rot90(input_grid, -1)  # -1 for clockwise rotation\n\n    # Blend the original and rotated patterns\n    for i in range(n):\n        for j in range(m):\n            original_color = input_grid[i, j]\n            rotated_color = rotated_grid[i, j]\n\n            # If both colors are not black, blend them\n            if original_color != Color.BLACK and rotated_color != Color.BLACK:\n                output_grid[i, j] = original_color  # Replace with original color if both colors are valid\n            elif original_color != Color.BLACK:\n                output_grid[i, j] = original_color  # Keep original color\n            elif rotated_color != Color.BLACK:\n                output_grid[i, j] = rotated_color  # Keep rotated color\n            else:\n                output_grid[i, j] = Color.BLACK  # Keep black if no colors are present\n\n    return output_grid\n\ndef generate_input():\n    # Create a grid of random size\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Generate a circular pattern of colors\n    center_x, center_y = n // 2, m // 2\n    radius = min(center_x, center_y) - 1\n    \n    # Create a circular pattern with random colors\n    for i in range(n):\n        for j in range(m):\n            if (i - center_x)**2 + (j - center_y)**2 <= radius**2:\n                grid[i, j] = np.random.choice(list(Color.NOT_BLACK))\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            8,
            5,
            6,
            7,
            0
          ],
          [
            0,
            0,
            9,
            3,
            3,
            7,
            7,
            0
          ],
          [
            0,
            9,
            7,
            5,
            7,
            1,
            6,
            5
          ],
          [
            0,
            0,
            8,
            7,
            4,
            8,
            2,
            0
          ],
          [
            0,
            0,
            7,
            7,
            3,
            7,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            6,
            0,
            0,
            0
          ],
          [
            0,
            7,
            9,
            8,
            5,
            6,
            7,
            0
          ],
          [
            0,
            7,
            9,
            3,
            3,
            7,
            7,
            0
          ],
          [
            8,
            9,
            7,
            5,
            7,
            1,
            6,
            5
          ],
          [
            0,
            7,
            8,
            7,
            4,
            8,
            2,
            0
          ],
          [
            0,
            1,
            7,
            7,
            3,
            7,
            1,
            0
          ],
          [
            0,
            0,
            0,
            5,
            8,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            1,
            2,
            9,
            0
          ],
          [
            0,
            2,
            3,
            9,
            3,
            3
          ],
          [
            0,
            0,
            5,
            3,
            6,
            0
          ],
          [
            0,
            0,
            0,
            2,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            8,
            0,
            0
          ],
          [
            0,
            5,
            1,
            2,
            9,
            0
          ],
          [
            2,
            2,
            3,
            9,
            3,
            3
          ],
          [
            0,
            6,
            5,
            3,
            6,
            0
          ],
          [
            0,
            0,
            3,
            2,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            5,
            4,
            8,
            0
          ],
          [
            0,
            3,
            7,
            8,
            6,
            4
          ],
          [
            0,
            0,
            4,
            6,
            5,
            0
          ],
          [
            0,
            0,
            0,
            9,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            4,
            0,
            0
          ],
          [
            0,
            4,
            5,
            4,
            8,
            0
          ],
          [
            9,
            3,
            7,
            8,
            6,
            4
          ],
          [
            0,
            5,
            4,
            6,
            5,
            0
          ],
          [
            0,
            0,
            4,
            9,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            1,
            2,
            6,
            0
          ],
          [
            0,
            0,
            6,
            4,
            9,
            9,
            7,
            0
          ],
          [
            0,
            2,
            7,
            8,
            2,
            3,
            6,
            2
          ],
          [
            0,
            0,
            6,
            5,
            9,
            9,
            9,
            0
          ],
          [
            0,
            0,
            8,
            9,
            3,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            6,
            0,
            0,
            0
          ],
          [
            0,
            8,
            7,
            7,
            1,
            2,
            6,
            0
          ],
          [
            0,
            9,
            6,
            4,
            9,
            9,
            7,
            0
          ],
          [
            9,
            2,
            7,
            8,
            2,
            3,
            6,
            2
          ],
          [
            0,
            6,
            6,
            5,
            9,
            9,
            9,
            0
          ],
          [
            0,
            6,
            8,
            9,
            3,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            2,
            9,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "3345333e.py",
      "6fa7a44f.py",
      "11852cab.py",
      "aabf363d.py"
    ],
    "problem_id": 41402
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, color mapping, diamond shape detection\n\n# description:\n# In the input grid, you will see a colored diamond shape that may be rotated. \n# To make the output grid, rotate the diamond to align it perfectly with the grid and change its colors according to the following mapping: \n# orange -> blue, blue -> green, yellow -> pink, red -> teal.\n\ndef main(input_grid):\n    # Detect the diamond shape in the input grid\n    diamond_objects = detect_objects(grid=input_grid, colors=[Color.ORANGE, Color.BLUE, Color.YELLOW, Color.RED], monochromatic=False, connectivity=8)\n    \n    if len(diamond_objects) != 1:\n        raise ValueError(\"There should be exactly one diamond object in the input grid.\")\n    \n    # Get the diamond object\n    diamond = diamond_objects[0]\n    \n    # Find the bounding box of the diamond\n    x, y, width, height = bounding_box(diamond, background=Color.BLACK)\n    \n    # Crop the diamond for processing\n    cropped_diamond = crop(diamond, background=Color.BLACK)\n    \n    # Rotate the diamond to align it with the grid\n    # Here we assume the diamond is already aligned based on its bounding box\n    # No actual rotation is done since we expect the input to be already aligned\n    \n    # Create output grid and map the colors\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n    color_map = {Color.ORANGE: Color.BLUE,\n                 Color.BLUE: Color.GREEN,\n                 Color.YELLOW: Color.PINK,\n                 Color.RED: Color.TEAL}\n    \n    # Change colors according to the mapping\n    for i in range(cropped_diamond.shape[0]):\n        for j in range(cropped_diamond.shape[1]):\n            current_color = cropped_diamond[i, j]\n            if current_color in color_map:\n                output_grid[y + i - height // 2, x + j - width // 2] = color_map[current_color]\n            else:\n                output_grid[y + i - height // 2, x + j - width // 2] = current_color\n                \n    return output_grid\n\ndef generate_input():\n    # Create an empty grid\n    grid_size = 5\n    grid = np.full((grid_size, grid_size), Color.BLACK)\n    \n    # Define a diamond shape pattern\n    diamond_shape = np.array([[Color.BLACK, Color.YELLOW, Color.BLACK],\n                               [Color.ORANGE, Color.RED, Color.ORANGE],\n                               [Color.BLACK, Color.BLUE, Color.BLACK]])\n    \n    # Place the diamond shape in the center of the grid\n    start_x = (grid_size - diamond_shape.shape[1]) // 2\n    start_y = (grid_size - diamond_shape.shape[0]) // 2\n    \n    grid[start_y:start_y + diamond_shape.shape[0], start_x:start_x + diamond_shape.shape[1]] = diamond_shape\n    \n    # Randomly rotate the grid to make it more interesting\n    if np.random.choice([True, False]):\n        grid = np.rot90(grid, k=np.random.randint(1, 4))  # Rotate 90, 180, or 270 degrees\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            7,
            2,
            7,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            6,
            0,
            0,
            0
          ],
          [
            1,
            8,
            1,
            0,
            0
          ],
          [
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            7,
            2,
            7,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            3,
            0,
            0,
            0
          ],
          [
            1,
            8,
            1,
            0,
            0
          ],
          [
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            0,
            0
          ],
          [
            0,
            1,
            2,
            4,
            0
          ],
          [
            0,
            0,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            1,
            0,
            0,
            0
          ],
          [
            3,
            8,
            6,
            0,
            0
          ],
          [
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            0,
            0
          ],
          [
            0,
            4,
            2,
            1,
            0
          ],
          [
            0,
            0,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            1,
            0,
            0,
            0
          ],
          [
            6,
            8,
            3,
            0,
            0
          ],
          [
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "0d3d703e.py",
      "a9f96cdd.py",
      "995c5fa3.py",
      "8e1813be.py"
    ],
    "problem_id": 41906
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, filling pattern\n\n# description:\n# In the input, you will see a 4x4 grid with a distinct L-shaped pattern in it. \n# To make the output, rotate the entire grid 90 degrees clockwise, \n# and then fill in the empty spaces created by the rotation with the color of the L-shaped pattern.\n\ndef main(input_grid):\n    # Define the colors\n    b = Color.BLACK\n    l_shape_color = Color.RED  # Example color for the L-shape\n\n    # Detect the L-shaped pattern in the input grid\n    l_shape = detect_objects(grid=input_grid, colors=[l_shape_color], monochromatic=True, connectivity=8)\n    \n    if len(l_shape) == 0:\n        raise ValueError(\"No L-shaped pattern found in the input grid.\")\n\n    # Extract the first detected L-shape\n    l_shape_obj = l_shape[0]\n    l_shape_sprite = crop(l_shape_obj, background=b)\n    \n    # Rotate the input grid 90 degrees clockwise\n    rotated_grid = np.rot90(input_grid, -1)\n\n    # Get the shape of the rotated grid\n    n, m = rotated_grid.shape\n\n    # Create a new output grid filled with the background color (black)\n    output_grid = np.full((n, m), b)\n\n    # Fill the output grid with the L-shaped pattern color in empty spaces\n    for i in range(n):\n        for j in range(m):\n            if rotated_grid[i, j] == b:\n                output_grid[i, j] = l_shape_color\n\n    return output_grid\n\ndef generate_input():\n    # Create a 4x4 grid with a black background\n    grid = np.full((4, 4), Color.BLACK)\n\n    # Define the L-shaped pattern\n    l_shape = np.array([[Color.RED, Color.RED, Color.BLACK, Color.BLACK],\n                        [Color.RED, Color.BLACK, Color.BLACK, Color.BLACK],\n                        [Color.RED, Color.BLACK, Color.BLACK, Color.BLACK],\n                        [Color.BLACK, Color.BLACK, Color.BLACK, Color.BLACK]])\n\n    # Randomly place the L-shaped pattern in the grid\n    # Choosing a random position for the L-shape\n    x_offset = np.random.randint(0, 2)  # To ensure it fits in the grid\n    y_offset = np.random.randint(0, 2)  # To ensure it fits in the grid\n\n    for i in range(4):\n        for j in range(4):\n            if (0 <= i + x_offset < 4) and (0 <= j + y_offset < 4):\n                grid[i + x_offset, j + y_offset] = l_shape[i, j]\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            0,
            0
          ],
          [
            0,
            2,
            0,
            0
          ]
        ],
        [
          [
            2,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            0,
            0
          ],
          [
            0,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            2,
            2,
            2,
            2
          ],
          [
            2,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            0,
            0
          ],
          [
            2,
            0,
            0,
            0
          ],
          [
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            2,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            0,
            0
          ],
          [
            2,
            0,
            0,
            0
          ],
          [
            2,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2
          ]
        ]
      ]
    ],
    "seeds": [
      "995c5fa3.py",
      "bc1d5164.py",
      "ff28f65a.py",
      "8e1813be.py"
    ],
    "problem_id": 43671
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color filling, symmetry detection\n\n# description:\n# In the input, you will see a grid with several colored pixels arranged in a symmetric pattern. \n# However, some of the pixels are missing (represented by black pixels). \n# To create the output, identify the symmetric areas and fill in the missing sections \n# with the appropriate color to complete the symmetry. \n# The symmetry can be either horizontal or vertical.\n\ndef main(input_grid):\n    output_grid = input_grid.copy()\n\n    # Detect horizontal symmetry\n    sym_horizontal = detect_rotational_symmetry(input_grid, ignore_colors=[Color.BLACK])\n    \n    # If horizontal symmetry is found, fill in black pixels with the appropriate color\n    if sym_horizontal:\n        for x in range(input_grid.shape[0]):\n            for y in range(input_grid.shape[1]):\n                if input_grid[x, y] == Color.BLACK:\n                    rotated_x, rotated_y = sym_horizontal.apply(x, y, iters=2)  # 180 degrees\n                    if output_grid[rotated_x, rotated_y] != Color.BLACK:\n                        output_grid[x, y] = output_grid[rotated_x, rotated_y]\n\n    # Detect vertical symmetry\n    sym_vertical = detect_rotational_symmetry(np.transpose(input_grid), ignore_colors=[Color.BLACK])\n    \n    # If vertical symmetry is found, fill in black pixels with the appropriate color\n    if sym_vertical:\n        for x in range(input_grid.shape[0]):\n            for y in range(input_grid.shape[1]):\n                if input_grid[x, y] == Color.BLACK:\n                    rotated_x, rotated_y = sym_vertical.apply(y, x, iters=2)  # 180 degrees after transpose\n                    if output_grid[rotated_x, rotated_y] != Color.BLACK:\n                        output_grid[x, y] = output_grid[rotated_x, rotated_y]\n\n    return output_grid\n\ndef generate_input():\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Create a random symmetric pattern with some missing pixels\n    color_palette = list(Color.NOT_BLACK)\n    central_color = np.random.choice(color_palette)\n\n    # Create a simple symmetric pattern\n    grid[n//2, m//2] = central_color  # Center pixel\n    grid[n//2-1, m//2] = central_color\n    grid[n//2+1, m//2] = central_color\n    grid[n//2, m//2-1] = central_color\n    grid[n//2, m//2+1] = central_color\n    grid[n//2-1, m//2-1] = central_color\n    grid[n//2-1, m//2+1] = central_color\n    grid[n//2+1, m//2-1] = central_color\n    grid[n//2+1, m//2+1] = central_color\n\n    # Randomly remove some pixels to create missing areas\n    for _ in range(int(n * m * 0.3)):  # Remove approximately 30% of pixels\n        x, y = np.random.randint(0, n), np.random.randint(0, m)\n        grid[x, y] = Color.BLACK\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "11852cab.py",
      "bc1d5164.py",
      "0ca9ddb6.py"
    ],
    "problem_id": 44801
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color expansion, region detection\n\n# description:\n# In the input, you will see a grid with colored regions surrounded by black pixels. \n# To make the output, expand each colored region into the surrounding black pixels, filling them with the color of the region.\n# Each region will expand until it hits another color or the edge of the grid.\n\ndef main(input_grid):\n    # Find connected components which are colored regions\n    colored_regions = detect_objects(grid=input_grid, monochromatic=False, background=Color.BLACK, connectivity=8)\n    \n    # Create an output grid initialized to black\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Expand each colored region\n    for region in colored_regions:\n        # Get the color of the region\n        color = region[0, 0]  # Assuming all pixels in the region have the same color\n        # Get the bounding box of the region\n        x, y, width, height = bounding_box(region)\n        \n        # Expand the region in all directions until hitting another color or the edge of the grid\n        for i in range(max(0, x - 1), min(input_grid.shape[0], x + height + 1)):\n            for j in range(max(0, y - 1), min(input_grid.shape[1], y + width + 1)):\n                # If the current position is black, fill it with the region's color\n                if output_grid[i, j] == Color.BLACK:\n                    output_grid[i, j] = color\n    \n    return output_grid\n\ndef generate_input():\n    # Create a grid size\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)  # Start with a black grid\n\n    # Randomly create a few colored regions\n    num_regions = np.random.randint(1, 4)  # Number of regions to create\n    for _ in range(num_regions):\n        # Random size for the colored region\n        region_height = np.random.randint(2, 4)\n        region_width = np.random.randint(2, 4)\n        color = np.random.choice(list(Color.NOT_BLACK))  # Choose a random color\n        \n        # Random position to place the region\n        start_x = np.random.randint(0, n - region_height)\n        start_y = np.random.randint(0, m - region_width)\n\n        # Fill the region in the grid\n        for i in range(region_height):\n            for j in range(region_width):\n                grid[start_x + i, start_y + j] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            2,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            6,
            6,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            2,
            2,
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            0,
            2,
            2,
            0
          ],
          [
            2,
            2,
            0,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            3,
            3,
            3,
            0
          ],
          [
            3,
            3,
            3,
            3,
            3,
            0
          ],
          [
            3,
            3,
            3,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            6,
            6,
            0,
            0
          ],
          [
            6,
            6,
            6,
            0,
            0
          ],
          [
            6,
            7,
            7,
            7,
            0
          ],
          [
            0,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "8e1813be.py",
      "44f52bb0.py"
    ],
    "problem_id": 46641
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern recognition, color transformation\n\n# description:\n# The input is a grid where specific colors form a distinct pattern in the center. \n# To create the output, each color in the center pattern will be replaced by its complementary color, \n# and the output grid will be the same size as the input grid, but with the background color set to black.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Initialize output grid with black background\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Define a color complement mapping\n    color_complement = {\n        Color.RED: Color.BLUE,\n        Color.GREEN: Color.TEAL,\n        Color.BLUE: Color.YELLOW,\n        Color.YELLOW: Color.BLUE,\n        Color.BLUE: Color.RED,\n        Color.TEAL: Color.GREEN,\n        Color.BLACK: Color.TEAL,\n        Color.TEAL: Color.BLACK,\n        Color.ORANGE: Color.TEAL,\n        Color.TEAL: Color.ORANGE,\n        Color.PINK: Color.GREY,\n        Color.GREY: Color.PINK,\n        Color.MAROON: Color.ORANGE,\n        Color.ORANGE: Color.MAROON\n    }\n\n    # Iterate through the input grid and apply color transformation\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            color = input_grid[i, j]\n            if color in color_complement:\n                output_grid[i, j] = color_complement[color]\n    \n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Random dimensions for the grid\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n\n    # Create an empty grid\n    grid = np.full((n, m), Color.BLACK)\n\n    # Define a pattern size\n    pattern_size = np.random.randint(3, min(n, m) // 2)\n\n    # Select a random color for the center pattern\n    center_color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Place a pattern in the center of the grid\n    start_x, start_y = (n - pattern_size) // 2, (m - pattern_size) // 2\n    for i in range(start_x, start_x + pattern_size):\n        for j in range(start_y, start_y + pattern_size):\n            grid[i, j] = center_color\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            5,
            5,
            5,
            8,
            8,
            8
          ],
          [
            8,
            8,
            5,
            5,
            5,
            8,
            8,
            8
          ],
          [
            8,
            8,
            5,
            5,
            5,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            5,
            5,
            5,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            5,
            5,
            5,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            5,
            5,
            5,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            1,
            1,
            1,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            1,
            1,
            1,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            1,
            1,
            1,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            7,
            7,
            7,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            7,
            7,
            7,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            7,
            7,
            7,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ]
    ],
    "seeds": [
      "0d3d703e.py",
      "bc1d5164.py",
      "bd4472b8.py",
      "3de23699.py"
    ],
    "problem_id": 46710
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, reflection, color transformation\n\n# description:\n# In the input, you will see a pattern of colored pixels arranged in a grid. \n# The pattern may or may not be symmetric around the horizontal axis. \n# If it is symmetric, reflect the pattern across the vertical axis to create the output. \n# If it is not symmetric, return the input pattern unchanged.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Check for horizontal symmetry\n    is_symmetric = np.array_equal(input_grid, input_grid[::-1, :])\n\n    if is_symmetric:\n        # If symmetric, reflect the pattern across the vertical axis\n        output_grid = input_grid[:, ::-1]\n    else:\n        # If not symmetric, return the input unchanged\n        output_grid = input_grid\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a random grid size\n    n, m = np.random.randint(3, 8), np.random.randint(3, 8)\n\n    # Randomly choose a density for the sprite\n    density = np.random.uniform(0.3, 0.7)\n\n    # Generate a random sprite which may or may not have horizontal symmetry\n    symmetry_type = np.random.choice(['symmetric', 'not_symmetric'])\n    if symmetry_type == 'symmetric':\n        # Create a symmetric pattern\n        half_height = n // 2\n        top_half = random_sprite(half_height, m, density=density, symmetry='horizontal')\n        bottom_half = top_half[::-1, :]  # Reflect to create symmetry\n        grid = np.vstack((top_half, bottom_half))\n    else:\n        # Create a non-symmetric pattern\n        grid = random_sprite(n, m, density=density, symmetry='not_symmetric')\n\n    return grid",
    "examples": [
      [
        [
          [
            1,
            0,
            0,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            0,
            0,
            1,
            1,
            1
          ],
          [
            1,
            0,
            0,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            0,
            0,
            1,
            1,
            1
          ]
        ],
        [
          [
            1,
            1,
            1,
            0,
            0,
            1
          ],
          [
            0,
            0,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            0,
            0,
            1
          ],
          [
            1,
            1,
            1,
            0,
            0,
            1
          ],
          [
            0,
            0,
            1,
            1,
            1,
            1
          ],
          [
            1,
            1,
            1,
            0,
            0,
            1
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            0,
            4,
            4,
            4,
            4
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            0,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            0,
            4,
            4,
            4,
            4
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            0,
            4,
            4,
            4,
            4
          ]
        ],
        [
          [
            4,
            4,
            4,
            4,
            0,
            4,
            4
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            0,
            4,
            4
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0,
            4,
            4
          ]
        ]
      ],
      [
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            8,
            8,
            0,
            0,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            8,
            8,
            0,
            0,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            0,
            0,
            8,
            8,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            0,
            0,
            8,
            8,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            3,
            1
          ],
          [
            0,
            0,
            7,
            5
          ],
          [
            1,
            1,
            3,
            1
          ],
          [
            1,
            1,
            3,
            1
          ],
          [
            0,
            0,
            7,
            5
          ],
          [
            1,
            1,
            3,
            1
          ]
        ],
        [
          [
            1,
            3,
            1,
            1
          ],
          [
            5,
            7,
            0,
            0
          ],
          [
            1,
            3,
            1,
            1
          ],
          [
            1,
            3,
            1,
            1
          ],
          [
            5,
            7,
            0,
            0
          ],
          [
            1,
            3,
            1,
            1
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "f9012d9b.py",
      "3de23699.py",
      "0dfd9992.py"
    ],
    "problem_id": 48276
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, pattern recognition\n\n# description:\n# In the input, you will see a grid containing a pattern that has been rotated 90 degrees. \n# To make the output, recognize the original pattern and rotate it back to its original orientation, creating a new grid with the correctly oriented pattern.\n\ndef main(input_grid):\n    # Find connected components in the input grid\n    components = find_connected_components(input_grid, monochromatic=True, background=Color.BLACK)\n\n    # Assuming there's only one component (the rotated pattern)\n    if len(components) != 1:\n        raise ValueError(\"Expected exactly one connected component in the input grid.\")\n\n    # Crop the component to extract the pattern\n    rotated_pattern = crop(components[0], background=Color.BLACK)\n\n    # Rotate the pattern back by 90 degrees counterclockwise\n    original_pattern = np.rot90(rotated_pattern, k=-1)\n\n    # Create a new grid to hold the output\n    output_grid = np.full((original_pattern.shape[0], original_pattern.shape[1]), Color.BLACK)\n\n    # Blit the original pattern onto the output grid\n    blit_sprite(output_grid, original_pattern, x=0, y=0)\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random pattern\n    pattern_size = np.random.randint(3, 7)\n    pattern = random_sprite(n=pattern_size, m=pattern_size, density=0.5, color_palette=Color.NOT_BLACK)\n\n    # Rotate the pattern 90 degrees clockwise\n    rotated_pattern = np.rot90(pattern)\n\n    # Create a grid large enough to hold the rotated pattern\n    grid_size = max(rotated_pattern.shape) + 2  # Add some border space\n    grid = np.full((grid_size, grid_size), Color.BLACK)\n\n    # Randomly place the rotated pattern in the grid\n    x_pos, y_pos = random_free_location_for_sprite(grid, rotated_pattern, background=Color.BLACK)\n    grid = blit_sprite(grid, rotated_pattern, x=x_pos, y=y_pos)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            1,
            0
          ],
          [
            1,
            1,
            1
          ],
          [
            0,
            1,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            1,
            0
          ],
          [
            1,
            1,
            1
          ],
          [
            0,
            1,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            1
          ],
          [
            0,
            0,
            1
          ],
          [
            0,
            0,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1
          ],
          [
            0,
            0,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            1
          ],
          [
            1,
            1,
            1
          ],
          [
            0,
            1,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6b9890af.py",
      "6fa7a44f.py",
      "3de23699.py"
    ],
    "problem_id": 48411
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# radial symmetry, color extraction\n\n# description:\n# In the input, you will see a grid containing a central colored pixel surrounded by several colored pixels in a circular formation.\n# To create the output, extract the colors from the surrounding pixels and arrange them in a radial pattern emanating from the center pixel,\n# ensuring they are in the same order as they appear around the center.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Copy the input to create the output\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Find the center pixel (assuming it is surrounded by others)\n    center_x, center_y = np.argwhere(input_grid == Color.BLACK)[0]\n    \n    # Extract colors in a radial pattern around the center pixel\n    surrounding_colors = []\n    \n    # Define the relative positions for the surrounding pixels\n    offsets = [\n        (-1, 0), (1, 0), (0, -1), (0, 1),\n        (-1, -1), (-1, 1), (1, -1), (1, 1)\n    ]\n    \n    for dx, dy in offsets:\n        x, y = center_x + dx, center_y + dy\n        if 0 <= x < input_grid.shape[0] and 0 <= y < input_grid.shape[1]:\n            surrounding_colors.append(input_grid[x, y])\n\n    # Place the surrounding colors in a radial pattern around the center pixel\n    colors_ordered = surrounding_colors  # they are already in the order we want\n    radial_positions = [\n        (center_x - 1, center_y),  # top\n        (center_x + 1, center_y),  # bottom\n        (center_x, center_y - 1),  # left\n        (center_x, center_y + 1),  # right\n        (center_x - 1, center_y - 1),  # top-left\n        (center_x - 1, center_y + 1),  # top-right\n        (center_x + 1, center_y - 1),  # bottom-left\n        (center_x + 1, center_y + 1)   # bottom-right\n    ]\n\n    for (x, y), color in zip(radial_positions, colors_ordered):\n        if 0 <= x < output_grid.shape[0] and 0 <= y < output_grid.shape[1]:\n            output_grid[x, y] = color\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a grid of random size\n    n, m = np.random.randint(5, 12), np.random.randint(5, 12)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Choose a color for the center pixel\n    center_color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Place the center pixel in the grid\n    center_x, center_y = np.random.randint(1, n - 1), np.random.randint(1, m - 1)\n    grid[center_x, center_y] = center_color\n\n    # Place surrounding colors in a circular formation around the center pixel\n    surrounding_colors = np.random.choice(list(Color.NOT_BLACK), 8, replace=False)  # 8 surrounding colors\n\n    offsets = [\n        (-1, 0), (1, 0), (0, -1), (0, 1),\n        (-1, -1), (-1, 1), (1, -1), (1, 1)\n    ]\n\n    for (dx, dy), color in zip(offsets, surrounding_colors):\n        x, y = center_x + dx, center_y + dy\n        if 0 <= x < n and 0 <= y < m:\n            grid[x, y] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            7,
            3,
            6,
            0
          ],
          [
            0,
            9,
            8,
            1,
            0
          ],
          [
            0,
            5,
            2,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            7,
            8,
            1,
            0,
            0
          ],
          [
            0,
            4,
            8,
            6,
            0,
            0
          ],
          [
            0,
            3,
            5,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            9,
            7,
            6,
            0,
            0
          ],
          [
            0,
            5,
            9,
            3,
            0,
            0
          ],
          [
            0,
            8,
            1,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            8,
            1,
            0,
            0
          ],
          [
            9,
            7,
            5,
            0,
            0
          ],
          [
            3,
            2,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            5
          ],
          [
            0,
            0,
            0,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "bc1d5164.py",
      "a9f96cdd.py",
      "0ca9ddb6.py"
    ],
    "problem_id": 48684
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color transformation, filling, grid manipulation\n\n# description:\n# In the input, you will see a pattern of different colored shapes scattered across the grid.\n# Each shape is surrounded by a specific color (e.g., black), and the shapes do not overlap.\n# To make the output, fill the surrounding color for each shape with the shape's color, essentially \"expanding\" the color of the shape into its surrounding area.\n\ndef main(input_grid):\n    # Initialize the output grid as a copy of the input\n    output_grid = np.copy(input_grid)\n\n    # Identify all the distinct objects/colors in the input grid\n    objects = find_connected_components(input_grid, background=Color.BLACK, monochromatic=False)\n\n    for obj in objects:\n        # Get the color of the current shape\n        color = obj[0, 0]\n        \n        # Get the bounding box of the current object\n        x, y, width, height = bounding_box(obj)\n\n        # Fill the area around the object with its color\n        for i in range(max(0, x-1), min(input_grid.shape[0], x + height + 1)):\n            for j in range(max(0, y-1), min(input_grid.shape[1], y + width + 1)):\n                if output_grid[i, j] == Color.BLACK:  # Only fill black areas\n                    output_grid[i, j] = color\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid with black background\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly generate a number of shapes\n    num_shapes = np.random.randint(3, 6)\n    colors = np.random.choice(list(Color.NOT_BLACK), num_shapes, replace=False)\n\n    for color in colors:\n        # Randomly choose a size for the shape\n        shape_height = np.random.randint(1, 3)\n        shape_width = np.random.randint(1, 3)\n\n        # Randomly choose a position to place the shape\n        x = np.random.randint(0, n - shape_height)\n        y = np.random.randint(0, m - shape_width)\n\n        # Draw the shape on the grid\n        for i in range(shape_height):\n            for j in range(shape_width):\n                grid[x + i, y + j] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            4,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            4,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            8,
            8,
            2,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            3,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            2,
            0,
            0,
            0
          ],
          [
            8,
            2,
            2,
            6,
            0,
            0
          ],
          [
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            8,
            8,
            1,
            1,
            3,
            0
          ],
          [
            8,
            8,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            3,
            0,
            0,
            0,
            1,
            0
          ],
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            3,
            0,
            0,
            1,
            0
          ],
          [
            3,
            3,
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            3,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            8,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            8,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "8e1813be.py",
      "f9012d9b.py"
    ],
    "problem_id": 49896
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# radial symmetry, pattern duplication\n\n# description:\n# In the input grid, you will see a set of colored pixels arranged in a circular pattern. \n# To make the output, duplicate the pattern in a radial manner, creating multiple layers of the same pattern, \n# each one slightly larger than the last.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find connected components in the input grid\n    objects = find_connected_components(input_grid, connectivity=8)\n    \n    # Assuming there's only one object, we take the first one\n    pattern = objects[0]\n\n    # Get the bounding box of the pattern\n    x, y, width, height = bounding_box(pattern)\n    \n    # Calculate the radius for each layer (1 pixel larger than the last)\n    layers = np.zeros((height * 2 - 1, width * 2 - 1), dtype=int)\n    center_x, center_y = width // 2, height // 2\n\n    # Duplicate the pattern in a radial manner\n    for r in range(1, 5):  # Create 4 layers\n        for dx in range(-r, r + 1):\n            for dy in range(-r, r + 1):\n                if abs(dx) + abs(dy) == r:  # Manhattan distance\n                    # Calculate the new position in the output grid\n                    new_x = center_x + dx\n                    new_y = center_y + dy\n                    # Blit the pattern at the new position\n                    blit_sprite(layers, pattern, new_x - x, new_y - y, background=Color.BLACK)\n\n    return layers\n\ndef generate_input() -> np.ndarray:\n    # Generate a random grid size\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Create a random circular pattern in the center of the grid\n    center_x, center_y = n // 2, m // 2\n    color = np.random.choice(list(Color.NOT_BLACK))\n    \n    # Create a small circular pattern\n    radius = np.random.randint(1, min(n, m) // 4)\n    \n    for angle in np.linspace(0, 2 * np.pi, num=12, endpoint=False):  # 12 points around the circle\n        x = center_x + int(radius * np.cos(angle))\n        y = center_y + int(radius * np.sin(angle))\n        if 0 <= x < n and 0 <= y < m:\n            grid[x, y] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "a9f96cdd.py",
      "6d58a25d.py",
      "3de23699.py"
    ],
    "problem_id": 50918
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, color inversion\n\n# description:\n# In the input, you will see a grid with a pattern that displays vertical symmetry. \n# To create the output, invert the colors of the grid on the side that is opposite to the line of symmetry.\n\ndef main(input_grid):\n    # Identify the line of symmetry (middle column for vertical symmetry)\n    mid_col = input_grid.shape[1] // 2\n\n    # Get the left and right halves of the grid\n    left_half = input_grid[:, :mid_col]\n    right_half = input_grid[:, mid_col:]\n\n    # Check if the left half is a mirror image of the right half\n    if np.array_equal(left_half[:, ::-1], right_half):\n        # Invert colors on the right half\n        inverted_right_half = np.where(right_half != Color.BLACK, Color.BLACK, right_half)\n        # Combine the left half with the inverted right half\n        output_grid = np.concatenate((left_half, inverted_right_half), axis=1)\n    else:\n        # If not symmetric, keep the input unchanged (or handle differently if needed)\n        output_grid = input_grid\n\n    return output_grid\n\ndef generate_input():\n    # Create a grid of random size\n    n = np.random.randint(5, 8)\n    m = np.random.randint(5, 8)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Decide if it should be symmetric or not\n    is_symmetric = np.random.choice([True, False])\n\n    # Generate colors for the left half\n    colors = random.sample(list(Color.NOT_BLACK), k=2)  # Choose 2 different colors\n    if is_symmetric:\n        # Fill the left half with one color\n        color_left = colors[0]\n        grid[:, :m//2] = np.random.choice([color_left, Color.BLACK], size=(n, m//2), p=[0.7, 0.3])\n        # Mirror the left half to the right half\n        grid[:, m//2:] = grid[:, :m//2][:, ::-1]\n    else:\n        # Fill the left half with one color\n        grid[:, :m//2] = np.random.choice([colors[0], Color.BLACK], size=(n, m//2), p=[0.7, 0.3])\n        # Fill the right half with a different random pattern to ensure it is asymmetric\n        grid[:, m//2:] = np.random.choice([colors[1], Color.BLACK], size=(n, m//2), p=[0.7, 0.3])\n\n    return grid",
    "examples": [
      [
        [
          [
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            0,
            3,
            0,
            0,
            3,
            0
          ],
          [
            0,
            3,
            3,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            3,
            3,
            0
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            0,
            3,
            3,
            0,
            3
          ]
        ],
        [
          [
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            0,
            0,
            0
          ],
          [
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            3,
            0,
            3,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            0,
            6,
            6,
            0,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            6,
            0,
            0,
            6,
            0
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6
          ]
        ],
        [
          [
            6,
            0,
            6,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            2,
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            0,
            2,
            2,
            0,
            2
          ],
          [
            2,
            2,
            0,
            0,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ]
        ],
        [
          [
            0,
            2,
            2,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            0,
            0,
            0
          ],
          [
            2,
            0,
            2,
            0,
            0,
            0
          ],
          [
            2,
            2,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            2,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            3,
            3,
            0,
            0
          ],
          [
            3,
            0,
            3,
            3,
            0,
            3
          ],
          [
            0,
            3,
            0,
            0,
            3,
            0
          ],
          [
            0,
            3,
            3,
            3,
            3,
            0
          ],
          [
            3,
            0,
            3,
            3,
            0,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            0,
            3,
            3,
            0,
            3
          ]
        ],
        [
          [
            0,
            0,
            3,
            0,
            0,
            0
          ],
          [
            3,
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            0,
            0,
            0
          ],
          [
            3,
            0,
            3,
            0,
            0,
            0
          ],
          [
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            3,
            0,
            3,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "8e1813be.py",
      "44f52bb0.py",
      "bc1d5164.py"
    ],
    "problem_id": 51210
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, color extraction\n\n# description:\n# In the input, you will see a grid with a symmetric color pattern (either horizontally or vertically).\n# To create the output, extract one half of the pattern and mirror it to complete the other half.\n\ndef main(input_grid):\n    # Check the symmetry type of the input grid\n    if np.all(input_grid == input_grid[:, ::-1]):  # Check for vertical symmetry\n        # Extract the left half and mirror it to fill the right half\n        left_half = input_grid[:, :input_grid.shape[1] // 2]\n        output_grid = np.concatenate((left_half, left_half[:, ::-1]), axis=1)\n    elif np.all(input_grid == input_grid[::-1]):  # Check for horizontal symmetry\n        # Extract the top half and mirror it to fill the bottom half\n        top_half = input_grid[:input_grid.shape[0] // 2, :]\n        output_grid = np.concatenate((top_half, top_half[::-1]), axis=0)\n    else:\n        # If no symmetry, return the input grid unchanged\n        output_grid = input_grid\n\n    return output_grid\n\ndef generate_input():\n    # Randomly generate a grid with a symmetric pattern.\n    n = np.random.randint(4, 8)  # Height of the grid\n    m = np.random.randint(4, 8)  # Width of the grid\n    symmetry_type = np.random.choice(['horizontal', 'vertical'])\n\n    if symmetry_type == 'horizontal':\n        # Create a grid with horizontal symmetry\n        pattern_height = n // 2\n        pattern = random_sprite(n=pattern_height, m=m, density=1, symmetry=None, color_palette=Color.NOT_BLACK)\n        grid = np.concatenate((pattern, pattern[::-1]), axis=0)\n    else:\n        # Create a grid with vertical symmetry\n        pattern_width = m // 2\n        pattern = random_sprite(n=n, m=pattern_width, density=1, symmetry=None, color_palette=Color.NOT_BLACK)\n        grid = np.concatenate((pattern, pattern[:, ::-1]), axis=1)\n\n    # Fill the grid to the desired size and add a black border if necessary\n    grid = np.pad(grid, pad_width=1, mode='constant', constant_values=Color.BLACK)\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            2,
            2,
            9,
            2,
            2,
            6,
            0
          ],
          [
            0,
            6,
            2,
            2,
            1,
            2,
            2,
            6,
            0
          ],
          [
            0,
            6,
            2,
            2,
            1,
            2,
            2,
            6,
            0
          ],
          [
            0,
            6,
            2,
            2,
            9,
            2,
            2,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            2,
            2,
            2,
            2,
            6,
            0
          ],
          [
            0,
            6,
            2,
            2,
            2,
            2,
            6,
            0
          ],
          [
            0,
            6,
            2,
            2,
            2,
            2,
            6,
            0
          ],
          [
            0,
            6,
            2,
            2,
            2,
            2,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            5,
            2,
            5,
            3,
            0
          ],
          [
            0,
            3,
            3,
            3,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            3,
            3,
            3,
            0
          ],
          [
            0,
            3,
            5,
            2,
            5,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            5,
            5,
            3,
            0
          ],
          [
            0,
            3,
            3,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            3,
            3,
            0
          ],
          [
            0,
            3,
            5,
            5,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            6,
            4,
            5,
            4,
            6,
            6,
            0
          ],
          [
            0,
            6,
            2,
            2,
            2,
            2,
            2,
            6,
            0
          ],
          [
            0,
            6,
            2,
            2,
            2,
            2,
            2,
            6,
            0
          ],
          [
            0,
            6,
            6,
            4,
            5,
            4,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            6,
            4,
            4,
            6,
            6,
            0
          ],
          [
            0,
            6,
            2,
            2,
            2,
            2,
            6,
            0
          ],
          [
            0,
            6,
            2,
            2,
            2,
            2,
            6,
            0
          ],
          [
            0,
            6,
            6,
            4,
            4,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            6,
            6,
            9,
            6,
            6,
            6,
            0
          ],
          [
            0,
            5,
            9,
            9,
            9,
            9,
            9,
            5,
            0
          ],
          [
            0,
            5,
            5,
            9,
            9,
            9,
            5,
            5,
            0
          ],
          [
            0,
            5,
            5,
            9,
            9,
            9,
            5,
            5,
            0
          ],
          [
            0,
            5,
            9,
            9,
            9,
            9,
            9,
            5,
            0
          ],
          [
            0,
            6,
            6,
            6,
            9,
            6,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            6,
            6,
            6,
            6,
            6,
            0
          ],
          [
            0,
            5,
            9,
            9,
            9,
            9,
            5,
            0
          ],
          [
            0,
            5,
            5,
            9,
            9,
            5,
            5,
            0
          ],
          [
            0,
            5,
            5,
            9,
            9,
            5,
            5,
            0
          ],
          [
            0,
            5,
            9,
            9,
            9,
            9,
            5,
            0
          ],
          [
            0,
            6,
            6,
            6,
            6,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "3de23699.py",
      "bc1d5164.py",
      "44f52bb0.py"
    ],
    "problem_id": 52298
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, pattern extraction, grid transformation\n\n# description:\n# In the input you will see a grid containing a square pattern placed in the center. \n# The outer pixels form a border around the pattern.\n# To make the output grid, you should rotate the pattern in the center of the input grid \n# 90 degrees clockwise, while keeping the outer border unchanged.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Create a copy of the input grid to avoid modifying the original\n    output_grid = np.copy(input_grid)\n\n    # Get the bounding box of the central pattern (ignoring the border)\n    n, m = input_grid.shape\n    # The pattern starts at (1, 1) and ends at (n-2, m-2)\n    pattern = input_grid[1:n-1, 1:m-1]\n\n    # Rotate the pattern 90 degrees clockwise\n    rotated_pattern = np.rot90(pattern, k=-1)  # k=-1 for clockwise rotation\n\n    # Place the rotated pattern back into the center of the output grid\n    output_grid[1:n-1, 1:m-1] = rotated_pattern\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a grid of size n x m\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Generate a random pattern size (must be smaller than the grid)\n    pattern_size = np.random.randint(2, min(n, m) - 1)\n    \n    # Select a color for the pattern\n    pattern_color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Fill the center of the grid with the pattern\n    start_x, start_y = (n - pattern_size) // 2, (m - pattern_size) // 2\n    for i in range(pattern_size):\n        for j in range(pattern_size):\n            grid[start_x + i, start_y + j] = pattern_color\n\n    # Create a border around the pattern (set to black)\n    grid[0, :] = grid[-1, :] = Color.BLACK  # Top and bottom rows\n    grid[:, 0] = grid[:, -1] = Color.BLACK  # Left and right columns\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            7,
            7,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            7,
            7,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            7,
            7,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            7,
            7,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            7,
            7,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "1e32b0e9.py",
      "ff28f65a.py"
    ],
    "problem_id": 52832
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# iterative expansion, pattern recognition, color transformation\n\n# description:\n# In the input, you will see a small pattern repeated in a grid. The output should expand this pattern iteratively \n# by one pixel in all directions until the entire grid is filled, ensuring that the pattern maintains its original structure \n# throughout the expansion.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Identify the pattern in the input grid\n    pattern_objects = find_connected_components(input_grid, monochromatic=False)\n    \n    # Assuming there is only one main pattern to work with\n    assert len(pattern_objects) == 1, \"There should be exactly one pattern.\"\n    pattern = pattern_objects[0]\n    \n    # Get the bounding box of the pattern\n    pattern_x, pattern_y, pattern_width, pattern_height = bounding_box(pattern, background=Color.BLACK)\n\n    # Calculate the size of the output grid\n    output_width = input_grid.shape[0] + 2\n    output_height = input_grid.shape[1] + 2\n\n    # Create an empty output grid with the new dimensions\n    output_grid = np.full((output_width, output_height), Color.BLACK)\n\n    # Place the original pattern in the center of the output grid\n    blit_sprite(output_grid, pattern, x=1, y=1, background=Color.BLACK)\n\n    # Expand the pattern iteratively by one pixel in all directions\n    for i in range(output_width):\n        for j in range(output_height):\n            if output_grid[i, j] == Color.BLACK:  # Only fill black pixels\n                # Check if this position is adjacent to the pattern\n                if (i > 0 and output_grid[i-1, j] != Color.BLACK) or \\\n                   (i < output_width - 1 and output_grid[i+1, j] != Color.BLACK) or \\\n                   (j > 0 and output_grid[i, j-1] != Color.BLACK) or \\\n                   (j < output_height - 1 and output_grid[i, j+1] != Color.BLACK):\n                    # Fill with the color of the nearest pattern pixel\n                    for color in np.unique(pattern):\n                        if color != Color.BLACK and np.any(pattern == color):\n                            output_grid[i, j] = color\n                            break\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a random pattern grid\n    n = np.random.randint(3, 6)  # Pattern size\n    m = np.random.randint(3, 6)  # Pattern size\n\n    # Create the base grid with black background\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly select a color for the pattern\n    pattern_color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Generate a random pattern in the grid\n    for i in range(n):\n        for j in range(m):\n            if np.random.rand() < 0.3:  # 30% chance to fill the pixel\n                grid[i, j] = pattern_color\n\n    # Ensure there is at least one non-black pixel\n    if np.all(grid == Color.BLACK):\n        return generate_input()\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            6
          ],
          [
            0,
            6,
            6
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            6,
            6,
            6
          ],
          [
            0,
            6,
            6,
            6,
            6
          ],
          [
            0,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            8,
            0
          ],
          [
            8,
            0,
            8,
            8
          ],
          [
            8,
            8,
            8,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            8,
            8,
            8
          ],
          [
            0,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            4,
            4,
            0
          ],
          [
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            4,
            4,
            4,
            4
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            0
          ],
          [
            0,
            9,
            9
          ],
          [
            0,
            9,
            0
          ],
          [
            9,
            9,
            0
          ],
          [
            9,
            9,
            9
          ]
        ],
        [
          [
            0,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9,
            9
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "1e32b0e9.py",
      "a9f96cdd.py"
    ],
    "problem_id": 53475
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# mirroring, pattern completion\n\n# description:\n# In the input, you will see a grid with a colored pattern on one half and a mirror image of that pattern on the other half, but with some pixels missing. \n# To make the output, fill in the missing pixels on the mirrored side to create a complete symmetrical pattern.\n\ndef main(input_grid):\n    n, m = input_grid.shape\n\n    # Split the grid into left and right halves\n    left_half = input_grid[:, :m // 2]\n    right_half = input_grid[:, m // 2:]\n\n    # Create a mirrored version of the left half\n    mirrored_half = np.flip(left_half, axis=1)\n\n    # Fill in the missing pixels from the mirrored half\n    for i in range(n):\n        for j in range(m // 2):\n            if right_half[i, j] == Color.BLACK:  # Assuming missing pixels are represented by Color.BLACK\n                right_half[i, j] = mirrored_half[i, j]\n\n    # Concatenate the left half with the filled-in right half\n    output_grid = np.concatenate((left_half, right_half), axis=1)\n    \n    return output_grid\n\ndef generate_input():\n    # Create a random grid size with a black background\n    n = np.random.randint(5, 8)\n    m = np.random.randint(5, 8)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Select a color for the patterns\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create a random pattern in the left half\n    left_half_pattern = random_sprite(n, m // 2, density=0.5, color_palette=[color])\n\n    # Place the left half pattern in the grid\n    grid[:, :m // 2] = left_half_pattern\n\n    # Create a mirrored pattern for the right half but leave some pixels as black (missing)\n    mirrored_half = np.flip(left_half_pattern, axis=1)\n    \n    # Randomly introduce black pixels into the right half\n    for i in range(n):\n        for j in range(m // 2):\n            if np.random.rand() < 0.5:  # 50% chance to keep the original mirrored color or set to black\n                grid[i, m // 2 + j] = mirrored_half[i, j]\n            else:\n                grid[i, m // 2 + j] = Color.BLACK\n    \n    return grid",
    "examples": [
      [
        [
          [
            4,
            4,
            4,
            0,
            4,
            0
          ],
          [
            4,
            0,
            4,
            0,
            0,
            4
          ],
          [
            4,
            0,
            4,
            0,
            0,
            4
          ],
          [
            4,
            4,
            4,
            0,
            0,
            4
          ],
          [
            4,
            4,
            4,
            0,
            4,
            0
          ],
          [
            4,
            0,
            4,
            4,
            0,
            4
          ]
        ],
        [
          [
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            0,
            4,
            4,
            0,
            4
          ],
          [
            4,
            0,
            4,
            4,
            0,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            0,
            4,
            4,
            0,
            4
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            4,
            0,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            0,
            4,
            0
          ],
          [
            4,
            4,
            0,
            4,
            0
          ],
          [
            4,
            4,
            0,
            4,
            0
          ],
          [
            4,
            4,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            9,
            9,
            9,
            0,
            0
          ],
          [
            9,
            0,
            9,
            0,
            0,
            9,
            0
          ],
          [
            9,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            9,
            0,
            9,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            9,
            0,
            0,
            9,
            0
          ],
          [
            9,
            0,
            9,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            9,
            9,
            9,
            9,
            9,
            0
          ],
          [
            9,
            0,
            9,
            9,
            0,
            9,
            0
          ],
          [
            9,
            0,
            9,
            9,
            0,
            9,
            0
          ],
          [
            9,
            0,
            9,
            9,
            0,
            9,
            0
          ],
          [
            9,
            9,
            9,
            9,
            9,
            9,
            0
          ],
          [
            9,
            0,
            9,
            9,
            0,
            9,
            0
          ]
        ]
      ],
      [
        [
          [
            8,
            8,
            8,
            0,
            8,
            8,
            0
          ],
          [
            8,
            0,
            8,
            8,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            0,
            0,
            8,
            0
          ],
          [
            8,
            8,
            8,
            8,
            0,
            8,
            0
          ],
          [
            8,
            0,
            8,
            8,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            0
          ],
          [
            8,
            0,
            8,
            8,
            0,
            8,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            0
          ],
          [
            8,
            0,
            8,
            8,
            0,
            8,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "44f52bb0.py",
      "3de23699.py"
    ],
    "problem_id": 54531
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry, pattern completion\n\n# description:\n# In the input, you will see a grid with a pattern that exhibits rotational symmetry around the center. \n# To create the output, identify the center of the pattern and replicate the symmetrical portions to complete \n# any missing sections, ensuring the pattern is fully intact.\n\ndef main(input_grid):\n    n, m = input_grid.shape\n    center_x, center_y = n // 2, m // 2\n    \n    # Create an output grid initialized to black\n    output_grid = np.full((n, m), Color.BLACK)\n    \n    # Iterate over the input grid and fill in the output grid based on rotational symmetry\n    for x in range(n):\n        for y in range(m):\n            if input_grid[x, y] != Color.BLACK:\n                # Determine the coordinates of the rotated positions\n                rotated_positions = [\n                    (x, y), \n                    (n - x - 1, y), \n                    (x, m - y - 1), \n                    (n - x - 1, m - y - 1)\n                ]\n                \n                for rx, ry in rotated_positions:\n                    # Fill the output grid at the rotated positions\n                    output_grid[rx, ry] = input_grid[x, y]\n    \n    return output_grid\n\ndef generate_input():\n    # Generate a random grid size\n    n, m = np.random.randint(3, 7, size=(2))\n    # Generate a random sprite with rotational symmetry\n    grid = random_sprite(n, m, density=0.5, symmetry=\"radial\", color_palette=Color.NOT_BLACK)\n\n    # Ensure the colors are not all black\n    if np.all(grid == Color.BLACK):\n        return generate_input()\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            5,
            0
          ],
          [
            5,
            9,
            9,
            0
          ],
          [
            0,
            9,
            9,
            5
          ],
          [
            0,
            5,
            0,
            0
          ]
        ],
        [
          [
            0,
            5,
            5,
            0
          ],
          [
            5,
            9,
            9,
            5
          ],
          [
            5,
            9,
            9,
            5
          ],
          [
            0,
            5,
            5,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            0,
            5
          ],
          [
            0,
            1,
            1,
            5
          ],
          [
            5,
            1,
            1,
            0
          ],
          [
            5,
            0,
            5,
            5
          ]
        ],
        [
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            1,
            1,
            5
          ],
          [
            5,
            1,
            1,
            5
          ],
          [
            5,
            5,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            7,
            3
          ],
          [
            7,
            7,
            1,
            7,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            7,
            1,
            7,
            7
          ],
          [
            3,
            7,
            0,
            0,
            3
          ]
        ],
        [
          [
            3,
            7,
            0,
            7,
            3
          ],
          [
            7,
            7,
            1,
            7,
            7
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            7,
            7,
            1,
            7,
            7
          ],
          [
            3,
            7,
            0,
            7,
            3
          ]
        ]
      ],
      [
        [
          [
            9,
            4,
            0,
            0,
            9
          ],
          [
            0,
            4,
            1,
            4,
            4
          ],
          [
            0,
            1,
            4,
            1,
            0
          ],
          [
            4,
            4,
            1,
            4,
            0
          ],
          [
            9,
            0,
            0,
            4,
            9
          ]
        ],
        [
          [
            9,
            4,
            0,
            4,
            9
          ],
          [
            4,
            4,
            1,
            4,
            4
          ],
          [
            0,
            1,
            4,
            1,
            0
          ],
          [
            4,
            4,
            1,
            4,
            4
          ],
          [
            9,
            4,
            0,
            4,
            9
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "44f52bb0.py",
      "f9012d9b.py"
    ],
    "problem_id": 55836
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color correspondence, rotation\n\n# description:\n# In the input, you will see a square grid with colored pixels forming a shape. \n# To make the output, rotate the shape 90 degrees clockwise and fill the new grid \n# while maintaining the original color correspondence.\n\ndef main(input_grid):\n    # Find the connected components in the input grid\n    objects = find_connected_components(input_grid, monochromatic=False, connectivity=4)\n\n    # Create an output grid with a size that accommodates the rotation\n    max_height = max(obj.shape[0] for obj in objects)\n    max_width = max(obj.shape[1] for obj in objects)\n    output_grid = np.full((max_width, max_height), Color.BLACK)\n\n    # Rotate and place each object in the output grid\n    for obj in objects:\n        # Get the bounding box of the object\n        x, y, width, height = bounding_box(obj)\n\n        # Rotate the object 90 degrees clockwise\n        rotated_sprite = np.rot90(obj, k=-1)\n\n        # Calculate the new position to blit the rotated sprite\n        new_x = y  # Original y becomes new x\n        new_y = max_height - (x + width)  # Original x becomes new y, inverted to fit in output\n\n        # Blit the rotated sprite onto the output grid\n        blit_sprite(output_grid, rotated_sprite, x=new_x, y=new_y, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n = np.random.randint(3, 8)\n    m = np.random.randint(3, 8)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Generate a random color for the shape\n    shape_color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create a random shape within the grid\n    shape_size = np.random.randint(2, min(n, m) // 2)\n    shape_start_x = np.random.randint(0, n - shape_size)\n    shape_start_y = np.random.randint(0, m - shape_size)\n\n    # Fill a square area with the shape color\n    for i in range(shape_size):\n        for j in range(shape_size):\n            if np.random.rand() < 0.5:  # Randomly decide to fill or leave black\n                grid[shape_start_x + i, shape_start_y + j] = shape_color\n\n    # Ensure the shape is not all black\n    if np.all(grid == Color.BLACK):\n        return generate_input()\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "8e1813be.py",
      "6fa7a44f.py",
      "0ca9ddb6.py"
    ],
    "problem_id": 57338
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern replication, grid transformation\n\n# description:\n# In the input, there will be a 4x4 grid with a specific colored pattern in one of the corners. \n# To create the output, replicate that pattern to fill the entire grid, ensuring that the replicated sections align perfectly with each other.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Get the bounding box of the pattern in the top-left corner of the input grid\n    pattern = input_grid[:4, :4]\n\n    # Create a new output grid with the same size as the input grid\n    output_height = input_grid.shape[0]\n    output_width = input_grid.shape[1]\n    output_grid = np.full((output_height, output_width), Color.BLACK)\n\n    # Fill the output grid with the replicated pattern\n    for i in range(0, output_height, 4):\n        for j in range(0, output_width, 4):\n            output_grid[i:i+4, j:j+4] = pattern\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a random size for the grid\n    n = np.random.randint(8, 12)  # Output grid must be larger than 4x4 to accommodate the pattern\n    m = np.random.randint(8, 12)\n\n    # Create a grid with a black background\n    grid = np.zeros((n, m), dtype=int)\n\n    # Choose a color for the pattern and create a 4x4 pattern in the top-left corner\n    color = np.random.choice(list(Color.NOT_BLACK))\n    pattern = np.full((4, 4), color)\n\n    # Place the pattern in the top-left corner of the grid\n    grid[:4, :4] = pattern\n\n    # Ensure the remaining part of the grid is filled with black\n    # This is inherently handled since the grid was initialized to black\n\n    return grid",
    "examples": [
      [
        [
          [
            6,
            6,
            6,
            6,
            0,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            0,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            0,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            8,
            8,
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            3,
            3,
            3,
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            3,
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            3,
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            3,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "995c5fa3.py",
      "6b9890af.py"
    ],
    "problem_id": 58408
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, color mapping\n\n# description:\n# In the input, you will see a 4x4 grid with a colored shape in the center. \n# To make the output, rotate the shape 90 degrees clockwise and map its colors to a new set: \n# red to blue, blue to green, green to yellow, and yellow to red.\n\ndef main(input_grid):\n    # Initialize output grid with the same dimensions as input\n    output_grid = np.full_like(input_grid, Color.BLACK)\n\n    # Rotate the shape 90 degrees clockwise\n    shape = input_grid[1:3, 1:3]  # Extract the 2x2 center shape\n    rotated_shape = np.rot90(shape, k=-1)  # Rotate 90 degrees clockwise\n\n    # Create a color mapping\n    color_map = {\n        Color.RED: Color.BLUE,\n        Color.BLUE: Color.GREEN,\n        Color.GREEN: Color.YELLOW,\n        Color.YELLOW: Color.RED\n    }\n\n    # Map the colors in the rotated shape using the color map\n    for x in range(rotated_shape.shape[0]):\n        for y in range(rotated_shape.shape[1]):\n            color = rotated_shape[x, y]\n            output_grid[x + 1, y + 1] = color_map.get(color, color)  # Place in the output grid\n\n    return output_grid\n\n\ndef generate_input():\n    # Create a 4x4 grid filled with black\n    grid = np.full((4, 4), Color.BLACK)\n\n    # Randomly choose a color for the center shape\n    shape_colors = [Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW]\n    shape_color = np.random.choice(shape_colors)\n\n    # Create a 2x2 shape in the center of the grid\n    shape = np.full((2, 2), shape_color)\n\n    # Randomly choose a position to place the shape in the center\n    grid[1:3, 1:3] = shape\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            0
          ],
          [
            0,
            3,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            0
          ],
          [
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            0
          ],
          [
            0,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            0
          ],
          [
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "0d3d703e.py",
      "1caeab9d.py",
      "0ca9ddb6.py",
      "995c5fa3.py"
    ],
    "problem_id": 58413
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern detection, color blending\n\n# description:\n# In the input you will see a grid filled with colorful patterns, some of which overlap.\n# To make the output, identify the overlapping areas and create a new pattern that blends the colors of the overlapping regions together, \n# while maintaining the original patterns in the non-overlapping areas.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # First, find all connected components in the input grid\n    components = find_connected_components(input_grid, monochromatic=False, connectivity=8)\n    \n    # Create an output grid filled with the background color\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Iterate through each component to determine if it overlaps with others\n    for component in components:\n        # Get the bounding box of the current component\n        x, y, w, h = bounding_box(component)\n        \n        # Extract the component from the input grid\n        component_color = component[0, 0]  # Assuming the component is monochromatic\n        output_grid[y:y+h, x:x+w] = np.where(output_grid[y:y+h, x:x+w] == Color.BLACK, component_color, blend_colors(output_grid[y:y+h, x:x+w], component_color))\n    \n    return output_grid\n\ndef blend_colors(existing_colors, new_color):\n    # Simple blending function that averages the color values\n    # Here we assume each color is represented as an integer value (not the most robust, but illustrative)\n    return np.where(existing_colors != Color.BLACK, (existing_colors + new_color) // 2, new_color)\n\ndef generate_input() -> np.ndarray:\n    # Create a grid size\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Select a number of patterns to generate\n    num_patterns = np.random.randint(2, 5)\n\n    for _ in range(num_patterns):\n        # Generate a random pattern size\n        pattern_height = np.random.randint(1, 5)\n        pattern_width = np.random.randint(1, 5)\n\n        # Choose a random color for the pattern\n        color = np.random.choice(list(Color.NOT_BLACK))\n\n        # Randomly position the pattern within the grid\n        x_pos = np.random.randint(0, n - pattern_height + 1)\n        y_pos = np.random.randint(0, m - pattern_width + 1)\n\n        # Fill the grid with the pattern color\n        grid[x_pos:x_pos + pattern_height, y_pos:y_pos + pattern_width] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            7,
            7,
            4,
            4,
            4
          ],
          [
            7,
            7,
            0,
            0,
            1
          ],
          [
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            0,
            0,
            0
          ],
          [
            3,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            4,
            4
          ],
          [
            0,
            0,
            1,
            0,
            4,
            4
          ],
          [
            0,
            0,
            4,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2
          ],
          [
            4,
            4,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            1,
            1,
            0
          ],
          [
            1,
            1,
            1,
            1,
            0
          ],
          [
            1,
            1,
            1,
            1,
            0
          ],
          [
            1,
            1,
            1,
            1,
            0
          ],
          [
            1,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            6,
            6,
            6,
            0
          ],
          [
            6,
            6,
            6,
            6,
            0
          ],
          [
            6,
            7,
            7,
            7,
            7
          ],
          [
            6,
            7,
            7,
            7,
            7
          ],
          [
            0,
            7,
            7,
            7,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "cf98881b.py",
      "3de23699.py",
      "995c5fa3.py"
    ],
    "problem_id": 59331
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# shape detection, scaling\n\n# description:\n# In the input you will see a 5x5 grid containing colored shapes (2x2 squares of colors) and a black border. \n# To create the output grid, you should scale the colored shapes up by a factor of 2 while maintaining the black border.\n\ndef main(input_grid):\n    # Plan:\n    # 1. Detect all colored squares (2x2) inside the black border\n    # 2. Scale each detected square by a factor of 2\n    # 3. Place the scaled squares back into the output grid while preserving the black border\n\n    # Initialize output grid with the same size as input grid\n    output_grid = np.copy(input_grid)\n\n    # Detect colored squares\n    colored_squares = detect_objects(input_grid, monochromatic=True, background=Color.BLACK, connectivity=4,\n                                      allowed_dimensions=[(2, 2)])\n\n    scale_factor = 2\n    for square in colored_squares:\n        # Get the position of the square and scale it\n        x, y, w, h = bounding_box(square, background=Color.BLACK)\n        scaled_square = scale_pattern(pattern=square, scale_factor=scale_factor)\n\n        # Calculate new position in the output grid\n        new_x = x * scale_factor\n        new_y = y * scale_factor\n\n        # Place the scaled square in the output grid\n        output_grid = blit_sprite(grid=output_grid, x=new_x, y=new_y, sprite=scaled_square, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input():\n    # Create a 7x7 grid to allow for a border\n    grid_size = 7\n    grid = np.zeros((grid_size, grid_size), dtype=int)\n    \n    # Add a black border\n    grid[0, :] = grid[:, 0] = grid[-1, :] = grid[:, -1] = Color.BLACK\n\n    # Randomly scatter some 2x2 colored squares within the inner area (5x5)\n    colors = Color.NOT_BLACK\n    for _ in range(np.random.randint(1, 5)):  # Randomly choose how many squares to place\n        color = np.random.choice(colors)\n        # Randomly choose a position for the 2x2 square\n        x, y = np.random.randint(1, 5, size=2)  # (1,1) to (4,4) for placing 2x2\n        # Place the 2x2 colored square\n        grid[x:x+2, y:y+2] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            7,
            7,
            0,
            0,
            0,
            0
          ],
          [
            0,
            7,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            7,
            7,
            0,
            0,
            0,
            0
          ],
          [
            0,
            7,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            7,
            7,
            7
          ],
          [
            0,
            0,
            0,
            0,
            7,
            7,
            7
          ],
          [
            0,
            0,
            0,
            0,
            7,
            7,
            2
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            6,
            6,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            6,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            6,
            6,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            6,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            1,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            3,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            3,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            0,
            5,
            5,
            5
          ],
          [
            0,
            0,
            0,
            0,
            5,
            5,
            5
          ],
          [
            0,
            0,
            0,
            0,
            5,
            5,
            7
          ]
        ]
      ]
    ],
    "seeds": [
      "46f33fce.py",
      "1fad071e.py",
      "ea786f4a.py",
      "09629e4f.py"
    ],
    "problem_id": 62947
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# radial symmetry, pattern replication\n\n# description:\n# In the input, you will see a pattern of colored pixels that exhibits radial symmetry around a central point.\n# To make the output, identify the central point and replicate the pattern in all four quadrants of the canvas, \n# ensuring that the radial symmetry is maintained.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the central point of the input grid\n    objects = find_connected_components(input_grid, background=Color.BLACK)\n    assert len(objects) == 1  # We expect one symmetrical pattern\n    central_pattern = objects[0]\n\n    # Get the bounding box of the central pattern\n    x, y, width, height = bounding_box(central_pattern)\n\n    # Calculate the center of the bounding box\n    center_x = x + width // 2\n    center_y = y + height // 2\n\n    # Create an output grid large enough to fit the replicated pattern\n    output_width = width * 2\n    output_height = height * 2\n    output_grid = np.full((output_height, output_width), Color.BLACK)\n\n    # Place the central pattern in all four quadrants\n    blit_sprite(output_grid, central_pattern, x=0, y=0)  # Top left\n    blit_sprite(output_grid, central_pattern, x=width, y=0)  # Top right\n    blit_sprite(output_grid, central_pattern, x=0, y=height)  # Bottom left\n    blit_sprite(output_grid, central_pattern, x=width, y=height)  # Bottom right\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a random size for the central pattern\n    n, m = np.random.randint(3, 6), np.random.randint(3, 6)\n\n    # Create a random color palette for the pattern\n    color_palette = random.sample(Color.NOT_BLACK, k=3)\n\n    # Generate a random sprite that will serve as the symmetrical pattern\n    central_pattern = random_sprite(n, m, density=0.5, color_palette=color_palette)\n\n    # Create a grid for the output, ensuring enough space for the pattern\n    grid_width, grid_height = n + 2, m + 2\n    grid = np.full((grid_height, grid_width), Color.BLACK)\n\n    # Place the central pattern in the center of the grid\n    grid = blit_sprite(grid=grid, sprite=central_pattern, x=1, y=1)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            0,
            2,
            0,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2,
            2,
            2
          ],
          [
            0,
            2,
            0,
            2,
            2,
            0
          ],
          [
            0,
            2,
            2,
            2,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            8,
            8,
            8,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0,
            8
          ],
          [
            0,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            8,
            0,
            0,
            8
          ],
          [
            0,
            0,
            8,
            0,
            0,
            8
          ],
          [
            0,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            7,
            7,
            0,
            7,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            0
          ],
          [
            0,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            7,
            0,
            7,
            7,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            7,
            7,
            0,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            0,
            7,
            7
          ],
          [
            0,
            7,
            7,
            7,
            0,
            7,
            7,
            7
          ],
          [
            0,
            7,
            0,
            7,
            7,
            7,
            0,
            7
          ],
          [
            0,
            7,
            7,
            0,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            7,
            7,
            7,
            0,
            7,
            7
          ],
          [
            0,
            7,
            7,
            7,
            0,
            7,
            7,
            7
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            8,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            8,
            8,
            0
          ],
          [
            0,
            8,
            8,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            8,
            0,
            0,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            0,
            0,
            8,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "a9f96cdd.py",
      "6fa7a44f.py",
      "bc1d5164.py"
    ],
    "problem_id": 63605
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, filling, transformation\n\n# description:\n# In the input, you will see a grid that has a symmetrical pattern with some parts missing. \n# To create the output, identify the missing sections needed to complete the symmetry and fill those sections with the same color as the surrounding pattern.\n\ndef main(input_grid):\n    # Get the dimensions of the input grid\n    n, m = input_grid.shape\n\n    # Create an output grid initialized to black\n    output_grid = np.full((n, m), Color.BLACK)\n\n    # Fill the output grid with the input grid colors\n    for i in range(n):\n        for j in range(m):\n            color = input_grid[i, j]\n            output_grid[i, j] = color\n\n    # Reflect the input grid across the vertical midline to fill missing parts\n    for i in range(n):\n        for j in range(m // 2):\n            if output_grid[i, j] == Color.BLACK and output_grid[i, m - j - 1] != Color.BLACK:\n                output_grid[i, j] = output_grid[i, m - j - 1]\n\n    # Reflect the input grid across the horizontal midline to fill missing parts\n    for i in range(n // 2):\n        for j in range(m):\n            if output_grid[i, j] == Color.BLACK and output_grid[n - i - 1, j] != Color.BLACK:\n                output_grid[i, j] = output_grid[n - i - 1, j]\n\n    return output_grid\n\ndef generate_input():\n    # Create a grid of random size\n    n = np.random.randint(5, 8)\n    m = np.random.randint(5, 8)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Select a color for the patterns\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Generate a symmetrical pattern\n    center_x, center_y = n // 2, m // 2\n    # Create a simple symmetric pattern\n    grid[center_x - 1:center_x + 1, center_y - 1:center_y + 1] = color\n    grid[center_x - 1, center_y] = color\n    grid[center_x, center_y - 1] = color\n\n    # Randomly remove some pixels to create \"missing\" sections\n    num_missing = np.random.randint(1, 4)  # Number of missing sections\n    for _ in range(num_missing):\n        x = np.random.randint(0, n)\n        y = np.random.randint(0, m)\n        if grid[x, y] == color:\n            grid[x, y] = Color.BLACK  # Remove the color by setting to black\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "44f52bb0.py",
      "8e1813be.py"
    ],
    "problem_id": 63977
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry, rotation\n\n# description:\n# In the input, you will see a grid with a pattern that is symmetric along the vertical axis but has been rotated. \n# To make the output, rotate the pattern back to its original orientation while maintaining its symmetry.\n\ndef main(input_grid):\n    # Find the connected components in the input grid\n    objects = find_connected_components(input_grid, monochromatic=True, background=Color.BLACK, connectivity=8)\n\n    # Assume we only have one component that is symmetric along the vertical axis\n    if len(objects) != 1:\n        raise ValueError(\"Input should contain exactly one symmetric component.\")\n\n    # Get the bounding box of the component\n    bounding_box_coords = bounding_box(objects[0])\n\n    # Crop the pattern to isolate it\n    pattern = crop(objects[0])\n\n    # Rotate the pattern back to its original orientation\n    original_orientation = np.rot90(pattern, k=1)  # Rotate 90 degrees counter-clockwise\n\n    # Create a new output grid with the same size as the input grid\n    output_grid = np.full_like(input_grid, Color.BLACK)\n\n    # Determine the position to place the original oriented pattern\n    output_x = bounding_box_coords[0]\n    output_y = bounding_box_coords[1]\n\n    # Place the rotated pattern back into the output grid\n    blit_sprite(output_grid, original_orientation, x=output_x, y=output_y, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n\n    # Generate a symmetric sprite\n    sprite = random_sprite(np.random.randint(2, 5), np.random.randint(2, 5), symmetry='vertical', color_palette=Color.NOT_BLACK)\n\n    # Create an empty grid and place the sprite at a random position with rotation\n    grid = np.full((n, m), Color.BLACK)\n    \n    # Determine a rotation for the sprite\n    rotation = np.random.choice([0, 1, 2, 3])  # 0: 0 degrees, 1: 90 degrees, 2: 180 degrees, 3: 270 degrees\n    rotated_sprite = np.rot90(sprite, k=rotation)\n\n    # Randomly place the rotated sprite in the grid\n    x_offset = np.random.randint(0, n - rotated_sprite.shape[0] + 1)\n    y_offset = np.random.randint(0, m - rotated_sprite.shape[1] + 1)\n    blit_sprite(grid, rotated_sprite, x=x_offset, y=y_offset, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            3,
            3
          ],
          [
            0,
            0,
            0,
            0,
            0,
            3,
            3
          ],
          [
            0,
            0,
            0,
            0,
            0,
            3,
            3
          ],
          [
            0,
            0,
            0,
            0,
            0,
            3,
            3
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            3,
            3
          ],
          [
            0,
            0,
            0,
            0,
            0,
            3,
            3
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            0,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "f9012d9b.py",
      "44f52bb0.py"
    ],
    "problem_id": 65589
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, rotation, transformation\n\n# description:\n# In the input, you will see a grid containing a pattern of colored pixels that is almost symmetrical but has one or two pixels out of place.\n# To make the output, identify the pixels that break the symmetry and rotate them into their correct symmetrical positions.\n\ndef main(input_grid):\n    # Get the dimensions of the input grid\n    n, m = input_grid.shape\n    \n    # Create a copy of the input grid to hold the output\n    output_grid = np.copy(input_grid)\n\n    # Check for symmetry and find positions to rotate\n    mid_x, mid_y = n // 2, m // 2\n    pixels_to_rotate = []\n\n    # Iterate over the grid to find pixels that break symmetry\n    for i in range(n):\n        for j in range(m):\n            # Check for the corresponding symmetrical position\n            sym_i, sym_j = n - 1 - i, m - 1 - j\n            if input_grid[i, j] != input_grid[sym_i, sym_j]:\n                pixels_to_rotate.append((i, j, sym_i, sym_j))\n\n    # Rotate the out-of-place pixels to their symmetrical positions\n    for (i, j, sym_i, sym_j) in pixels_to_rotate:\n        output_grid[sym_i, sym_j] = input_grid[i, j]\n\n    return output_grid\n\ndef generate_input():\n    n, m = np.random.randint(5, 8), np.random.randint(5, 8)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly generate a symmetric pattern\n    symmetric_pattern = random_sprite(n // 2, m // 2, density=0.5, symmetry='not_symmetric', color_palette=list(Color.NOT_BLACK))\n\n    # Place the symmetric pattern in all four quadrants of the grid\n    grid[:n//2, :m//2] = symmetric_pattern\n    grid[:n//2, m//2:] = symmetric_pattern\n    grid[n//2:, :m//2] = symmetric_pattern\n    grid[n//2:, m//2:] = symmetric_pattern\n\n    # Introduce some asymmetry by changing a few pixels\n    number_of_changes = np.random.randint(1, 4)  # Change 1 to 3 pixels\n    for _ in range(number_of_changes):\n        x = np.random.randint(0, n)\n        y = np.random.randint(0, m)\n        # Change the pixel to a random color\n        grid[x, y] = np.random.choice(list(Color.NOT_BLACK))\n\n    return grid",
    "examples": [
      [
        [
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            9,
            0,
            0,
            9,
            0,
            0
          ],
          [
            9,
            0,
            0,
            9,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            9,
            0,
            0,
            8,
            0,
            0
          ],
          [
            9,
            5,
            0,
            9,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            9,
            0,
            5,
            9
          ],
          [
            0,
            0,
            8,
            0,
            0,
            9
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            0,
            9,
            0,
            0,
            9
          ],
          [
            0,
            0,
            9,
            0,
            0,
            9
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            8,
            9,
            2,
            8,
            2,
            2
          ],
          [
            0,
            0,
            9,
            0,
            0,
            2
          ],
          [
            0,
            0,
            4,
            0,
            3,
            4
          ],
          [
            8,
            2,
            2,
            8,
            2,
            2
          ],
          [
            0,
            0,
            2,
            0,
            0,
            2
          ],
          [
            0,
            0,
            4,
            0,
            0,
            4
          ]
        ],
        [
          [
            4,
            0,
            0,
            4,
            0,
            0
          ],
          [
            2,
            0,
            0,
            2,
            0,
            0
          ],
          [
            2,
            2,
            8,
            2,
            2,
            8
          ],
          [
            4,
            3,
            0,
            4,
            0,
            0
          ],
          [
            2,
            0,
            0,
            9,
            0,
            0
          ],
          [
            2,
            2,
            8,
            2,
            9,
            8
          ]
        ]
      ],
      [
        [
          [
            1,
            0,
            0,
            1,
            0,
            0
          ],
          [
            5,
            0,
            0,
            5,
            0,
            0
          ],
          [
            5,
            6,
            3,
            5,
            3,
            3
          ],
          [
            1,
            0,
            7,
            1,
            4,
            0
          ],
          [
            5,
            0,
            0,
            5,
            0,
            0
          ],
          [
            5,
            3,
            3,
            5,
            3,
            3
          ]
        ],
        [
          [
            3,
            3,
            5,
            3,
            3,
            5
          ],
          [
            0,
            0,
            5,
            0,
            0,
            5
          ],
          [
            0,
            4,
            1,
            7,
            0,
            1
          ],
          [
            3,
            3,
            5,
            3,
            6,
            5
          ],
          [
            0,
            0,
            5,
            0,
            0,
            5
          ],
          [
            0,
            0,
            1,
            0,
            0,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            9,
            0,
            0,
            9
          ],
          [
            0,
            0,
            9,
            0,
            0,
            9
          ],
          [
            1,
            5,
            3,
            1,
            5,
            3
          ],
          [
            0,
            0,
            9,
            0,
            1,
            9
          ],
          [
            0,
            0,
            9,
            0,
            2,
            9
          ],
          [
            1,
            5,
            3,
            1,
            5,
            3
          ]
        ],
        [
          [
            3,
            5,
            1,
            3,
            5,
            1
          ],
          [
            9,
            2,
            0,
            9,
            0,
            0
          ],
          [
            9,
            1,
            0,
            9,
            0,
            0
          ],
          [
            3,
            5,
            1,
            3,
            5,
            1
          ],
          [
            9,
            0,
            0,
            9,
            0,
            0
          ],
          [
            9,
            0,
            0,
            9,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "bc1d5164.py",
      "3de23699.py",
      "6fa7a44f.py"
    ],
    "problem_id": 66178
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# interleaving, checkerboard pattern\n\n# description:\n# In the input, you will see two sets of colored squares arranged in a grid. \n# To create the output, interleave the two sets in a checkerboard pattern, ensuring that colors alternate between the two sets throughout the grid.\n\ndef main(input_grid):\n    # Get the dimensions of the input grid\n    n, m = input_grid.shape\n\n    # Create an output grid with the same dimensions filled with black\n    output_grid = np.full((n, m), Color.BLACK)\n\n    # Detect objects of the two different colors (assuming there are only two colors in the input)\n    objects = detect_objects(grid=input_grid, monochromatic=True, connectivity=4)\n    \n    # Extract colors from the detected objects\n    colors = [obj[0, 0] for obj in objects]\n\n    # Assume the first color is color_set1 and the second is color_set2\n    color_set1 = colors[0]\n    color_set2 = colors[1]\n\n    # Fill the output grid in a checkerboard pattern\n    for i in range(n):\n        for j in range(m):\n            if (i + j) % 2 == 0:\n                output_grid[i, j] = color_set1\n            else:\n                output_grid[i, j] = color_set2\n\n    return output_grid\n\ndef generate_input():\n    # Initialize a grid of size 8x8\n    n, m = 8, 8\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly choose two colors from the available colors\n    available_colors = list(Color.NOT_BLACK)\n    color_set1, color_set2 = np.random.choice(available_colors, 2, replace=False)\n\n    # Randomly place color_set1 squares\n    for _ in range(np.random.randint(5, 12)):\n        square_x, square_y = np.random.randint(0, n-1), np.random.randint(0, m-1)\n        sprite = np.full((2, 2), color_set1, dtype=int)\n        blit_sprite(grid, sprite, square_x, square_y)\n\n    # Randomly place color_set2 squares\n    for _ in range(np.random.randint(5, 12)):\n        square_x, square_y = np.random.randint(0, n-1), np.random.randint(0, m-1)\n        sprite = np.full((2, 2), color_set2, dtype=int)\n        blit_sprite(grid, sprite, square_x, square_y)\n\n    return grid",
    "examples": [
      [
        [
          [
            6,
            6,
            6,
            7,
            7,
            0,
            0,
            0
          ],
          [
            6,
            7,
            7,
            7,
            7,
            0,
            0,
            0
          ],
          [
            6,
            7,
            7,
            7,
            7,
            7,
            7,
            0
          ],
          [
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            0
          ],
          [
            0,
            0,
            6,
            6,
            7,
            7,
            6,
            6
          ],
          [
            0,
            0,
            7,
            7,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            7,
            7,
            6,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            6,
            6,
            0
          ]
        ],
        [
          [
            0,
            6,
            0,
            6,
            0,
            6,
            0,
            6
          ],
          [
            6,
            0,
            6,
            0,
            6,
            0,
            6,
            0
          ],
          [
            0,
            6,
            0,
            6,
            0,
            6,
            0,
            6
          ],
          [
            6,
            0,
            6,
            0,
            6,
            0,
            6,
            0
          ],
          [
            0,
            6,
            0,
            6,
            0,
            6,
            0,
            6
          ],
          [
            6,
            0,
            6,
            0,
            6,
            0,
            6,
            0
          ],
          [
            0,
            6,
            0,
            6,
            0,
            6,
            0,
            6
          ],
          [
            6,
            0,
            6,
            0,
            6,
            0,
            6,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            5,
            5,
            4,
            4,
            0
          ],
          [
            4,
            4,
            0,
            4,
            4,
            4,
            5,
            5
          ],
          [
            5,
            5,
            0,
            4,
            4,
            0,
            5,
            5
          ],
          [
            5,
            5,
            5,
            0,
            5,
            5,
            4,
            4
          ],
          [
            0,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0,
            5,
            5
          ]
        ],
        [
          [
            0,
            5,
            0,
            5,
            0,
            5,
            0,
            5
          ],
          [
            5,
            0,
            5,
            0,
            5,
            0,
            5,
            0
          ],
          [
            0,
            5,
            0,
            5,
            0,
            5,
            0,
            5
          ],
          [
            5,
            0,
            5,
            0,
            5,
            0,
            5,
            0
          ],
          [
            0,
            5,
            0,
            5,
            0,
            5,
            0,
            5
          ],
          [
            5,
            0,
            5,
            0,
            5,
            0,
            5,
            0
          ],
          [
            0,
            5,
            0,
            5,
            0,
            5,
            0,
            5
          ],
          [
            5,
            0,
            5,
            0,
            5,
            0,
            5,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            4,
            0,
            0,
            7,
            7,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0,
            7,
            7,
            0
          ],
          [
            0,
            4,
            4,
            0,
            4,
            4,
            0,
            0
          ],
          [
            0,
            4,
            4,
            0,
            4,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            7,
            0,
            0,
            7,
            4,
            4
          ],
          [
            4,
            4,
            7,
            7,
            7,
            7,
            4,
            4
          ],
          [
            0,
            0,
            0,
            7,
            7,
            0,
            4,
            4
          ]
        ],
        [
          [
            0,
            4,
            0,
            4,
            0,
            4,
            0,
            4
          ],
          [
            4,
            0,
            4,
            0,
            4,
            0,
            4,
            0
          ],
          [
            0,
            4,
            0,
            4,
            0,
            4,
            0,
            4
          ],
          [
            4,
            0,
            4,
            0,
            4,
            0,
            4,
            0
          ],
          [
            0,
            4,
            0,
            4,
            0,
            4,
            0,
            4
          ],
          [
            4,
            0,
            4,
            0,
            4,
            0,
            4,
            0
          ],
          [
            0,
            4,
            0,
            4,
            0,
            4,
            0,
            4
          ],
          [
            4,
            0,
            4,
            0,
            4,
            0,
            4,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            5,
            0,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            4,
            4,
            5,
            5
          ],
          [
            0,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            0,
            5,
            5,
            0,
            5,
            5,
            0,
            0
          ],
          [
            0,
            5,
            5,
            0,
            5,
            5,
            5,
            4
          ],
          [
            0,
            0,
            0,
            0,
            4,
            5,
            5,
            4
          ]
        ],
        [
          [
            0,
            5,
            0,
            5,
            0,
            5,
            0,
            5
          ],
          [
            5,
            0,
            5,
            0,
            5,
            0,
            5,
            0
          ],
          [
            0,
            5,
            0,
            5,
            0,
            5,
            0,
            5
          ],
          [
            5,
            0,
            5,
            0,
            5,
            0,
            5,
            0
          ],
          [
            0,
            5,
            0,
            5,
            0,
            5,
            0,
            5
          ],
          [
            5,
            0,
            5,
            0,
            5,
            0,
            5,
            0
          ],
          [
            0,
            5,
            0,
            5,
            0,
            5,
            0,
            5
          ],
          [
            5,
            0,
            5,
            0,
            5,
            0,
            5,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "8e1813be.py",
      "1fad071e.py",
      "ff28f65a.py",
      "bd4472b8.py"
    ],
    "problem_id": 67421
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern detection, mirroring, grid transformation\n\n# description:\n# In the input, you will see a grid with a distinct pixel pattern in the center. \n# The task is to identify the pattern and create a larger output grid by mirroring this pattern across both axes.\n# The output should contain the original pattern at the center and its mirrored versions in the four quadrants.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # First, we need to find the bounding box of the pattern in the center\n    objects = find_connected_components(input_grid, monochromatic=True, connectivity=4)\n\n    # Assume there's only one central pattern, get the first one\n    center_pattern = objects[0]\n    center_x, center_y, center_w, center_h = bounding_box(center_pattern)\n\n    # Create an output grid that is double the size of the center pattern\n    output_grid = np.full((center_h * 2, center_w * 2), Color.BLACK)\n\n    # Copy the central pattern to the center of the output grid\n    sprite = crop(center_pattern)\n    blit_sprite(output_grid, sprite, x=center_w // 2, y=center_h // 2, background=Color.BLACK)\n\n    # Mirror the pattern across both axes\n    output_grid[0:center_h, center_w:] = np.flip(sprite, axis=1)  # Mirror horizontally\n    output_grid[center_h:, 0:center_w] = np.flip(sprite, axis=0)  # Mirror vertically\n    output_grid[center_h:, center_w:] = np.flip(sprite)            # Mirror both axes\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly generate a size for the central pattern\n    pattern_height = np.random.randint(3, 6)\n    pattern_width = np.random.randint(3, 6)\n\n    # Create a random pattern\n    pattern_color = np.random.choice(list(Color.NOT_BLACK))\n    central_pattern = random_sprite(n=pattern_height, m=pattern_width, density=0.5, color_palette=[pattern_color])\n\n    # Create a larger grid to place the central pattern\n    grid_size = max(pattern_height, pattern_width) * 2\n    grid = np.full((grid_size, grid_size), Color.BLACK)\n\n    # Place the central pattern in the middle of the grid\n    grid[grid_size // 2 - pattern_height // 2:grid_size // 2 + pattern_height // 2,\n         grid_size // 2 - pattern_width // 2:grid_size // 2 + pattern_width // 2] = central_pattern\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            0,
            0,
            2,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            2,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            0,
            0,
            0,
            0,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            4
          ],
          [
            4,
            4,
            0,
            0,
            0,
            0,
            4,
            4
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            4,
            4
          ],
          [
            0,
            0,
            4,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4,
            4,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "44f52bb0.py",
      "f9012d9b.py"
    ],
    "problem_id": 67830
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, symmetry, color complement\n\n# description:\n# In the input, you will see a grid containing a symmetrical pattern made up of colored pixels. \n# To create the output, rotate this pattern 90 degrees clockwise and fill in any gaps that appear in the process \n# with a uniform color that complements the existing colors.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the bounding box of the non-background pixels\n    x, y, w, h = bounding_box(input_grid, background=Color.BLACK)\n    \n    # Extract the symmetrical pattern\n    pattern = input_grid[y:y+h, x:x+w]\n    \n    # Rotate the pattern 90 degrees clockwise\n    rotated_pattern = np.rot90(pattern, k=-1)\n\n    # Create the output grid with a black background\n    output_grid = np.full((rotated_pattern.shape[0], rotated_pattern.shape[1]), Color.BLACK)\n\n    # Identify the unique colors in the original pattern excluding the background\n    unique_colors = set(pattern.flatten()) - {Color.BLACK}\n    \n    # Determine the complement color (e.g., using simple rules for RGB colors)\n    if unique_colors:\n        # Assuming a simple complement approach: \n        # If Color.RED, complement is Color.MAROON; if Color.GREEN, complement is Color.GREY; etc.\n        # This is a simplified assumption for demonstration.\n        # More complex color complement rules can be implemented based on RGB or HSV space.\n        complement_color = (Color.RED if Color.GREEN in unique_colors else\n                            Color.GREEN if Color.RED in unique_colors else\n                            Color.BLUE if Color.YELLOW in unique_colors else\n                            Color.YELLOW if Color.BLUE in unique_colors else\n                            Color.TEAL if Color.MAROON in unique_colors else\n                            Color.MAROON if Color.TEAL in unique_colors else\n                            Color.GRAY if Color.PINK in unique_colors else\n                            Color.PINK if Color.GRAY in unique_colors else\n                            Color.ORANGE if Color.BLUE in unique_colors else\n                            Color.BLACK)\n\n        # Fill in the gaps in the rotated pattern with the complement color\n        output_grid[rotated_pattern != Color.BLACK] = rotated_pattern[rotated_pattern != Color.BLACK]\n        output_grid[output_grid == Color.BLACK] = complement_color\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a random grid size\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    \n    # Create an empty grid with a black background\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly choose a color for the symmetrical pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create a symmetrical pattern in the center of the grid\n    mid_x, mid_y = n // 2, m // 2\n    \n    # Define a size for the pattern\n    pattern_size = np.random.randint(2, min(mid_x, mid_y) - 1)\n    \n    # Create a symmetrical pattern by filling a square area\n    for i in range(-pattern_size, pattern_size + 1):\n        for j in range(-pattern_size, pattern_size + 1):\n            if abs(i) + abs(j) <= pattern_size:  # Diamond shape for symmetry\n                grid[mid_x + i, mid_y + j] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            6,
            5,
            5
          ],
          [
            5,
            6,
            6,
            6,
            5
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            5,
            6,
            6,
            6,
            5
          ],
          [
            5,
            5,
            6,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            6,
            5,
            5
          ],
          [
            5,
            6,
            6,
            6,
            5
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            5,
            6,
            6,
            6,
            5
          ],
          [
            5,
            5,
            6,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            1,
            4,
            1,
            1
          ],
          [
            1,
            4,
            4,
            4,
            1
          ],
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            1,
            4,
            4,
            4,
            1
          ],
          [
            1,
            1,
            4,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            8,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            9,
            8,
            9,
            9
          ],
          [
            9,
            8,
            8,
            8,
            9
          ],
          [
            8,
            8,
            8,
            8,
            8
          ],
          [
            9,
            8,
            8,
            8,
            9
          ],
          [
            9,
            9,
            8,
            9,
            9
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "995c5fa3.py",
      "3de23699.py"
    ],
    "problem_id": 68188
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# radial symmetry, petal replication\n\n# description:\n# In the input, you will see a colored pattern in the shape of a petal. \n# To make the output, replicate the petal pattern around a central point in a circular fashion, \n# filling in the entire grid with multiple petals evenly spaced out.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the petal pattern in the input grid\n    petal_objects = find_connected_components(input_grid, background=Color.BLACK)\n    assert len(petal_objects) == 1, \"There should be exactly one petal pattern.\"\n    petal = petal_objects[0]\n\n    # Get the bounding box of the petal\n    petal_x, petal_y, petal_width, petal_height = bounding_box(petal)\n\n    # Create an output grid that can fit multiple petals\n    output_grid_width = 2 * petal_width + 1\n    output_grid_height = 2 * petal_height + 1\n    output_grid = np.full((output_grid_height, output_grid_width), Color.BLACK)\n\n    # Calculate the center point of the output grid\n    center_x, center_y = output_grid_width // 2, output_grid_height // 2\n\n    # Place petals in a circular pattern\n    for angle in range(0, 360, 90):  # 4 petals at 90-degree intervals\n        # Calculate the position to blit the petal\n        offset_x = int((petal_width // 2) * np.cos(np.radians(angle)))  # x offset\n        offset_y = int((petal_height // 2) * np.sin(np.radians(angle)))  # y offset\n        blit_sprite(output_grid, petal, x=center_x + offset_x, y=center_y + offset_y, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a random size for the petal pattern\n    petal_height = np.random.randint(3, 5)\n    petal_width = np.random.randint(3, 5)\n\n    # Create a random petal shape using the random_sprite function\n    petal_pattern = random_sprite(petal_height, petal_width, density=0.5, symmetry='not_symmetric', color_palette=Color.NOT_BLACK)\n\n    # Create a larger grid to place the petal in\n    grid_size = max(petal_height, petal_width) + 4  # ensure space for the petal\n    grid = np.full((grid_size, grid_size), Color.BLACK)\n\n    # Place the petal in the center of the grid\n    grid = blit_sprite(grid, petal_pattern, x=2, y=2, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          [
            0,
            0,
            0,
            0,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            1
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "bc1d5164.py",
      "a9f96cdd.py",
      "6fa7a44f.py"
    ],
    "problem_id": 68294
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, pattern extraction, positioning\n\n# description:\n# In the input, you will see a grid with a specific pattern rotated at a random angle (90, 180, or 270 degrees).\n# To create the output, you should identify the rotated pattern and rotate it back to its original orientation \n# while placing it in the center of a larger grid filled with black.\n\ndef main(input_grid):\n    # Identify the pattern in the input\n    objects = find_connected_components(input_grid, connectivity=8)\n    \n    # For simplicity, we assume there's exactly one pattern and we will rotate it back\n    assert len(objects) == 1, \"There should be exactly one pattern.\"\n    \n    # Get the first detected object (the pattern)\n    pattern = crop(objects[0], background=Color.BLACK)\n    \n    # Determine the rotation angle, assuming we are rotating back to 0 degrees\n    # For this example, we will assume the pattern is rotated 90 degrees clockwise. \n    # To rotate back we will rotate 270 degrees counterclockwise.\n    rotated_pattern = np.rot90(pattern, k=3)  # k=3 for 90 degrees clockwise\n\n    # Create the output grid, larger than the pattern\n    output_size = np.array(rotated_pattern.shape) + 4  # 2 pixels padding on each side\n    output_grid = np.full(output_size, Color.BLACK)\n\n    # Place the rotated pattern in the center of the output grid\n    start_x = 2  # 2 pixels padding\n    start_y = 2  # 2 pixels padding\n    blit_sprite(output_grid, rotated_pattern, x=start_x, y=start_y, background=Color.BLACK)\n    \n    return output_grid\n\ndef generate_input():\n    # Create a base grid size\n    n, m = np.random.randint(4, 8), np.random.randint(4, 8)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Generate a pattern to rotate\n    pattern_size = np.random.randint(2, min(n, m) // 2)\n    pattern = random_sprite(pattern_size, pattern_size, density=1, color_palette=Color.NOT_BLACK)\n\n    # Randomly choose a rotation angle (90, 180, or 270 degrees)\n    rotation_choice = np.random.choice([1, 2, 3])  # 1: 90, 2: 180, 3: 270\n    \n    # Rotate the pattern based on the choice to create the input grid\n    if rotation_choice == 1:\n        rotated_pattern = np.rot90(pattern, k=1)  # 90 degrees clockwise\n    elif rotation_choice == 2:\n        rotated_pattern = np.rot90(pattern, k=2)  # 180 degrees\n    else:\n        rotated_pattern = np.rot90(pattern, k=3)  # 270 degrees clockwise\n    \n    # Place the rotated pattern in a random location in the grid\n    x_pos, y_pos = random_free_location_for_sprite(grid, rotated_pattern)\n    grid = blit_sprite(grid, rotated_pattern, x=x_pos, y=y_pos, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "3de23699.py",
      "6b9890af.py"
    ],
    "problem_id": 69746
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pixel shifting, alternating patterns, rotation\n\n# description:\n# In the input, you will see a grid filled with alternating colors in a checkerboard pattern. \n# To create the output, shift each colored pixel one position in a clockwise direction, effectively rotating the pattern.\n\ndef main(input_grid):\n    # Create an output grid of the same size, initialized to black\n    output_grid = np.full_like(input_grid, Color.BLACK)\n\n    # Define the height and width of the grid\n    height, width = input_grid.shape\n\n    # Loop through the grid to apply the clockwise rotation\n    for y in range(height):\n        for x in range(width):\n            if input_grid[y, x] != Color.BLACK:\n                # Clockwise rotation (x, y) -> (y, width - 1 - x)\n                new_x = y\n                new_y = width - 1 - x\n                output_grid[new_y, new_x] = input_grid[y, x]\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    \n    # Create a grid with a black background\n    grid = np.full((n, m), Color.BLACK)\n\n    # Define the colors to be used in the checkerboard pattern\n    colors = np.random.choice(list(Color.NOT_BLACK), 2, replace=False)\n\n    # Fill the grid with a checkerboard pattern using the two colors\n    for y in range(n):\n        for x in range(m):\n            if (x + y) % 2 == 0:\n                grid[y, x] = colors[0]\n            else:\n                grid[y, x] = colors[1]\n\n    return grid",
    "examples": [
      [
        [
          [
            5,
            9,
            5,
            9,
            5,
            9,
            5,
            9
          ],
          [
            9,
            5,
            9,
            5,
            9,
            5,
            9,
            5
          ],
          [
            5,
            9,
            5,
            9,
            5,
            9,
            5,
            9
          ],
          [
            9,
            5,
            9,
            5,
            9,
            5,
            9,
            5
          ],
          [
            5,
            9,
            5,
            9,
            5,
            9,
            5,
            9
          ],
          [
            9,
            5,
            9,
            5,
            9,
            5,
            9,
            5
          ],
          [
            5,
            9,
            5,
            9,
            5,
            9,
            5,
            9
          ],
          [
            9,
            5,
            9,
            5,
            9,
            5,
            9,
            5
          ]
        ],
        [
          [
            9,
            5,
            9,
            5,
            9,
            5,
            9,
            5
          ],
          [
            5,
            9,
            5,
            9,
            5,
            9,
            5,
            9
          ],
          [
            9,
            5,
            9,
            5,
            9,
            5,
            9,
            5
          ],
          [
            5,
            9,
            5,
            9,
            5,
            9,
            5,
            9
          ],
          [
            9,
            5,
            9,
            5,
            9,
            5,
            9,
            5
          ],
          [
            5,
            9,
            5,
            9,
            5,
            9,
            5,
            9
          ],
          [
            9,
            5,
            9,
            5,
            9,
            5,
            9,
            5
          ],
          [
            5,
            9,
            5,
            9,
            5,
            9,
            5,
            9
          ]
        ]
      ],
      [
        [
          [
            6,
            7,
            6,
            7,
            6,
            7
          ],
          [
            7,
            6,
            7,
            6,
            7,
            6
          ],
          [
            6,
            7,
            6,
            7,
            6,
            7
          ],
          [
            7,
            6,
            7,
            6,
            7,
            6
          ],
          [
            6,
            7,
            6,
            7,
            6,
            7
          ],
          [
            7,
            6,
            7,
            6,
            7,
            6
          ]
        ],
        [
          [
            7,
            6,
            7,
            6,
            7,
            6
          ],
          [
            6,
            7,
            6,
            7,
            6,
            7
          ],
          [
            7,
            6,
            7,
            6,
            7,
            6
          ],
          [
            6,
            7,
            6,
            7,
            6,
            7
          ],
          [
            7,
            6,
            7,
            6,
            7,
            6
          ],
          [
            6,
            7,
            6,
            7,
            6,
            7
          ]
        ]
      ],
      [
        [
          [
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1
          ]
        ],
        [
          [
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2
          ],
          [
            2,
            1,
            2,
            1,
            2,
            1
          ],
          [
            1,
            2,
            1,
            2,
            1,
            2
          ]
        ]
      ],
      [
        [
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ]
        ],
        [
          [
            3,
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2,
            3
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "bd4472b8.py",
      "6fa7a44f.py",
      "6d58a25d.py"
    ],
    "problem_id": 69936
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# reflection, rotation\n\n# description:\n# In the input, you will see a colored pattern in the center of the grid. \n# To make the output, rotate the pattern 90 degrees clockwise and place it in the top right corner,\n# then reflect the original pattern across the vertical midline and place it in the bottom left corner.\n# Finally, put the original pattern in the center.\n\ndef main(input_grid):\n    # Get the original pattern from the center of the input grid\n    center_pattern = crop(input_grid)\n    \n    # Rotate the center pattern 90 degrees clockwise\n    rotated_pattern = np.rot90(center_pattern, k=-1)\n\n    # Create the output grid which is the same size as the input grid\n    output_grid = np.zeros_like(input_grid)\n\n    # Place the original pattern in the center\n    center_x, center_y = input_grid.shape[0] // 2, input_grid.shape[1] // 2\n    output_grid[center_x - center_pattern.shape[0] // 2:center_x + center_pattern.shape[0] // 2,\n                center_y - center_pattern.shape[1] // 2:center_y + center_pattern.shape[1] // 2] = center_pattern\n\n    # Place the rotated pattern in the top right corner\n    output_grid[:rotated_pattern.shape[0], -rotated_pattern.shape[1]:] = rotated_pattern\n\n    # Reflect the center pattern across the vertical midline\n    reflected_pattern = center_pattern[:, ::-1]\n\n    # Place the reflected pattern in the bottom left corner\n    output_grid[-reflected_pattern.shape[0]:, :reflected_pattern.shape[1]] = reflected_pattern\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random size for the central pattern\n    n = np.random.randint(3, 6)\n    m = np.random.randint(3, 6)\n\n    # Generate a central pattern with random colors\n    center_pattern = random_sprite(n, m, density=1, symmetry=None, color_palette=Color.NOT_BLACK)\n\n    # Create a larger grid to hold the patterns\n    grid_size = max(6, max(n, m) * 2)  # Ensure the grid is large enough\n    grid = np.zeros((grid_size, grid_size), dtype=int)\n\n    # Place the central pattern in the center of the grid\n    start_x = (grid_size - n) // 2\n    start_y = (grid_size - m) // 2\n    blit_sprite(grid, center_pattern, start_x, start_y, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            9,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            7,
            5,
            0,
            0
          ],
          [
            0,
            0,
            4,
            7,
            2,
            3,
            0,
            0
          ],
          [
            0,
            0,
            9,
            5,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            9,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            5,
            7,
            4,
            4
          ],
          [
            0,
            0,
            4,
            4,
            3,
            2,
            7,
            4
          ],
          [
            0,
            0,
            4,
            4,
            3,
            3,
            5,
            9
          ],
          [
            9,
            4,
            4,
            4,
            2,
            3,
            0,
            0
          ],
          [
            5,
            7,
            4,
            4,
            3,
            3,
            0,
            0
          ],
          [
            3,
            2,
            7,
            4,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            5,
            9,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            6,
            9,
            0,
            0
          ],
          [
            0,
            0,
            3,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            9,
            6,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            3,
            9,
            9,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            3,
            9,
            3,
            3
          ],
          [
            0,
            0,
            0,
            0,
            9,
            6,
            6,
            3
          ],
          [
            0,
            0,
            3,
            3,
            9,
            1,
            6,
            6
          ],
          [
            0,
            0,
            3,
            6,
            8,
            1,
            6,
            9
          ],
          [
            9,
            6,
            3,
            3,
            1,
            1,
            0,
            0
          ],
          [
            6,
            6,
            6,
            3,
            9,
            8,
            0,
            0
          ],
          [
            1,
            1,
            6,
            9,
            0,
            0,
            0,
            0
          ],
          [
            8,
            9,
            9,
            3,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            7,
            5,
            7,
            0,
            0
          ],
          [
            0,
            0,
            3,
            7,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            3,
            4,
            4,
            1,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            5,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            9,
            3,
            3,
            2
          ],
          [
            0,
            0,
            0,
            0,
            9,
            4,
            7,
            7
          ],
          [
            0,
            0,
            2,
            7,
            5,
            4,
            7,
            5
          ],
          [
            0,
            0,
            3,
            7,
            3,
            1,
            7,
            7
          ],
          [
            7,
            5,
            7,
            2,
            4,
            1,
            0,
            0
          ],
          [
            7,
            7,
            7,
            3,
            5,
            3,
            0,
            0
          ],
          [
            1,
            4,
            4,
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            5,
            9,
            9,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            5,
            3,
            8,
            0,
            0
          ],
          [
            0,
            0,
            9,
            5,
            9,
            8,
            0,
            0
          ],
          [
            0,
            0,
            9,
            5,
            9,
            8,
            0,
            0
          ],
          [
            0,
            0,
            9,
            5,
            3,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            9,
            9,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            5,
            5,
            5,
            5
          ],
          [
            0,
            0,
            9,
            5,
            3,
            9,
            9,
            3
          ],
          [
            0,
            0,
            9,
            5,
            8,
            8,
            8,
            8
          ],
          [
            8,
            3,
            5,
            9,
            9,
            8,
            0,
            0
          ],
          [
            8,
            9,
            5,
            9,
            3,
            8,
            0,
            0
          ],
          [
            8,
            9,
            5,
            9,
            0,
            0,
            0,
            0
          ],
          [
            8,
            3,
            5,
            9,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "3de23699.py",
      "995c5fa3.py"
    ],
    "problem_id": 70139
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color detection, shape extraction, color transformation\n\n# description:\n# In the input grid, you will see various shapes, each surrounded by a different color border. \n# To create the output grid, extract all shapes that are surrounded by green borders and fill them with yellow.\n\ndef main(input_grid):\n    # Detect all connected components in the grid\n    components = find_connected_components(input_grid, connectivity=4)\n\n    # Create a copy of the input grid to build the output grid\n    output_grid = input_grid.copy()\n\n    for component in components:\n        # Get the bounding box of the component\n        x, y, width, height = bounding_box(component)\n\n        # Check the border color of the component\n        border_color = component[0, 0]  # Assuming the border color is at the top-left corner\n\n        # If the border color is green, fill the shape with yellow\n        if border_color == Color.GREEN:\n            # Fill the shape with yellow\n            for i in range(height):\n                for j in range(width):\n                    if component[i, j] != Color.BLACK:  # Fill only non-background pixels\n                        output_grid[x + i, y + j] = Color.YELLOW\n\n    return output_grid\n\ndef generate_input():\n    # Create a black grid with random dimensions\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Define the colors for borders\n    border_colors = [Color.GREEN, Color.RED, Color.BLUE, Color.YELLOW]\n\n    # Randomly place a certain number of shapes with green borders\n    for _ in range(np.random.randint(1, 5)):\n        shape_height, shape_width = np.random.randint(2, 5), np.random.randint(2, 5)\n        shape_x, shape_y = np.random.randint(0, n - shape_height), np.random.randint(0, m - shape_width)\n\n        # Draw a border around the shape\n        border_color = Color.GREEN if np.random.rand() < 0.5 else np.random.choice(border_colors)\n        for i in range(shape_height + 2):\n            for j in range(shape_width + 2):\n                if i == 0 or i == shape_height + 1 or j == 0 or j == shape_width + 1:\n                    grid[shape_x + i - 1, shape_y + j - 1] = border_color\n                else:\n                    grid[shape_x + i - 1, shape_y + j - 1] = Color.BLACK  # Fill the shape with black\n\n    return grid",
    "examples": [
      [
        [
          [
            3,
            3,
            3,
            3,
            4
          ],
          [
            3,
            0,
            0,
            3,
            2
          ],
          [
            3,
            0,
            0,
            3,
            2
          ],
          [
            3,
            3,
            3,
            3,
            2
          ],
          [
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2
          ]
        ],
        [
          [
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            0,
            0,
            4,
            2
          ],
          [
            4,
            0,
            0,
            4,
            2
          ],
          [
            4,
            4,
            4,
            4,
            2
          ],
          [
            0,
            0,
            0,
            0,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            0,
            0,
            3,
            2
          ],
          [
            3,
            0,
            0,
            0,
            0,
            3,
            2
          ],
          [
            3,
            0,
            0,
            0,
            0,
            3,
            2
          ],
          [
            3,
            0,
            0,
            0,
            0,
            3,
            2
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            2
          ],
          [
            2,
            2,
            2,
            2,
            0,
            0,
            2
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            0
          ]
        ],
        [
          [
            4,
            0,
            0,
            0,
            0,
            3,
            2
          ],
          [
            4,
            0,
            0,
            0,
            0,
            3,
            2
          ],
          [
            4,
            0,
            0,
            0,
            0,
            3,
            2
          ],
          [
            4,
            0,
            0,
            0,
            0,
            3,
            2
          ],
          [
            4,
            4,
            4,
            4,
            4,
            3,
            2
          ],
          [
            2,
            2,
            2,
            2,
            0,
            0,
            2
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            3,
            0,
            0
          ],
          [
            3,
            0,
            0,
            3,
            0,
            0
          ],
          [
            3,
            0,
            0,
            3,
            0,
            4
          ],
          [
            3,
            3,
            3,
            3,
            0,
            4
          ],
          [
            0,
            0,
            4,
            0,
            0,
            4
          ],
          [
            0,
            0,
            4,
            0,
            0,
            4
          ],
          [
            4,
            4,
            4,
            0,
            0,
            4
          ],
          [
            3,
            3,
            3,
            3,
            0,
            0
          ]
        ],
        [
          [
            4,
            0,
            0,
            4,
            0,
            0
          ],
          [
            4,
            0,
            0,
            4,
            0,
            0
          ],
          [
            4,
            0,
            0,
            4,
            0,
            4
          ],
          [
            4,
            4,
            4,
            4,
            0,
            4
          ],
          [
            0,
            0,
            4,
            0,
            0,
            4
          ],
          [
            0,
            0,
            4,
            0,
            0,
            4
          ],
          [
            4,
            4,
            4,
            0,
            0,
            4
          ],
          [
            3,
            3,
            3,
            3,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            3,
            3,
            0,
            3
          ],
          [
            3,
            0,
            0,
            3,
            3,
            0,
            3
          ],
          [
            3,
            0,
            0,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            0,
            0,
            3
          ],
          [
            1,
            0,
            0,
            3,
            0,
            0,
            3
          ],
          [
            1,
            1,
            1,
            3,
            0,
            0,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ]
        ],
        [
          [
            4,
            0,
            0,
            4,
            4,
            0,
            4
          ],
          [
            4,
            0,
            0,
            4,
            4,
            0,
            4
          ],
          [
            4,
            0,
            0,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            4,
            0,
            0,
            4
          ],
          [
            1,
            0,
            0,
            4,
            0,
            0,
            4
          ],
          [
            1,
            1,
            1,
            4,
            0,
            0,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ]
        ]
      ]
    ],
    "seeds": [
      "aedd82e4.py",
      "941d9a10.py",
      "810b9b61.py",
      "7447852a.py"
    ],
    "problem_id": 70849
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# negative space, color filling\n\n# description:\n# In the input, you will see a grid filled with random colored pixels and some empty spaces. \n# To create the output, fill all empty spaces with a specific color that matches the surrounding pixels, \n# effectively creating a pattern based on the negative space.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Create a copy of the input grid for the output\n    output_grid = np.copy(input_grid)\n    \n    # Find connected components of the colored pixels\n    colored_components = find_connected_components(input_grid, background=Color.BLACK, connectivity=4, monochromatic=False)\n\n    # Iterate through each component and fill the surrounding empty pixels\n    for component in colored_components:\n        # Get the bounding box of the current component\n        x, y, width, height = bounding_box(component)\n        \n        # Define the color to fill the empty spaces\n        fill_color = component[0, 0]  # Taking the color from the top-left pixel of the component\n        \n        # Iterate over the rows and columns of the bounding box\n        for i in range(max(0, x - 1), min(output_grid.shape[0], x + height + 1)):\n            for j in range(max(0, y - 1), min(output_grid.shape[1], y + width + 1)):\n                # If the current position is empty (background), fill it with the fill color\n                if output_grid[i, j] == Color.BLACK:\n                    # Check if it is surrounded by the component color\n                    if ((i > 0 and output_grid[i-1, j] == fill_color) or\n                        (i < output_grid.shape[0] - 1 and output_grid[i+1, j] == fill_color) or\n                        (j > 0 and output_grid[i, j-1] == fill_color) or\n                        (j < output_grid.shape[1] - 1 and output_grid[i, j+1] == fill_color)):\n                        output_grid[i, j] = fill_color\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly generate the size of the grid\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly fill in some colored pixels\n    num_colored_pixels = np.random.randint(5, 15)\n    for _ in range(num_colored_pixels):\n        x, y = np.random.randint(0, n), np.random.randint(0, m)\n        grid[x, y] = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create some empty spaces to serve as negative spaces\n    num_empty_spaces = np.random.randint(3, 10)\n    for _ in range(num_empty_spaces):\n        x, y = np.random.randint(0, n), np.random.randint(0, m)\n        grid[x, y] = Color.BLACK  # Ensure some are empty\n    \n    return grid",
    "examples": [
      [
        [
          [
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            5,
            0,
            0,
            0,
            1
          ],
          [
            0,
            0,
            7,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            2,
            0
          ]
        ],
        [
          [
            3,
            3,
            0,
            0,
            0
          ],
          [
            3,
            3,
            0,
            0,
            0
          ],
          [
            5,
            0,
            0,
            0,
            1
          ],
          [
            0,
            0,
            7,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            2,
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0,
            3
          ],
          [
            7,
            1,
            1,
            0,
            0
          ],
          [
            1,
            0,
            0,
            9,
            0
          ]
        ],
        [
          [
            6,
            6,
            0,
            0,
            0
          ],
          [
            6,
            6,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0,
            3
          ],
          [
            7,
            1,
            1,
            0,
            0
          ],
          [
            1,
            0,
            0,
            9,
            0
          ]
        ]
      ],
      [
        [
          [
            9,
            0,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            0,
            0,
            6,
            0,
            0,
            5,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            9,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0,
            7
          ],
          [
            9,
            9,
            6,
            0,
            0,
            5,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            9,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          [
            0,
            5,
            0,
            0,
            0,
            7,
            0,
            0
          ],
          [
            0,
            4,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            0,
            9,
            0
          ],
          [
            7,
            0,
            3,
            0,
            0,
            0,
            9,
            0
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          [
            3,
            5,
            0,
            0,
            0,
            7,
            0,
            0
          ],
          [
            0,
            4,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            0,
            9,
            0
          ],
          [
            7,
            0,
            3,
            0,
            0,
            0,
            9,
            0
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "a9f96cdd.py",
      "bc1d5164.py",
      "1f642eb9.py",
      "3de23699.py"
    ],
    "problem_id": 71057
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# object stacking, color matching\n\n# description:\n# In the input, you will see several stacks of colored blocks in a grid format. Each stack consists of blocks of different colors arranged vertically (one on top of the other). You should generate an output grid such that all stacks are aligned horizontally with the same color blocks in each stack. If a stack has more blocks than others, only the topmost block should be visible.\n\ndef main(input_grid):\n    # Plan:\n    # 1. Extract the stacks of blocks from the input grid.\n    # 2. Identify the maximum height of the stacks.\n    # 3. Create an output grid where stacks are aligned horizontally and only the topmost block of each stack is visible.\n\n    # Detecting connected components (stacks) in the input grid\n    stacks = find_connected_components(input_grid, monochromatic=False, connectivity=4)\n\n    # Prepare the output grid\n    max_height = max([stack.shape[0] for stack in stacks])  # Get the maximum height of stacks\n    output_width = len(stacks)\n    output_grid = np.full((max_height, output_width), Color.BLACK)\n\n    # For each stack, place the topmost visible block in the appropriate column of the output grid.\n    for col, stack in enumerate(stacks):\n        # Get the color of the topmost block in the stack\n        topmost_block_color = stack[0, 0]  # Assuming the stack is vertical and the topmost block is at (0,0)\n        output_grid[0, col] = topmost_block_color  # Place it in the output grid\n\n    return output_grid\n\ndef generate_input():\n    # Create a 5x5 grid with stacks of colored blocks.\n    n, m = 5, 5\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly generate stacks with varying heights and colors\n    num_stacks = np.random.randint(3, 6)  # Random number of stacks\n    colors = [Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW, Color.PINK, Color.ORANGE]  # Available colors\n\n    for col in range(num_stacks):\n        stack_height = np.random.randint(1, n + 1)  # Random height for the stack\n        for row in range(stack_height):\n            # Assign a random color to each block in the stack\n            block_color = random.choice(colors)\n            grid[n - 1 - row, col] = block_color  # Place the block in the grid (bottom-up)\n\n    return grid",
    "examples": [
      [
        [
          [
            4,
            0,
            0,
            0,
            0
          ],
          [
            2,
            0,
            2,
            6,
            0
          ],
          [
            1,
            0,
            1,
            2,
            2
          ],
          [
            1,
            0,
            3,
            1,
            3
          ],
          [
            1,
            6,
            2,
            7,
            6
          ]
        ],
        [
          [
            4
          ],
          [
            0
          ],
          [
            0
          ],
          [
            0
          ],
          [
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            7,
            0,
            0,
            0
          ],
          [
            2,
            3,
            0,
            0,
            0
          ],
          [
            2,
            6,
            0,
            0,
            0
          ],
          [
            7,
            2,
            3,
            0,
            0
          ],
          [
            7,
            3,
            2,
            0,
            0
          ]
        ],
        [
          [
            6
          ],
          [
            0
          ],
          [
            0
          ],
          [
            0
          ],
          [
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            0,
            6,
            0,
            0
          ],
          [
            3,
            1,
            6,
            0,
            1
          ],
          [
            6,
            2,
            6,
            0,
            3
          ],
          [
            1,
            7,
            1,
            0,
            2
          ],
          [
            6,
            3,
            1,
            7,
            1
          ]
        ],
        [
          [
            6
          ],
          [
            0
          ],
          [
            0
          ],
          [
            0
          ],
          [
            0
          ]
        ]
      ],
      [
        [
          [
            1,
            4,
            0,
            0,
            0
          ],
          [
            1,
            1,
            7,
            0,
            0
          ],
          [
            1,
            4,
            4,
            0,
            0
          ],
          [
            1,
            3,
            7,
            0,
            0
          ],
          [
            3,
            3,
            4,
            0,
            0
          ]
        ],
        [
          [
            1
          ],
          [
            0
          ],
          [
            0
          ],
          [
            0
          ],
          [
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "137eaa0f.py",
      "1f642eb9.py",
      "0e206a2e.py",
      "48d8fb45.py"
    ],
    "problem_id": 71185
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# radial symmetry, pattern expansion\n\n# description:\n# In the input grid, you will see a series of colored pixels arranged in a circular pattern. \n# To make the output, extend the circular pattern radially outward, duplicating the colors and maintaining the same spacing. \n# The output should be a larger circular pattern that retains the original arrangement of colors.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the connected components in the input to get the circular pattern\n    objects = find_connected_components(input_grid, monochromatic=False, connectivity=8)\n    \n    # Since we assume there's only one circular pattern, get the first object\n    circular_pattern = objects[0]\n    \n    # Determine the bounding box of the circular pattern\n    x, y, width, height = bounding_box(circular_pattern)\n    \n    # Calculate the size of the output grid\n    output_size = max(width, height) * 2  # Expand the size to twice the largest dimension\n    output_grid = np.full((output_size, output_size), Color.BLACK)\n    \n    # Calculate the center of the output grid\n    center_x, center_y = output_size // 2, output_size // 2\n    \n    # Get the color pattern from the central object\n    sprite = crop(circular_pattern)\n\n    # Blit the sprite into the output grid at the center\n    blit_sprite(output_grid, sprite, x=center_x - width // 2, y=center_y - height // 2, background=Color.BLACK)\n\n    # Extend the pattern radially outward, duplicating the colors\n    for r in range(1, (output_size // 2) // max(width, height) + 1):\n        blit_sprite(output_grid, sprite, x=center_x - width // 2 + r * width, y=center_y - height // 2, background=Color.BLACK)  # right\n        blit_sprite(output_grid, sprite, x=center_x + width // 2 - r * width, y=center_y - height // 2, background=Color.BLACK)  # left\n        blit_sprite(output_grid, sprite, x=center_x - width // 2, y=center_y - height // 2 + r * height, background=Color.BLACK)  # down\n        blit_sprite(output_grid, sprite, x=center_x - width // 2, y=center_y + height // 2 - r * height, background=Color.BLACK)  # up\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a random grid size\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Get a random color for the circular pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Draw a random pattern in the center of the grid to simulate a circular pattern\n    radius = np.random.randint(1, min(n, m) // 4)\n    y, x = np.ogrid[-radius:radius+1, -radius:radius+1]\n    mask = x**2 + y**2 <= radius**2\n\n    # Center the circular pattern in the grid\n    center_x, center_y = n // 2, m // 2\n    grid[center_x-radius:center_x+radius+1, center_y-radius:center_y+radius+1][mask] = color\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0
          ],
          [
            0,
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0
          ],
          [
            0,
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4
          ],
          [
            0,
            0,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            8,
            0
          ],
          [
            0,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6d58a25d.py",
      "3de23699.py",
      "a9f96cdd.py"
    ],
    "problem_id": 73054
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, color filling\n\n# description:\n# In the input, you will see a grid with a recognizable pattern (like a diamond). \n# To create the output, rotate the pattern 90 degrees counterclockwise and fill the surrounding cells with a contrasting color (e.g., pink).\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Create a copy of the input grid for output.\n    output_grid = np.copy(input_grid)\n\n    # Crop the pattern from the input grid.\n    pattern = crop(output_grid, background=Color.BLACK)\n\n    # Rotate the pattern 90 degrees counterclockwise.\n    rotated_pattern = np.rot90(pattern)\n\n    # Get the size of the rotated pattern.\n    n, m = rotated_pattern.shape\n\n    # Create a new output grid with a contrasting color surrounding the rotated pattern.\n    output_grid = np.full((n + 2, m + 2), Color.PINK)\n    \n    # Place the rotated pattern in the center of the new grid.\n    output_grid[1:n+1, 1:m+1] = rotated_pattern\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly decide the size of the diamond pattern.\n    size = np.random.randint(3, 7)\n\n    # Create a base grid with a black background.\n    grid_size = size + 2  # Add space for the contrasting border\n    grid = np.zeros((grid_size, grid_size), dtype=int)\n\n    # Create a diamond shape in the grid.\n    for i in range(size):\n        for j in range(size):\n            if abs(i - size // 2) + abs(j - size // 2) < size // 2 + 1:\n                grid[i, j] = Color.BLUE  # Fill the diamond area with blue\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            0,
            1,
            1,
            1,
            6
          ],
          [
            6,
            1,
            1,
            1,
            1,
            6
          ],
          [
            6,
            0,
            1,
            1,
            1,
            6
          ],
          [
            6,
            0,
            0,
            1,
            0,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            0,
            0,
            1,
            0,
            0,
            6
          ],
          [
            6,
            0,
            1,
            1,
            1,
            0,
            6
          ],
          [
            6,
            1,
            1,
            1,
            1,
            1,
            6
          ],
          [
            6,
            0,
            1,
            1,
            1,
            0,
            6
          ],
          [
            6,
            0,
            0,
            1,
            0,
            0,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            1,
            0,
            0,
            0
          ],
          [
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            0,
            1,
            0,
            6
          ],
          [
            6,
            1,
            1,
            1,
            6
          ],
          [
            6,
            0,
            1,
            0,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            0,
            0,
            1,
            1,
            1,
            0,
            6
          ],
          [
            6,
            0,
            1,
            1,
            1,
            1,
            1,
            6
          ],
          [
            6,
            1,
            1,
            1,
            1,
            1,
            1,
            6
          ],
          [
            6,
            0,
            1,
            1,
            1,
            1,
            1,
            6
          ],
          [
            6,
            0,
            0,
            1,
            1,
            1,
            0,
            6
          ],
          [
            6,
            0,
            0,
            0,
            1,
            0,
            0,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "bc1d5164.py",
      "6fa7a44f.py",
      "995c5fa3.py"
    ],
    "problem_id": 75288
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# object stacking, height adjustment\n\n# description:\n# In the input, you will see several colored objects randomly placed on a black background. Each object is represented as a vertical stack of pixels. \n# To create the output, you should adjust the heights of all objects to match the height of the tallest object, stacking them vertically without overlapping.\n\ndef main(input_grid):\n    # Plan:\n    # 1. Extract the objects from the input using the function `detect_objects`.\n    # 2. Determine the maximum height of these objects.\n    # 3. Create an output grid that is tall enough to accommodate the tallest object.\n    # 4. Place each object in the output grid at the same x-coordinate, adjusting their y-coordinates to stack them properly.\n\n    # Detect objects in the input grid (1 color per object)\n    objects = detect_objects(input_grid, monochromatic=True, connectivity=4)\n\n    # Determine the maximum height of the objects\n    max_height = max(obj.shape[0] for obj in objects)\n\n    # Create an output grid with the same width but height of max_height\n    output_grid = np.full((max_height, input_grid.shape[1]), Color.BLACK)\n\n    # Place each object in the output grid, stacking them vertically\n    for obj in objects:\n        # Get the x-coordinate where the object is placed\n        x_coord = np.where(input_grid == obj[0, 0])[1][0]  # taking the color of the first pixel as reference\n\n        # Determine the height of the current object\n        obj_height = obj.shape[0]\n\n        # Calculate the y-coordinate to place the object at (bottom align)\n        y_coord = max_height - obj_height\n\n        # Place the object in the output grid\n        blit_sprite(output_grid, obj, x_coord, y_coord, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input():\n    # Create a grid of random height and width\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly determine the number of objects\n    n_objects = np.random.randint(2, 5)\n    \n    for _ in range(n_objects):\n        # Create a vertical object of random height\n        height = np.random.randint(1, 5)\n        width = 1  # each object is a vertical stack\n        sprite = random_sprite(width, height)\n\n        # Find a random x position to place the object\n        x = np.random.randint(0, m)\n        y = np.random.randint(0, n - height + 1)  # ensure it fits in the grid\n\n        # Blit the sprite to the grid\n        blit_sprite(grid, sprite, x, y)\n\n    return grid",
    "examples": [
      [
        [
          [
            9,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            9,
            3,
            0
          ],
          [
            8,
            8,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            3,
            0
          ],
          [
            8,
            8,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            5,
            5,
            5,
            0
          ],
          [
            8,
            8,
            8,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            3,
            3
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            8,
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            6,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            5,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "137eaa0f.py",
      "1f642eb9.py",
      "1caeab9d.py",
      "017c7c7b.py"
    ],
    "problem_id": 76159
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, color mapping, pattern transformation\n\n# description:\n# In the input, you will see a grid with a colored circular pattern in the center. \n# To make the output, rotate the circular pattern by 90 degrees clockwise and change its color according to the following mapping: \n# blue -> yellow, green -> red, yellow -> blue, and red -> green.\n\ndef main(input_grid):\n    # Find the center of the grid\n    center_x, center_y = input_grid.shape[0] // 2, input_grid.shape[1] // 2\n    \n    # Detect the bounding box of the circular pattern\n    circular_pattern = crop(input_grid, background=Color.BLACK)\n    \n    # Rotate the circular pattern by 90 degrees clockwise\n    rotated_pattern = np.rot90(circular_pattern, k=-1)\n    \n    # Create a color mapping\n    color_map = {\n        Color.BLUE: Color.YELLOW,\n        Color.GREEN: Color.RED,\n        Color.YELLOW: Color.BLUE,\n        Color.RED: Color.GREEN\n    }\n    \n    # Apply the color mapping to the rotated pattern\n    output_pattern = np.vectorize(lambda color: color_map.get(color, color))(rotated_pattern)\n    \n    # Create an empty output grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n    \n    # Calculate the position to place the rotated pattern back into the output grid\n    pattern_height, pattern_width = output_pattern.shape\n    start_x = center_x - pattern_height // 2\n    start_y = center_y - pattern_width // 2\n    \n    # Blit the output pattern into the correct position\n    output_grid = blit_sprite(output_grid, output_pattern, start_x, start_y, background=Color.BLACK)\n    \n    return output_grid\n\ndef generate_input():\n    # Create an empty grid\n    n, m = 7, 7\n    grid = np.full((n, m), Color.BLACK)\n\n    # Define a simple circular pattern\n    circle_color = np.random.choice([Color.BLUE, Color.GREEN, Color.YELLOW, Color.RED])\n    \n    # Draw a circular pattern in the center of the grid\n    center_x, center_y = n // 2, m // 2\n    radius = 2\n    for x in range(n):\n        for y in range(m):\n            if (x - center_x) ** 2 + (y - center_y) ** 2 <= radius ** 2:\n                grid[x, y] = circle_color\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            3,
            0,
            0
          ],
          [
            0,
            3,
            3,
            3,
            3,
            3,
            0
          ],
          [
            0,
            0,
            3,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            1,
            1,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            3,
            0,
            0
          ],
          [
            0,
            3,
            3,
            3,
            3,
            3,
            0
          ],
          [
            0,
            0,
            3,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "0d3d703e.py",
      "0ca9ddb6.py",
      "a9f96cdd.py",
      "995c5fa3.py"
    ],
    "problem_id": 76640
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color blending, shape merging\n\n# description:\n# In the input, you will see a grid with colored pixels forming distinct shapes. Each shape is made of the same color. \n# To make the output, you should merge all shapes of the same color into one larger shape. \n# The output grid should reflect the largest possible merged shapes for each color, while preserving their original color.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Start with a blank output grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Find all connected components (shapes) in the input grid\n    objects = find_connected_components(input_grid, monochromatic=True, background=Color.BLACK, connectivity=8)\n\n    # Merge each shape of the same color\n    for obj in objects:\n        # Get the color of the current shape\n        color = obj[0][0]  # All pixels in the object are the same color\n        \n        # Create a bounding box for the shape\n        x, y, width, height = bounding_box(obj)\n        \n        # Draw the merged shape in the output grid at the corresponding position\n        output_grid[x:x+width, y:y+height] = color\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a grid of random size\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly choose the number of shapes and their colors\n    num_shapes = np.random.randint(2, 5)\n    colors = np.random.choice(list(Color.NOT_BLACK), size=num_shapes, replace=False)\n\n    # Randomly generate each shape\n    for color in colors:\n        # Random shape size\n        shape_n, shape_m = np.random.randint(1, 4), np.random.randint(1, 4)\n        \n        # Random position for the shape ensuring it fits in the grid\n        x, y = np.random.randint(0, n - shape_n + 1), np.random.randint(0, m - shape_m + 1)\n        \n        # Create the shape in the grid\n        shape = random_sprite(shape_n, shape_m, density=1.0, color_palette=[color])\n        grid = blit_sprite(grid, shape, x, y, background=Color.BLACK)\n    \n    return grid",
    "examples": [
      [
        [
          [
            6,
            6,
            6,
            0,
            2,
            2
          ],
          [
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            8,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            3,
            3,
            3
          ],
          [
            4,
            4,
            2,
            0,
            7,
            7,
            0
          ],
          [
            0,
            0,
            0,
            0,
            7,
            7,
            0
          ],
          [
            0,
            0,
            0,
            0,
            7,
            7,
            0
          ]
        ],
        [
          [
            4,
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            9,
            9,
            0,
            0
          ],
          [
            0,
            2,
            2,
            5,
            0
          ],
          [
            0,
            2,
            2,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            0
          ]
        ],
        [
          [
            4,
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            3,
            1,
            1,
            1,
            0,
            0
          ],
          [
            3,
            3,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0
          ]
        ],
        [
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "a9f96cdd.py",
      "3de23699.py",
      "bc1d5164.py",
      "31aa019c.py"
    ],
    "problem_id": 76832
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# radial symmetry, color propagation\n\n# description:\n# In the input, you will see a central colored pixel on a black background.\n# To create the output, generate a pattern that displays radial symmetry around the central pixel, \n# using the same color as the central pixel to fill in the surrounding pixels symmetrically.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the central colored pixel, which is not black\n    center_pixel_objects = detect_objects(grid=input_grid, colors=Color.NOT_BLACK, allowed_dimensions=[(1, 1)], monochromatic=True, connectivity=4)\n    assert len(center_pixel_objects) == 1, \"There should be exactly one central pixel\"\n    \n    # Get the position of the central pixel\n    center_pixel = center_pixel_objects[0]\n    center_x, center_y = object_position(center_pixel, background=Color.BLACK, anchor=\"upper left\")\n    \n    # Get the color of the central pixel\n    center_color = input_grid[center_x, center_y]\n\n    # Create an output grid filled with black\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Fill in the pixels in a radial pattern based on the center pixel's color\n    # We can fill in larger squares around the central pixel\n    for radius in range(1, 4):  # Use radii from 1 to 3 for a nice pattern\n        # Fill in the pixels at the current radius\n        for dx in range(-radius, radius + 1):\n            for dy in range(-radius, radius + 1):\n                if abs(dx) + abs(dy) == radius:  # Manhattan distance check for radial symmetry\n                    output_grid[center_x + dx, center_y + dy] = center_color\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a grid of size 5 x 5\n    grid = np.full((5, 5), Color.BLACK)\n\n    # Randomly select the position of the central pixel\n    center_x, center_y = np.random.randint(1, 4), np.random.randint(1, 4)\n\n    # Choose a random color for the central pixel\n    center_color = np.random.choice(Color.NOT_BLACK)\n\n    # Set the central pixel's color\n    grid[center_x, center_y] = center_color\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            0,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            6,
            6
          ],
          [
            6,
            6,
            6,
            0,
            0
          ],
          [
            6,
            6,
            6,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            0,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            0,
            0
          ],
          [
            8,
            8,
            8,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            0,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            0,
            0
          ],
          [
            3,
            3,
            3,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            0,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            0,
            0
          ],
          [
            5,
            5,
            5,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "3de23699.py",
      "0dfd9992.py",
      "a9f96cdd.py"
    ],
    "problem_id": 77225
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation detection, pattern transformation\n\n# description:\n# In the input, you will see a grid that contains a pattern of colored pixels. \n# The task is to identify a point of rotation (if any) in the grid and create a new grid \n# that is a 90-degree clockwise rotation of the original pattern around that point.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Determine the center of the pattern\n    center_x = input_grid.shape[0] // 2\n    center_y = input_grid.shape[1] // 2\n\n    # Create an output grid with the same shape as the input grid\n    output_grid = np.full_like(input_grid, Color.BLACK)\n\n    # Rotate the pixels 90 degrees clockwise around the center point\n    for x in range(input_grid.shape[0]):\n        for y in range(input_grid.shape[1]):\n            if input_grid[x, y] != Color.BLACK:  # Only rotate colored pixels\n                new_x = center_x + (y - center_y)\n                new_y = center_y - (x - center_x)\n                if 0 <= new_x < output_grid.shape[0] and 0 <= new_y < output_grid.shape[1]:\n                    output_grid[new_x, new_y] = input_grid[x, y]\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    \n    # Generate a random sprite pattern with a density of 0.5\n    grid = random_sprite(n, m, density=0.5, symmetry=\"not_symmetric\", color_palette=Color.NOT_BLACK)\n\n    # Ensure the grid is centered around a point of rotation\n    # Fill the grid with background color (black)\n    output_grid = np.full((n, m), Color.BLACK)\n\n    # Randomly place the sprite in the grid\n    start_x = np.random.randint(0, n//2)\n    start_y = np.random.randint(0, m//2)\n    output_grid[start_x:start_x + grid.shape[0], start_y:start_y + grid.shape[1]] = grid\n\n    return output_grid",
    "examples": [
      [
        [
          [
            0,
            9,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            5,
            5,
            4,
            7,
            3
          ],
          [
            1,
            1,
            0,
            0,
            0,
            3,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            3,
            6
          ],
          [
            0,
            0,
            0,
            0,
            3,
            3,
            3
          ]
        ],
        [
          [
            0,
            0,
            0,
            1,
            1,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            0,
            0
          ],
          [
            0,
            3,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            3,
            3,
            3,
            7,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            9,
            4,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            4,
            0,
            0
          ],
          [
            4,
            6,
            6,
            6,
            0,
            0
          ],
          [
            4,
            4,
            6,
            6,
            0,
            0
          ],
          [
            0,
            7,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            5,
            4,
            0,
            0
          ],
          [
            6,
            1,
            4,
            4,
            0,
            0
          ],
          [
            8,
            1,
            0,
            4,
            4,
            2
          ],
          [
            1,
            1,
            0,
            0,
            2,
            3
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            6,
            5,
            0,
            4,
            4
          ],
          [
            1,
            1,
            5,
            7,
            4,
            6
          ],
          [
            0,
            4,
            5,
            0,
            6,
            6
          ],
          [
            4,
            4,
            4,
            0,
            6,
            6
          ],
          [
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            9,
            8,
            9,
            9,
            6
          ],
          [
            0,
            0,
            1,
            5,
            3,
            9,
            6
          ],
          [
            0,
            0,
            0,
            5,
            5,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0,
            5,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            9,
            0
          ],
          [
            0,
            0,
            0,
            5,
            5,
            8,
            0
          ],
          [
            0,
            5,
            5,
            5,
            3,
            9,
            0
          ],
          [
            0,
            0,
            2,
            2,
            9,
            9,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            4
          ],
          [
            0,
            0,
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            4,
            0,
            0,
            0,
            6,
            4,
            4,
            0
          ],
          [
            4,
            4,
            7,
            0,
            6,
            0,
            0,
            0
          ],
          [
            6,
            4,
            4,
            9,
            6,
            0,
            0,
            0
          ],
          [
            6,
            5,
            5,
            5,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            5,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            4,
            7,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            9,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            2
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "bc1d5164.py",
      "6fa7a44f.py",
      "3de23699.py"
    ],
    "problem_id": 77247
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, color filling\n\n# description:\n# In the input, you will see a grid with a pattern that is symmetrically incomplete. \n# To make the output, fill in the missing parts of the pattern to restore symmetry, \n# using the same colors that are present in the existing parts of the pattern.\n\ndef main(input_grid):\n    # Find the connected components in the grid to identify the non-background areas\n    components = find_connected_components(input_grid, background=Color.BLACK)\n    \n    # We will need to track the colors we find in the input grid\n    color_map = {}\n    \n    # Fill in the color map with the colors from each component\n    for component in components:\n        # Get the bounding box of the current component\n        x, y, width, height = bounding_box(component)\n        color = component[0, 0]  # Assume the color is uniform in the component\n        if color not in color_map:\n            color_map[color] = []\n        color_map[color].append((x, y, width, height))\n    \n    # Create a copy of the input grid for output\n    output_grid = np.copy(input_grid)\n    \n    # Process each color to restore symmetry\n    for color, regions in color_map.items():\n        for (x, y, width, height) in regions:\n            # Reflect the component across the center of its bounding box\n            for i in range(height):\n                for j in range(width):\n                    if output_grid[x + i, y + j] == Color.BLACK:  # Only fill empty space\n                        # Compute mirrored coordinates\n                        mirrored_x = x + i\n                        mirrored_y = (input_grid.shape[1] - 1) - (y + j)\n                        \n                        # Check if the mirrored position is valid and fill it\n                        if 0 <= mirrored_x < output_grid.shape[0] and 0 <= mirrored_y < output_grid.shape[1]:\n                            output_grid[mirrored_x, mirrored_y] = color\n    \n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n = np.random.randint(6, 10)\n    m = np.random.randint(6, 10)\n    \n    # Generate an empty grid\n    grid = np.full((n, m), Color.BLACK)\n    \n    # Randomly select a color and a rectangle size\n    colors = np.random.choice(list(Color.NOT_BLACK), size=np.random.randint(1, 5), replace=False)\n    \n    # Fill the grid with random colors in a symmetrical pattern\n    for color in colors:\n        # Randomly select the size and position of the rectangle\n        h, w = np.random.randint(1, 3), np.random.randint(1, 3)\n        x_start = np.random.randint(0, n//2)\n        y_start = np.random.randint(0, m)\n        \n        # Fill the rectangle\n        for i in range(h):\n            for j in range(w):\n                if x_start + i < n and y_start + j < m:\n                    grid[x_start + i, y_start + j] = color\n    \n    return grid",
    "examples": [
      [
        [
          [
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            0,
            0,
            0,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            6,
            6,
            7,
            0,
            0
          ],
          [
            0,
            2,
            2,
            6,
            6,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            6,
            6,
            7,
            0,
            0
          ],
          [
            0,
            2,
            2,
            6,
            6,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            3,
            3,
            0,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            3,
            3,
            0,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            0,
            8
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "f9012d9b.py",
      "bc1d5164.py",
      "8e1813be.py"
    ],
    "problem_id": 78729
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# radial symmetry, color replacement\n\n# description:\n# In the input grid, you will see a single colored pixel at the center, surrounded by a 3x3 grid of pixels. \n# The color of the center pixel will dictate the color of the surrounding pixels, creating a radial symmetry. \n# The transformation should replace the outer pixels with the corresponding color based on the center pixel:\n# - If the center pixel is red, the outer pixels should become teal.\n# - If the center pixel is blue, the outer pixels should become yellow.\n# - If the center pixel is green, the outer pixels should become pink.\n# - If the center pixel is yellow, the outer pixels should become gray.\n# The output grid should maintain the same size as the input grid.\n\ndef main(input_grid):\n    # Get the size of the grid\n    n, m = input_grid.shape\n\n    # Initialize output grid\n    output_grid = input_grid.copy()\n\n    # Find the center pixel which is guaranteed to be the only non-background pixel\n    center_x, center_y = n // 2, m // 2\n    center_color = output_grid[center_x, center_y]\n\n    # Determine the new color for the surrounding pixels based on the center color\n    color_mapping = {\n        Color.RED: Color.TEAL,\n        Color.BLUE: Color.YELLOW,\n        Color.GREEN: Color.PINK,\n        Color.YELLOW: Color.GRAY\n    }\n    \n    surrounding_color = color_mapping.get(center_color, Color.BLACK)\n\n    # Set the surrounding pixels (the 8 surrounding pixels in a 3x3 grid)\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if (dx != 0 or dy != 0):  # Skip the center\n                output_grid[center_x + dx, center_y + dy] = surrounding_color\n\n    return output_grid\n\ndef generate_input():\n    # Generate a blank canvas of size 5x5\n    grid = np.full((5, 5), Color.BLACK)\n\n    # Randomly choose a center color from the valid options\n    valid_colors = [Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW]\n    center_color = random.choice(valid_colors)\n    \n    # Place the center pixel in the grid\n    center_x, center_y = 2, 2  # Center position for a 5x5 grid\n    grid[center_x, center_y] = center_color\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            1,
            4,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            6,
            6,
            0
          ],
          [
            0,
            6,
            3,
            6,
            0
          ],
          [
            0,
            6,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            8,
            8,
            0
          ],
          [
            0,
            8,
            2,
            8,
            0
          ],
          [
            0,
            8,
            8,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            5,
            4,
            5,
            0
          ],
          [
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "a9f96cdd.py",
      "0d3d703e.py",
      "3de23699.py",
      "995c5fa3.py"
    ],
    "problem_id": 79047
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, filling, horizontal mirroring\n\n# description:\n# In the input, you will see a grid that features a symmetric pattern of colored pixels on a black background. \n# You should identify if the pattern is symmetric along the horizontal axis. \n# If it is, fill the area above the horizontal axis with the same color as the pixels below it.\n\ndef main(input_grid):\n    # Check if the input grid has mirror symmetry along the horizontal axis.\n    middle_y = len(input_grid) // 2\n    \n    # Check for symmetry\n    top_half = input_grid[:middle_y]\n    bottom_half = input_grid[middle_y + (len(input_grid) % 2):][::-1]  # Reverse the bottom half for comparison\n    \n    # Create an output grid that starts as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # If the input grid has mirror symmetry along the horizontal axis, fill the top with the bottom color\n    if np.array_equal(top_half, bottom_half):\n        for x in range(input_grid.shape[1]):\n            for y in range(middle_y):\n                output_grid[y, x] = input_grid[middle_y + (len(input_grid) % 2), x]\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid with black background and a symmetric pattern\n    n = np.random.randint(5, 8)\n    m = np.random.randint(5, 8)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Select a color for the pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n    \n    # Decide the symmetry type and size for the pattern\n    size = np.random.randint(1, n // 2 + 1)\n    start_row = np.random.randint(0, n - size)\n    start_col = np.random.randint(0, m)\n\n    # Create a symmetric pattern in the middle of the grid\n    for i in range(size):\n        for j in range(size):\n            grid[start_row + i, start_col + j] = color\n            grid[start_row + (size - 1 - i), start_col + j] = color  # Mirror to create symmetry\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "44f52bb0.py",
      "6fa7a44f.py",
      "995c5fa3.py"
    ],
    "problem_id": 79540
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, pattern replication\n\n# description:\n# In the input, you will see a small pattern of colored pixels at the center of the grid.\n# To make the output, replicate the pattern by rotating it at increments of 90 degrees around the central point,\n# filling the surrounding grid with these rotated patterns until the entire grid is filled.\n\ndef main(input_grid):\n    # Extract the central pattern\n    objects = find_connected_components(input_grid, background=Color.BLACK)\n    assert len(objects) == 1, \"There should be exactly one pattern in the input grid.\"\n    central_pattern = crop(objects[0])\n\n    # Get the dimensions of the central pattern\n    h, w = central_pattern.shape\n\n    # Calculate the size of the output grid\n    n = m = max(h, w) * 2  # Create an output grid with enough space for all rotations\n\n    # Create the output grid with a black background\n    output_grid = np.full((n, m), Color.BLACK)\n\n    # Function to rotate the pattern\n    def rotate(pattern, times):\n        return np.rot90(pattern, k=times)\n\n    # Place the rotated patterns in the output grid\n    for i in range(4):  # 0 to 3, for 0\u00b0, 90\u00b0, 180\u00b0, 270\u00b0\n        rotated_pattern = rotate(central_pattern, times=i)\n        # Calculate the position to place the rotated pattern\n        start_x = (n - rotated_pattern.shape[0]) // 2\n        start_y = (m - rotated_pattern.shape[1]) // 2\n        blit_sprite(output_grid, rotated_pattern, x=start_x, y=start_y, background=Color.BLACK)\n\n    return output_grid\n\ndef generate_input():\n    # Make a random sized grid with a black background\n    n = np.random.randint(3, 6)\n    m = np.random.randint(3, 6)\n\n    # Create a grid filled with black\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly choose a size for the central pattern\n    pattern_size = np.random.randint(1, min(n, m) // 2)\n\n    # Generate a random central pattern\n    central_pattern = random_sprite(pattern_size, pattern_size, density=0.5, color_palette=Color.NOT_BLACK)\n\n    # Place the central pattern in the center of the grid\n    start_x = (n - pattern_size) // 2\n    start_y = (m - pattern_size) // 2\n    grid = blit_sprite(grid, central_pattern, x=start_x, y=start_y, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            0
          ],
          [
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            0
          ],
          [
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            0
          ],
          [
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            0
          ],
          [
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "6fa7a44f.py",
      "a9f96cdd.py"
    ],
    "problem_id": 79574
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, pattern reconstruction, color mapping\n\n# description:\n# In the input, you will see a pattern that is rotated by 90 degrees clockwise. \n# The output should reconstruct the original pattern by rotating the input back to its original orientation,\n# and then fill in the grid accordingly. The output grid should be the same size as the input grid.\n\ndef main(input_grid):\n    # Rotate the input grid 90 degrees counter-clockwise to reconstruct the original pattern\n    output_grid = np.rot90(input_grid, k=1)  # k=1 is 90 degrees counter-clockwise\n    \n    return output_grid\n\ndef generate_input():\n    # Make a random grid size\n    n = np.random.randint(4, 8)\n    m = np.random.randint(4, 8)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Select a color from the palette (not black)\n    color_palette = list(Color.NOT_BLACK)\n    color = np.random.choice(color_palette)\n\n    # Create a random pattern in the input grid\n    size = np.random.randint(2, min(n, m) // 2)  # size of the pattern should allow for rotation\n    pattern = random_sprite(n=size, m=size, density=1, color_palette=[color])\n\n    # Place the pattern in the center of the grid\n    start_row = (n - size) // 2\n    start_col = (m - size) // 2\n    grid[start_row:start_row + size, start_col:start_col + size] = pattern\n\n    # Rotate the pattern 90 degrees clockwise to fill the input grid\n    grid = np.rot90(grid, k=-1)  # k=-1 is 90 degrees clockwise\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "6b9890af.py",
      "3e980e27.py"
    ],
    "problem_id": 80591
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pixel rotation, symmetry detection\n\n# description:\n# In the input, you will see a grid with a pattern that exhibits rotational symmetry. \n# To create the output, rotate the entire pattern by 90 degrees clockwise while ensuring that the symmetry is preserved in the new orientation.\n\ndef main(input_grid):\n    # Rotate the input grid 90 degrees clockwise\n    output_grid = np.rot90(input_grid, -1)  # -1 indicates a clockwise rotation\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid with rotationally symmetric patterns\n    n = np.random.randint(3, 7)\n    m = np.random.randint(3, 7)\n    \n    # Generate a base sprite with rotational symmetry\n    base_sprite = random_sprite(n, m, density=0.5, symmetry='radial', color_palette=Color.NOT_BLACK)\n    \n    # Place the symmetric sprite in a larger grid\n    output_grid = np.full((n, m), Color.BLACK)\n    blit_sprite(output_grid, base_sprite, x=0, y=0, background=Color.BLACK)\n\n    # Randomly add some noise (non-symmetric) colors\n    for _ in range(np.random.randint(1, 5)):\n        x, y = np.random.randint(0, n), np.random.randint(0, m)\n        if output_grid[x, y] == Color.BLACK:  # Ensure we only replace black pixels\n            output_grid[x, y] = np.random.choice(list(Color.NOT_BLACK))\n\n    return output_grid",
    "examples": [
      [
        [
          [
            0,
            0,
            2,
            4,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            3,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            2,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            3,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2,
            4
          ],
          [
            0,
            0,
            2,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            9,
            5,
            0
          ],
          [
            5,
            9,
            9,
            0
          ],
          [
            0,
            9,
            9,
            5
          ],
          [
            0,
            5,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            5,
            0
          ],
          [
            5,
            9,
            9,
            9
          ],
          [
            0,
            9,
            9,
            5
          ],
          [
            0,
            5,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            7,
            3
          ],
          [
            7,
            7,
            1,
            7,
            8
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            7,
            1,
            7,
            7
          ],
          [
            3,
            7,
            0,
            0,
            3
          ]
        ],
        [
          [
            3,
            0,
            0,
            7,
            3
          ],
          [
            7,
            7,
            1,
            7,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0
          ],
          [
            0,
            7,
            1,
            7,
            7
          ],
          [
            3,
            7,
            0,
            8,
            3
          ]
        ]
      ],
      [
        [
          [
            9,
            4,
            0,
            7,
            9
          ],
          [
            4,
            4,
            1,
            4,
            4
          ],
          [
            0,
            1,
            4,
            1,
            0
          ],
          [
            4,
            4,
            1,
            4,
            0
          ],
          [
            9,
            0,
            0,
            4,
            9
          ]
        ],
        [
          [
            9,
            4,
            0,
            4,
            9
          ],
          [
            0,
            4,
            1,
            4,
            4
          ],
          [
            0,
            1,
            4,
            1,
            0
          ],
          [
            4,
            4,
            1,
            4,
            7
          ],
          [
            9,
            0,
            0,
            4,
            9
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "44f52bb0.py",
      "bc1d5164.py",
      "0dfd9992.py"
    ],
    "problem_id": 80894
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# mirroring, symmetry creation\n\n# description:\n# In the input, you will see a pattern of colored pixels on one side of the grid (left or top). \n# To make the output, create a mirrored version of the pattern on the opposite side of the grid, \n# ensuring that the mirrored patterns match perfectly to create a symmetric image.\n\ndef main(input_grid):\n    # Create an output grid with the same shape as the input grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n    \n    # Get the height and width of the input grid\n    height, width = input_grid.shape\n    \n    # Mirror the input grid horizontally to the right\n    output_grid[:, width//2:] = input_grid[:, :width//2][:, ::-1]\n    \n    # If the input grid has a pattern on the top, mirror it to the bottom\n    output_grid[height//2:, :] = input_grid[:height//2, :][::-1, :]\n    \n    # Fill the mirrored patterns\n    output_grid[:height//2, :width//2] = input_grid[:height//2, :width//2]\n    \n    return output_grid\n\ndef generate_input():\n    # Generate a random grid size\n    n = np.random.randint(5, 8)\n    m = np.random.randint(5, 8)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Select a random color for the pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n    \n    # Create a pattern on the left side of the grid\n    pattern_width = m // 2\n    pattern_height = n // 2\n    \n    # Fill the left side with the pattern\n    grid[:pattern_height, :pattern_width] = random_sprite(\n        n=pattern_height, m=pattern_width, density=0.5,\n        color_palette=[color], symmetry=\"not_symmetric\"\n    )\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            2,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0,
            0,
            0
          ],
          [
            2,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            2,
            2,
            2,
            2,
            0
          ],
          [
            2,
            2,
            0,
            0,
            2,
            2
          ],
          [
            2,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            8,
            0,
            0,
            0
          ],
          [
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            8,
            0,
            0,
            8,
            0
          ],
          [
            0,
            8,
            8,
            8,
            8,
            0
          ],
          [
            8,
            8,
            0,
            0,
            8,
            8
          ],
          [
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            8,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            0,
            0,
            0,
            0,
            4
          ],
          [
            4,
            0,
            0,
            0,
            0,
            4
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            4,
            0,
            0,
            4,
            0
          ],
          [
            0,
            4,
            0,
            0,
            4,
            0
          ],
          [
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "44f52bb0.py",
      "6fa7a44f.py",
      "3de23699.py"
    ],
    "problem_id": 80913
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# layering, transparency, blending\n\n# description:\n# In the input, you will see multiple layers of colored grids. Each layer can have a transparency value. \n# The output should be a single grid where the layers are blended together based on their transparency.\n# A fully opaque layer will completely cover the layers below it, while a fully transparent layer will leave the layers below it unchanged.\n\ndef main(input_grid):\n    # Create an output grid initialized to the background color (black)\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Get the number of layers from the first row of the input grid\n    num_layers = input_grid.shape[0]\n\n    # Process each layer\n    for layer_index in range(num_layers):\n        layer_row = input_grid[layer_index]  # Get the current layer\n        transparency = layer_row[0]  # The first pixel in the layer indicates transparency\n\n        # The rest of the row represents the colors\n        colors = layer_row[1:]\n\n        # Blend the colors into the output grid based on transparency\n        for x in range(len(colors)):\n            current_color = colors[x]\n            if current_color != Color.BLACK:  # Ignore black (background)\n                # Determine if we should overlay this color based on transparency\n                if transparency > 0:  # If the layer is not fully transparent\n                    # Blend the color into the output grid\n                    if output_grid[x, layer_index] == Color.BLACK:\n                        output_grid[x, layer_index] = current_color  # Overlay if the spot is still background\n\n    return output_grid\n\n\ndef generate_input():\n    # Create a grid for the layers\n    n = np.random.randint(5, 11)  # Random number of layers between 5 and 10\n    m = np.random.randint(5, 11)  # Random width between 5 and 10\n    grid = np.full((n, m), Color.BLACK)\n\n    # Fill the grid with layers\n    for i in range(n):\n        # Random transparency value between 0 (fully transparent) to 10 (fully opaque)\n        transparency = np.random.randint(0, 11)\n        grid[i, 0] = transparency  # Set the transparency value in the first column\n\n        # Randomly fill the rest of the layer with colors\n        for j in range(1, m):\n            # Choose a random color excluding black\n            color = np.random.choice(list(Color.NOT_BLACK))\n            grid[i, j] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            5,
            5,
            3,
            6,
            9,
            5,
            9,
            1,
            6
          ],
          [
            4,
            6,
            5,
            6,
            9,
            9,
            7,
            6,
            6
          ],
          [
            5,
            8,
            9,
            4,
            1,
            7,
            7,
            6,
            5
          ],
          [
            0,
            2,
            6,
            9,
            2,
            8,
            7,
            1,
            7
          ],
          [
            3,
            8,
            3,
            5,
            7,
            2,
            6,
            3,
            3
          ],
          [
            8,
            7,
            8,
            8,
            4,
            1,
            3,
            2,
            8
          ],
          [
            7,
            9,
            7,
            9,
            4,
            1,
            6,
            1,
            4
          ],
          [
            4,
            5,
            2,
            8,
            1,
            2,
            4,
            7,
            1
          ],
          [
            4,
            8,
            7,
            3,
            8,
            3,
            6,
            2,
            4
          ]
        ],
        [
          [
            5,
            6,
            8,
            0,
            8,
            7,
            9,
            5,
            8
          ],
          [
            3,
            5,
            9,
            0,
            3,
            8,
            7,
            2,
            7
          ],
          [
            6,
            6,
            4,
            0,
            5,
            8,
            9,
            8,
            3
          ],
          [
            9,
            9,
            1,
            0,
            7,
            4,
            4,
            1,
            8
          ],
          [
            5,
            9,
            7,
            0,
            2,
            1,
            1,
            2,
            3
          ],
          [
            9,
            7,
            7,
            0,
            6,
            3,
            6,
            4,
            6
          ],
          [
            1,
            6,
            6,
            0,
            3,
            2,
            1,
            7,
            2
          ],
          [
            6,
            6,
            5,
            0,
            3,
            8,
            4,
            1,
            4
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            5,
            4,
            8,
            3,
            7
          ],
          [
            7,
            6,
            4,
            4,
            6,
            5
          ],
          [
            9,
            9,
            3,
            6,
            7,
            7
          ],
          [
            8,
            9,
            1,
            1,
            3,
            2
          ],
          [
            2,
            1,
            7,
            3,
            5,
            9
          ],
          [
            4,
            1,
            1,
            7,
            8,
            2
          ]
        ],
        [
          [
            5,
            6,
            9,
            9,
            1,
            1
          ],
          [
            4,
            4,
            3,
            1,
            7,
            1
          ],
          [
            8,
            4,
            6,
            1,
            3,
            7
          ],
          [
            3,
            6,
            7,
            3,
            5,
            8
          ],
          [
            7,
            5,
            7,
            2,
            9,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            6,
            6,
            2,
            5,
            8,
            3
          ],
          [
            8,
            3,
            6,
            1,
            7,
            2,
            5
          ],
          [
            2,
            5,
            1,
            2,
            1,
            1,
            8
          ],
          [
            6,
            2,
            6,
            1,
            8,
            7,
            4
          ],
          [
            6,
            5,
            6,
            6,
            7,
            1,
            4
          ],
          [
            9,
            3,
            4,
            5,
            2,
            3,
            4
          ],
          [
            6,
            2,
            1,
            5,
            8,
            6,
            3
          ]
        ],
        [
          [
            6,
            3,
            5,
            2,
            5,
            3,
            2
          ],
          [
            6,
            6,
            1,
            6,
            6,
            4,
            1
          ],
          [
            2,
            1,
            2,
            1,
            6,
            5,
            5
          ],
          [
            5,
            7,
            1,
            8,
            7,
            2,
            8
          ],
          [
            8,
            2,
            1,
            7,
            1,
            3,
            6
          ],
          [
            3,
            5,
            8,
            4,
            4,
            4,
            3
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            8,
            6,
            7,
            9,
            1,
            5,
            5,
            9
          ],
          [
            8,
            9,
            3,
            3,
            8,
            1,
            4,
            6
          ],
          [
            0,
            6,
            1,
            7,
            8,
            5,
            5,
            6
          ],
          [
            6,
            8,
            3,
            2,
            4,
            1,
            8,
            1
          ],
          [
            3,
            6,
            4,
            7,
            7,
            7,
            4,
            4
          ],
          [
            7,
            7,
            4,
            5,
            6,
            8,
            1,
            4
          ],
          [
            5,
            9,
            5,
            9,
            2,
            9,
            5,
            8
          ]
        ],
        [
          [
            6,
            9,
            0,
            8,
            6,
            7,
            9,
            0
          ],
          [
            7,
            3,
            0,
            3,
            4,
            4,
            5,
            0
          ],
          [
            9,
            3,
            0,
            2,
            7,
            5,
            9,
            0
          ],
          [
            1,
            8,
            0,
            4,
            7,
            6,
            2,
            0
          ],
          [
            5,
            1,
            0,
            1,
            7,
            8,
            9,
            0
          ],
          [
            5,
            4,
            0,
            8,
            4,
            1,
            5,
            0
          ],
          [
            9,
            6,
            0,
            1,
            4,
            4,
            8,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "1f642eb9.py",
      "bd4472b8.py",
      "0e206a2e.py",
      "941d9a10.py"
    ],
    "problem_id": 81220
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry, rotation, filling\n\n# description:\n# In the input, you will see a grid with a symmetrical pattern that has been rotated at a 45-degree angle. \n# To make the output, return the original symmetrical pattern in its correct orientation and fill in \n# any empty pixels within the pattern with the primary color of the pattern.\n\ndef main(input_grid):\n    # Find the connected components in the input grid\n    components = find_connected_components(input_grid, background=Color.BLACK)\n\n    # Assuming there's only one main component that is the symmetrical pattern\n    main_component = components[0]\n\n    # Crop the main component to get the original symmetrical pattern\n    original_pattern = crop(main_component, background=Color.BLACK)\n\n    # Get the color of the original symmetrical pattern\n    primary_color = np.unique(original_pattern[original_pattern != Color.BLACK])[0]\n\n    # Create a new grid to fill in the pattern\n    output_grid = np.full(original_pattern.shape, Color.BLACK)\n\n    # Fill the output grid with the original pattern\n    output_grid[:original_pattern.shape[0], :original_pattern.shape[1]] = original_pattern\n\n    # Fill in empty pixels with the primary color\n    output_grid[output_grid == Color.BLACK] = primary_color\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random size for the input grid with black background\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Create a symmetrical pattern and rotate it by 45 degrees\n    color = np.random.choice(list(Color.NOT_BLACK))\n    pattern_size = np.random.randint(3, min(n, m) // 2)\n\n    # Generate a symmetrical pattern\n    base_pattern = random_sprite(pattern_size, pattern_size, density=0.5, symmetry=\"radial\", color_palette=[color])\n    \n    # Rotate pattern by 45 degrees (this is a simple example; a real implementation would require proper rotation)\n    rotated_pattern = np.rot90(base_pattern, k=1)  # Rotates the sprite 90 degrees counter-clockwise\n\n    # Place the rotated pattern in the center of the grid\n    x_offset = (n - rotated_pattern.shape[0]) // 2\n    y_offset = (m - rotated_pattern.shape[1]) // 2\n    grid[x_offset:x_offset + rotated_pattern.shape[0], y_offset:y_offset + rotated_pattern.shape[1]] = rotated_pattern\n\n    # Ensure the grid contains the rotated pattern\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6
          ],
          [
            6,
            6,
            6
          ],
          [
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6
          ],
          [
            6,
            6,
            6
          ],
          [
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "3de23699.py",
      "44f52bb0.py"
    ],
    "problem_id": 81791
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color mapping, object detection, position replacement\n\n# description:\n# In the input, you will see a grid with colored shapes. The colors of the shapes represent their positions: \n# the leftmost shape is red, the middle shape is blue, and the rightmost shape is yellow, all on a black background. \n# The output should keep the shapes but change their colors according to the following mapping:\n# red -> orange, blue -> yellow, yellow -> green.\n\ndef main(input_grid):\n    # Initialize output grid\n    output_grid = input_grid.copy()\n\n    # Create a color mapping\n    color_map = {\n        Color.RED: Color.ORANGE,\n        Color.BLUE: Color.YELLOW,\n        Color.YELLOW: Color.GREEN\n    }\n\n    # Replace colors in output grid according to the mapping\n    output_grid = np.vectorize(lambda color: color_map.get(color, color))(output_grid)\n\n    return output_grid\n\ndef generate_input():\n    # Create a grid where each shape is in a designated position\n    height = np.random.randint(4, 8)  # Height of the shapes\n    width = 3  # Width of the grid\n\n    # Create an empty grid filled with black\n    grid = np.full((height, width), Color.BLACK)\n\n    # Define positions for the shapes\n    positions = [(0, 0), (0, 1), (0, 2)]  # Top row, three columns corresponding to red, blue, yellow\n\n    # Draw the shapes in their respective positions\n    for (y, x), color in zip(positions, [Color.RED, Color.BLUE, Color.YELLOW]):\n        # Create a shape of height 1 and the respective color\n        for i in range(height):\n            grid[i, x] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ]
        ],
        [
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ]
        ]
      ],
      [
        [
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ]
        ],
        [
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ]
        ]
      ],
      [
        [
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ]
        ],
        [
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ]
        ]
      ],
      [
        [
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ],
          [
            2,
            1,
            4
          ]
        ],
        [
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ],
          [
            7,
            4,
            3
          ]
        ]
      ]
    ],
    "seeds": [
      "0d3d703e.py",
      "1caeab9d.py",
      "941d9a10.py",
      "8e1813be.py"
    ],
    "problem_id": 82317
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# reflection, symmetry completion\n\n# description:\n# In the input, you will see a grid with a pattern that has some sections missing. \n# To make the output, identify the sections that would make the pattern symmetrical and fill them in \n# with the appropriate colors to create a complete symmetric design.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Create a copy of the input grid to modify\n    output_grid = np.copy(input_grid)\n\n    # Find the bounding box of the non-black areas (the pattern)\n    x, y, w, h = bounding_box(output_grid, background=Color.BLACK)\n\n    # Get the pattern within the bounding box\n    pattern = output_grid[y:y + h, x:x + w]\n\n    # Reflect the pattern horizontally\n    reflected_pattern = pattern[:, ::-1]\n\n    # Fill in the reflected pattern into the output grid\n    output_grid[y:y + h, x + w:] = reflected_pattern\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Define dimensions for the grid\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    \n    # Create an empty grid\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly choose a pattern size and position\n    pattern_size = np.random.randint(2, min(n, m) // 2)\n    start_x = np.random.randint(0, m - pattern_size)\n    start_y = np.random.randint(0, n - pattern_size)\n\n    # Fill the pattern with random colors\n    colors = random.sample(Color.NOT_BLACK, k=3)  # Choose 3 different colors\n    for i in range(pattern_size):\n        for j in range(pattern_size):\n            if np.random.rand() > 0.4:  # 60% chance to fill this cell\n                grid[start_y + i, start_x + j] = np.random.choice(colors)\n\n    # Leave one column on the right incomplete to create the missing section\n    for i in range(pattern_size):\n        if np.random.rand() < 0.5:  # Randomly decide to leave some pixels blank\n            grid[start_y + i, start_x + pattern_size] = Color.BLACK\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            1,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            4,
            4,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            4,
            1,
            4,
            4,
            1,
            4
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            1,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "8e1813be.py",
      "6fa7a44f.py",
      "bc1d5164.py",
      "3de23699.py"
    ],
    "problem_id": 83015
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color filling, symmetry detection\n\n# description:\n# In the input, you will see a pattern that is vertically symmetric but has some sections missing.\n# To make the output, fill in the missing sections of the pattern to complete its symmetry, using the same color as the corresponding sections on the opposite side.\n\ndef main(input_grid):\n    # Create an output grid that starts as a copy of the input grid\n    output_grid = np.copy(input_grid)\n\n    # Find vertical mirror symmetries in the input grid\n    mirrors = detect_mirror_symmetry(input_grid)\n\n    # Fill in missing colors based on detected symmetries\n    for x, y in np.argwhere(input_grid != Color.BLACK):\n        for mirror in mirrors:\n            # Get the coordinate that should be filled based on symmetry\n            mirror_x, mirror_y = mirror.apply(x, y)\n            if input_grid[mirror_x, mirror_y] == Color.BLACK:\n                # Fill the missing symmetric position with the color from the original position\n                output_grid[mirror_x, mirror_y] = input_grid[x, y]\n\n    return output_grid\n\ndef generate_input():\n    # Create a grid of random size\n    n, m = np.random.randint(6, 10), np.random.randint(6, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Create a random sprite that is vertically symmetric\n    sprite = random_sprite(np.random.randint(2, 5), np.random.randint(2, 5), density=1, symmetry='vertical', color_palette=Color.NOT_BLACK)\n\n    # Randomly place the sprite in the grid\n    sprite_x, sprite_y = random_free_location_for_sprite(grid, sprite)\n    blit_sprite(grid, sprite, x=sprite_x, y=sprite_y)\n\n    # Now, randomly remove some sections to create the \"missing\" effect\n    for _ in range(np.random.randint(1, 5)):  # Randomly decide how many sections to occlude\n        x_occluder = np.random.randint(0, n)\n        y_occluder = np.random.randint(0, m)\n        # Random size for the occlusion\n        occluder_height, occluder_width = np.random.randint(1, 3), np.random.randint(1, 3)\n        # Ensure occluder fits within grid bounds\n        if x_occluder + occluder_height < n and y_occluder + occluder_width < m:\n            occluder = np.full((occluder_height, occluder_width), Color.BLACK)\n            blit_sprite(grid, occluder, x=x_occluder, y=y_occluder, background=None)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            3,
            3,
            3,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "f9012d9b.py",
      "8e1813be.py",
      "3345333e.py"
    ],
    "problem_id": 83762
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# vertical symmetry, color matching\n\n# description:\n# In the input, you will see a grid with a pattern that exhibits vertical symmetry. \n# To make the output, identify the vertical axis of symmetry, then replace the colors on the left side of the grid \n# with the corresponding colors from the right side while preserving the symmetry.\n\ndef main(input_grid):\n    # Get the number of rows and columns\n    rows, cols = input_grid.shape\n\n    # Check if the grid has vertical symmetry\n    mid_col = cols // 2\n    left_side = input_grid[:, :mid_col]\n    right_side = input_grid[:, -mid_col:][:, ::-1]  # Reverse the right side\n\n    if np.array_equal(left_side, right_side):\n        # If the grid is symmetric, replace left side colors with right side colors\n        output_grid = np.copy(input_grid)\n        output_grid[:, :mid_col] = right_side[:, ::-1]  # Reflect the right side to the left\n    else:\n        output_grid = np.copy(input_grid)  # If not symmetric, return original grid\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly choose a color palette excluding black\n    color_palette = list(Color.NOT_BLACK)\n\n    # Fill the left side of the grid with random colors\n    for i in range(n):\n        for j in range(m // 2):\n            grid[i, j] = np.random.choice(color_palette)\n\n    # For symmetry, copy the left side to the right side\n    for i in range(n):\n        for j in range(m // 2):\n            grid[i, m - 1 - j] = grid[i, j]\n\n    # Randomly scatter some black pixels\n    for _ in range(np.random.randint(0, n * m // 5)):\n        x = np.random.randint(0, n)\n        y = np.random.randint(0, m)\n        grid[x, y] = Color.BLACK\n\n    return grid",
    "examples": [
      [
        [
          [
            4,
            1,
            2,
            0,
            2,
            1,
            4
          ],
          [
            3,
            6,
            1,
            0,
            1,
            6,
            3
          ],
          [
            5,
            2,
            7,
            0,
            7,
            2,
            5
          ],
          [
            9,
            1,
            8,
            0,
            8,
            1,
            9
          ],
          [
            9,
            5,
            9,
            0,
            9,
            5,
            9
          ],
          [
            9,
            8,
            8,
            0,
            8,
            8,
            9
          ],
          [
            9,
            6,
            7,
            0,
            7,
            6,
            9
          ]
        ],
        [
          [
            2,
            1,
            4,
            0,
            2,
            1,
            4
          ],
          [
            1,
            6,
            3,
            0,
            1,
            6,
            3
          ],
          [
            7,
            2,
            5,
            0,
            7,
            2,
            5
          ],
          [
            8,
            1,
            9,
            0,
            8,
            1,
            9
          ],
          [
            9,
            5,
            9,
            0,
            9,
            5,
            9
          ],
          [
            8,
            8,
            9,
            0,
            8,
            8,
            9
          ],
          [
            7,
            6,
            9,
            0,
            7,
            6,
            9
          ]
        ]
      ],
      [
        [
          [
            8,
            5,
            0,
            5,
            8
          ],
          [
            4,
            6,
            0,
            6,
            4
          ],
          [
            8,
            6,
            0,
            6,
            8
          ],
          [
            9,
            1,
            0,
            1,
            9
          ],
          [
            4,
            3,
            0,
            3,
            4
          ]
        ],
        [
          [
            5,
            8,
            0,
            5,
            8
          ],
          [
            6,
            4,
            0,
            6,
            4
          ],
          [
            6,
            8,
            0,
            6,
            8
          ],
          [
            1,
            9,
            0,
            1,
            9
          ],
          [
            3,
            4,
            0,
            3,
            4
          ]
        ]
      ],
      [
        [
          [
            3,
            4,
            5,
            0,
            5,
            4,
            3
          ],
          [
            1,
            5,
            3,
            0,
            3,
            5,
            1
          ],
          [
            3,
            9,
            7,
            0,
            7,
            9,
            3
          ],
          [
            9,
            8,
            8,
            0,
            8,
            8,
            9
          ],
          [
            7,
            3,
            9,
            0,
            9,
            3,
            7
          ]
        ],
        [
          [
            5,
            4,
            3,
            0,
            5,
            4,
            3
          ],
          [
            3,
            5,
            1,
            0,
            3,
            5,
            1
          ],
          [
            7,
            9,
            3,
            0,
            7,
            9,
            3
          ],
          [
            8,
            8,
            9,
            0,
            8,
            8,
            9
          ],
          [
            9,
            3,
            7,
            0,
            9,
            3,
            7
          ]
        ]
      ],
      [
        [
          [
            4,
            5,
            4,
            4,
            5,
            4
          ],
          [
            8,
            3,
            7,
            7,
            3,
            8
          ],
          [
            8,
            6,
            4,
            4,
            6,
            8
          ],
          [
            4,
            6,
            5,
            5,
            6,
            4
          ],
          [
            9,
            3,
            6,
            6,
            3,
            9
          ],
          [
            7,
            7,
            9,
            9,
            7,
            7
          ]
        ],
        [
          [
            4,
            5,
            4,
            4,
            5,
            4
          ],
          [
            7,
            3,
            8,
            7,
            3,
            8
          ],
          [
            4,
            6,
            8,
            4,
            6,
            8
          ],
          [
            5,
            6,
            4,
            5,
            6,
            4
          ],
          [
            6,
            3,
            9,
            6,
            3,
            9
          ],
          [
            9,
            7,
            7,
            9,
            7,
            7
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "8e1813be.py",
      "44f52bb0.py",
      "bc1d5164.py"
    ],
    "problem_id": 84415
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern recognition, mirroring, grid manipulation\n\n# description:\n# In the input, you will see a grid with a symmetrical pattern present in the center.\n# To make the output, you should mirror the pattern horizontally and vertically, filling the entire grid with the mirrored pattern.\n# The output grid should be the same size as the input grid.\n\ndef main(input_grid):\n    # Get the dimensions of the input grid\n    n, m = input_grid.shape\n\n    # Find the center of the grid\n    center_x, center_y = n // 2, m // 2\n\n    # Determine the size of the pattern\n    pattern_height = center_x if n % 2 == 0 else center_x + 1\n    pattern_width = center_y if m % 2 == 0 else center_y + 1\n\n    # Extract the pattern from the center of the input grid\n    pattern = input_grid[center_x - pattern_height // 2:center_x + pattern_height // 2 + 1,\n                         center_y - pattern_width // 2:center_y + pattern_width // 2 + 1]\n\n    # Create an output grid filled with the pattern in all quadrants\n    output_grid = np.zeros((n, m), dtype=int)\n\n    # Fill the output grid with mirrored patterns\n    output_grid[:pattern_height, :pattern_width] = pattern  # Top-left\n    output_grid[:pattern_height, -pattern_width:] = np.flip(pattern, axis=1)  # Top-right\n    output_grid[-pattern_height:, :pattern_width] = np.flip(pattern, axis=0)  # Bottom-left\n    output_grid[-pattern_height:, -pattern_width:] = np.flip(pattern, axis=(0, 1))  # Bottom-right\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n = np.random.randint(6, 10)  # Ensure there is enough space for a central pattern\n    m = np.random.randint(6, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Choose a color for the pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Define the size of the central pattern\n    pattern_height = np.random.randint(2, n // 2 + 1)\n    pattern_width = np.random.randint(2, m // 2 + 1)\n\n    # Fill the central pattern\n    start_x = (n - pattern_height) // 2\n    start_y = (m - pattern_width) // 2\n    grid[start_x:start_x + pattern_height, start_y:start_y + pattern_width] = \\\n        random_sprite(n=pattern_height, m=pattern_width, color_palette=[color], density=0.5)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            0,
            0,
            6,
            6
          ],
          [
            0,
            6,
            0,
            0,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            0,
            6,
            0
          ],
          [
            6,
            6,
            0,
            0,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            8,
            8,
            0,
            0
          ],
          [
            0,
            8,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            0,
            0,
            8,
            8
          ],
          [
            8,
            8,
            0,
            0,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            8,
            0,
            0,
            8,
            8
          ],
          [
            8,
            8,
            0,
            0,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            0,
            0,
            2,
            2
          ],
          [
            2,
            2,
            0,
            0,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            0,
            0,
            2,
            2
          ],
          [
            2,
            2,
            0,
            0,
            2,
            2
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            0,
            0,
            6,
            6
          ],
          [
            6,
            6,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            6,
            6,
            0,
            0,
            6,
            6
          ],
          [
            6,
            6,
            0,
            0,
            6,
            6
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "1e32b0e9.py",
      "ff28f65a.py",
      "6b9890af.py"
    ],
    "problem_id": 84448
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, extraction, mirroring\n\n# description:\n# In the input, you will see a grid that contains a colorful pattern with rotational symmetry (90 degrees).\n# To make the output, extract the pattern, and create a new grid that contains the original pattern and its 90-degree rotations.\n\ndef main(input_grid):\n    # The input grid is expected to have a pattern with rotational symmetry.\n    # We will extract the pattern from the grid.\n    pattern = crop(input_grid)\n\n    # Create a new output grid that will hold the original pattern and its rotations\n    output_grid = np.zeros((pattern.shape[0] * 2, pattern.shape[1] * 2), dtype=int)\n\n    # Place the original pattern in the top-left corner\n    blit_sprite(output_grid, pattern, x=0, y=0)\n\n    # Generate the 90-degree rotation of the original pattern\n    rotated_90 = np.rot90(pattern, k=1)\n\n    # Place the 90-degree rotated pattern in the top-right corner\n    blit_sprite(output_grid, rotated_90, x=0, y=pattern.shape[1])\n\n    # Generate the 180-degree rotation of the original pattern\n    rotated_180 = np.rot90(pattern, k=2)\n\n    # Place the 180-degree rotated pattern in the bottom-left corner\n    blit_sprite(output_grid, rotated_180, x=pattern.shape[0], y=0)\n\n    # Generate the 270-degree rotation of the original pattern\n    rotated_270 = np.rot90(pattern, k=3)\n\n    # Place the 270-degree rotated pattern in the bottom-right corner\n    blit_sprite(output_grid, rotated_270, x=pattern.shape[0], y=pattern.shape[1])\n\n    return output_grid\n\ndef generate_input():\n    # Create a random pattern that has rotational symmetry\n    n = np.random.randint(3, 6)  # size of the pattern\n    m = np.random.randint(3, 6)\n\n    # Generate a random sprite with rotational symmetry\n    grid = random_sprite(n, m, density=0.5, symmetry='not_symmetric', color_palette=list(Color.NOT_BLACK))\n\n    # Create a new grid to ensure there's enough space for the pattern\n    output_grid = np.zeros((n, m), dtype=int)\n\n    # Place the generated pattern into the output grid\n    blit_sprite(output_grid, grid, x=0, y=0, background=Color.BLACK)\n\n    # Ensure the pattern has rotational symmetry by mirroring it\n    output_grid[n//2:, m//2:] = output_grid[:n//2, :m//2]  # 180-degree mirror\n    output_grid[n//2:, :m//2] = output_grid[:n//2, m//2:]  # 90-degree mirror\n    output_grid[:n//2, m//2:] = output_grid[n//2:, :m//2]  # 270-degree mirror\n\n    return output_grid",
    "examples": [
      [
        [
          [
            2,
            0,
            0,
            0
          ],
          [
            7,
            8,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0
          ],
          [
            0,
            0,
            7,
            8
          ]
        ],
        [
          [
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            8
          ],
          [
            7,
            8,
            0,
            0,
            0,
            0,
            2,
            7
          ],
          [
            0,
            0,
            2,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            7,
            8,
            2,
            7,
            0,
            0
          ],
          [
            8,
            7,
            0,
            0,
            0,
            0,
            7,
            2
          ],
          [
            0,
            2,
            0,
            0,
            0,
            0,
            8,
            0
          ],
          [
            0,
            0,
            8,
            7,
            7,
            2,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            8,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            1,
            6,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            6
          ],
          [
            0,
            0,
            1,
            1
          ]
        ],
        [
          [
            1,
            6,
            0,
            0,
            0,
            0,
            6,
            1
          ],
          [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1
          ],
          [
            0,
            0,
            1,
            6,
            6,
            1,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            1
          ],
          [
            6,
            1,
            0,
            0,
            0,
            0,
            1,
            6
          ],
          [
            0,
            0,
            1,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            6,
            1,
            1,
            6,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            5,
            0
          ],
          [
            0,
            0,
            5,
            0
          ],
          [
            5,
            0,
            0,
            0
          ],
          [
            5,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            0,
            0,
            0
          ],
          [
            5,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            0,
            0,
            0
          ],
          [
            5,
            0,
            0,
            0,
            0,
            5
          ],
          [
            5,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            1
          ],
          [
            0,
            4,
            0,
            0
          ],
          [
            0,
            1,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            4,
            4,
            1,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0,
            4
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            4,
            0
          ],
          [
            0,
            0,
            4,
            0,
            0,
            0
          ],
          [
            1,
            0,
            0,
            0,
            0,
            1
          ],
          [
            4,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "44f52bb0.py",
      "bc1d5164.py",
      "3de23699.py"
    ],
    "problem_id": 84980
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern recognition, adjacent color filling\n\n# description:\n# In the input, you will see a grid containing several distinct patterns formed by colored pixels. \n# To create the output, fill in any empty cells in the grid that are adjacent to the recognized patterns \n# with the corresponding patterns' colors.\n\ndef main(input_grid):\n    # Find connected components in the grid to identify different patterns\n    objects = find_connected_components(input_grid, background=Color.BLACK, connectivity=4, monochromatic=False)\n\n    # Create a copy of the input grid to fill in colors\n    output_grid = np.copy(input_grid)\n\n    # For each detected pattern, fill the adjacent empty spaces\n    for obj in objects:\n        color = obj[0, 0]  # Assume the color of the pattern is in the first pixel\n        # Get the bounding box of the current pattern\n        box_x, box_y, box_width, box_height = bounding_box(obj)\n        \n        # Fill adjacent cells with the pattern's color\n        for x in range(box_x, box_x + box_width):\n            for y in range(box_y, box_y + box_height):\n                # Check if this pixel belongs to the pattern\n                if obj[x - box_x, y - box_y] == color:\n                    # Check adjacent cells\n                    for dx in [-1, 1]:\n                        if 0 <= x + dx < output_grid.shape[0] and output_grid[x + dx, y] == Color.BLACK:\n                            output_grid[x + dx, y] = color\n                    for dy in [-1, 1]:\n                        if 0 <= y + dy < output_grid.shape[1] and output_grid[x, y + dy] == Color.BLACK:\n                            output_grid[x, y + dy] = color\n\n    return output_grid\n\ndef generate_input():\n    # Create a random-sized grid with a black background\n    n = np.random.randint(6, 10)  # Height of the grid\n    m = np.random.randint(6, 10)  # Width of the grid\n    grid = np.full((n, m), Color.BLACK)\n\n    # Randomly determine the number of distinct patterns to create\n    num_patterns = np.random.randint(2, 5)  # Between 2 and 4 patterns\n\n    for _ in range(num_patterns):\n        # Randomly choose a color for the pattern\n        color = np.random.choice(list(Color.NOT_BLACK))\n        # Random size for the pattern\n        size = np.random.randint(2, 4)  # Size of the pattern (between 2x2 and 3x3)\n\n        # Random position for the pattern, ensuring it fits within the grid\n        x = np.random.randint(0, n - size)\n        y = np.random.randint(0, m - size)\n\n        # Create the pattern in the grid\n        for i in range(size):\n            for j in range(size):\n                grid[x + i, y + j] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            3,
            3,
            3,
            0,
            0,
            0
          ],
          [
            9,
            9,
            3,
            0,
            0,
            0
          ],
          [
            9,
            9,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            3,
            3,
            0,
            0
          ],
          [
            9,
            9,
            3,
            3,
            0,
            0
          ],
          [
            9,
            9,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            9,
            9,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            9,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            2,
            2,
            2,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            2,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            4,
            4,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            8,
            5,
            5,
            0
          ],
          [
            9,
            9,
            8,
            8,
            8,
            5,
            5,
            0
          ],
          [
            9,
            9,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            4,
            0,
            0,
            0,
            0,
            0
          ],
          [
            4,
            4,
            8,
            8,
            8,
            5,
            5,
            0
          ],
          [
            9,
            9,
            8,
            8,
            8,
            5,
            5,
            0
          ],
          [
            9,
            9,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            7,
            7,
            0,
            0,
            0,
            0
          ],
          [
            7,
            7,
            4,
            4,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            7,
            7,
            7,
            0,
            0,
            0
          ],
          [
            7,
            7,
            4,
            4,
            0,
            0
          ],
          [
            7,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "995c5fa3.py",
      "a9f96cdd.py"
    ],
    "problem_id": 85111
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# radial symmetry, pattern replication\n\n# description:\n# In the input, you will see a small circular pattern of pixels in the center of the grid. \n# To create the output, replicate this pattern in a radial arrangement around the center, \n# creating multiple copies at equal distances from the center until the grid is filled.\n\ndef main(input_grid):\n    # Find the connected components in the input grid\n    objects = find_connected_components(input_grid, background=Color.BLACK, connectivity=8)\n\n    # Assume there is only one pattern (the circle) in the center\n    assert len(objects) == 1\n    circle = objects[0]\n    \n    # Get the bounding box of the circle\n    x, y, width, height = bounding_box(circle)\n    center_x, center_y = x + width // 2, y + height // 2\n    \n    # Calculate the output grid size\n    grid_size = max(input_grid.shape)\n    output_grid_size = (grid_size, grid_size)\n    output_grid = np.full(output_grid_size, Color.BLACK)\n\n    # Calculate radius increments for radial replication\n    max_radius = min(center_x, center_y, output_grid_size[0] - center_x, output_grid_size[1] - center_y)\n\n    # Copy the circle in radial symmetry\n    for radius in range(max_radius + 1):\n        for angle in range(0, 360, 45):  # 8 positions around the circle\n            rad_angle = np.radians(angle)\n            offset_x = int(radius * np.cos(rad_angle))\n            offset_y = int(radius * np.sin(rad_angle))\n\n            # Calculate the position in the output grid\n            target_x = center_x + offset_x\n            target_y = center_y + offset_y\n\n            # Blit the circle pattern to the output grid\n            blit_sprite(output_grid, circle, x=target_x - width // 2, y=target_y - height // 2, background=Color.BLACK)\n\n    return output_grid\n\n\ndef generate_input():\n    # Create a random-sized grid with a black background\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Create a random color for the circular pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create a small circular pattern in the center\n    circle_radius = np.random.randint(1, min(n, m)//4)\n    y_center, x_center = n // 2, m // 2\n\n    # Draw the circle\n    for x in range(n):\n        for y in range(m):\n            if (x - y_center) ** 2 + (y - x_center) ** 2 <= circle_radius ** 2:\n                grid[x, y] = color\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            6,
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            6,
            6,
            6,
            6,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            6,
            6,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            0,
            4,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            0,
            0,
            4,
            4,
            4,
            4,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            4,
            4,
            4
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            0,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "a9f96cdd.py",
      "6d58a25d.py"
    ],
    "problem_id": 87326
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# mirroring, object duplication\n\n# description:\n# In the input, you will see a colored object on one side of the grid. \n# To produce the output, create a mirror image of the object on the opposite side of the grid, \n# ensuring that the colors and shapes are preserved.\n\ndef main(input_grid):\n    # Detect the colored object in the input grid\n    objects = find_connected_components(input_grid, background=Color.BLACK, connectivity=4)\n    \n    # There should only be one colored object\n    assert len(objects) == 1\n    colored_object = objects[0]\n    \n    # Get the dimensions of the original object\n    original_height, original_width = colored_object.shape\n    \n    # Create an output grid large enough to hold the original object and its mirror\n    output_grid = np.full((original_height, original_width * 2), Color.BLACK)\n    \n    # Blit the original object on the left side of the output grid\n    blit_object(output_grid, colored_object, background=Color.BLACK)\n    \n    # Create a mirror image of the object\n    mirrored_object = colored_object[:, ::-1]  # Reflect horizontally\n    \n    # Blit the mirrored object on the right side of the output grid\n    blit_object(output_grid, mirrored_object, background=Color.BLACK)\n    \n    return output_grid\n\ndef generate_input():\n    # Define dimensions for the object\n    height = np.random.randint(2, 6)\n    width = np.random.randint(2, 6)\n    \n    # Create a random object\n    colored_object = random_sprite(n=height, m=width, density=1, \n                                   color_palette=Color.NOT_BLACK, symmetry=None)\n    \n    # Create an empty grid\n    grid_height, grid_width = height, width\n    grid = np.full((grid_height, grid_width), Color.BLACK)\n    \n    # Blit the colored object onto the left side of the grid\n    blit_object(grid, colored_object, background=Color.BLACK)\n    \n    return grid",
    "examples": [
      [
        [
          [
            1,
            1
          ],
          [
            1,
            1
          ]
        ],
        [
          [
            1,
            1,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9
          ],
          [
            9,
            9,
            9,
            9
          ]
        ],
        [
          [
            9,
            9,
            9,
            9,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            9,
            9,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            9,
            9,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            9,
            9,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            3
          ],
          [
            3,
            3
          ]
        ],
        [
          [
            3,
            3,
            0,
            0
          ],
          [
            3,
            3,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            5
          ],
          [
            5,
            5
          ],
          [
            5,
            5
          ],
          [
            5,
            5
          ],
          [
            5,
            5
          ]
        ],
        [
          [
            5,
            5,
            0,
            0
          ],
          [
            5,
            5,
            0,
            0
          ],
          [
            5,
            5,
            0,
            0
          ],
          [
            5,
            5,
            0,
            0
          ],
          [
            5,
            5,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "44f52bb0.py",
      "1f642eb9.py",
      "6fa7a44f.py",
      "6d58a25d.py"
    ],
    "problem_id": 88128
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# recursive filling, pixel expansion\n\n# description:\n# In the input, you will see a pattern made of colored pixels. To create the output, expand each colored pixel into a larger block of the same color, effectively filling the surrounding empty space with newly created larger blocks.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Create an output grid initialized with the background color (black)\n    output_grid = np.full_like(input_grid, Color.BLACK)\n    \n    # Find all connected components (colored pixels) in the input grid\n    components = find_connected_components(input_grid, background=Color.BLACK, connectivity=4, monochromatic=True)\n    \n    # For each component, expand it\n    for component in components:\n        # Get the bounding box of the current component\n        x, y, width, height = bounding_box(component)\n\n        # Create the expanded block in the output grid\n        expanded_color = component[0, 0]  # Get the color of the current component\n        output_grid[x:x + width * 2, y:y + height * 2] = expanded_color  # Expand the block\n        \n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a grid of random size\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly select a color for the pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Randomly place colored pixels in the grid\n    num_pixels = np.random.randint(5, 15)\n    for _ in range(num_pixels):\n        x, y = np.random.randint(0, n), np.random.randint(0, m)\n        grid[x, y] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            8,
            8,
            8,
            0,
            8
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            8,
            8,
            0
          ],
          [
            0,
            0,
            8,
            0,
            8
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            0
          ],
          [
            8,
            8,
            8,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            0,
            3,
            0,
            3
          ],
          [
            0,
            0,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            3,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0
          ],
          [
            3,
            3,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            6,
            0
          ],
          [
            6,
            6,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            6,
            0,
            0
          ],
          [
            0,
            6,
            0,
            0,
            0,
            0,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            6
          ]
        ],
        [
          [
            6,
            6,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            6,
            6,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            9,
            0,
            9,
            0,
            0,
            0,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            0,
            0,
            0
          ],
          [
            0,
            9,
            9,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "2c608aff.py",
      "8e1813be.py",
      "3de23699.py"
    ],
    "problem_id": 88260
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern recognition, color transformation\n\n# description:\n# In the input grid, you will see a checkerboard pattern made of two colors: blue and yellow. \n# The pattern size can vary but must keep the checkerboard structure. \n# To make the output grid, transform the blue squares to red and the yellow squares to green, \n# keeping the same checkerboard pattern intact.\n\ndef main(input_grid):\n    # Initialize the output grid with the same shape as the input grid\n    output_grid = np.full(input_grid.shape, Color.BLACK)\n\n    # Loop through the input grid to check for the blue and yellow colors\n    for x in range(input_grid.shape[0]):\n        for y in range(input_grid.shape[1]):\n            if input_grid[x, y] == Color.BLUE:\n                output_grid[x, y] = Color.RED  # Transform blue to red\n            elif input_grid[x, y] == Color.YELLOW:\n                output_grid[x, y] = Color.GREEN  # Transform yellow to green\n\n    return output_grid\n\ndef generate_input():\n    # Randomly generate the size of the checkerboard pattern\n    size = np.random.randint(4, 8)  # Choose size between 4x4 and 7x7\n    grid = np.full((size, size), Color.BLACK)  # Start with a black grid\n\n    # Fill the grid with a checkerboard pattern of blue and yellow\n    for x in range(size):\n        for y in range(size):\n            if (x + y) % 2 == 0:\n                grid[x, y] = Color.BLUE  # Blue squares\n            else:\n                grid[x, y] = Color.YELLOW  # Yellow squares\n\n    return grid",
    "examples": [
      [
        [
          [
            1,
            4,
            1,
            4,
            1
          ],
          [
            4,
            1,
            4,
            1,
            4
          ],
          [
            1,
            4,
            1,
            4,
            1
          ],
          [
            4,
            1,
            4,
            1,
            4
          ],
          [
            1,
            4,
            1,
            4,
            1
          ]
        ],
        [
          [
            2,
            3,
            2,
            3,
            2
          ],
          [
            3,
            2,
            3,
            2,
            3
          ],
          [
            2,
            3,
            2,
            3,
            2
          ],
          [
            3,
            2,
            3,
            2,
            3
          ],
          [
            2,
            3,
            2,
            3,
            2
          ]
        ]
      ],
      [
        [
          [
            1,
            4,
            1,
            4,
            1,
            4
          ],
          [
            4,
            1,
            4,
            1,
            4,
            1
          ],
          [
            1,
            4,
            1,
            4,
            1,
            4
          ],
          [
            4,
            1,
            4,
            1,
            4,
            1
          ],
          [
            1,
            4,
            1,
            4,
            1,
            4
          ],
          [
            4,
            1,
            4,
            1,
            4,
            1
          ]
        ],
        [
          [
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2
          ]
        ]
      ],
      [
        [
          [
            1,
            4,
            1,
            4
          ],
          [
            4,
            1,
            4,
            1
          ],
          [
            1,
            4,
            1,
            4
          ],
          [
            4,
            1,
            4,
            1
          ]
        ],
        [
          [
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2
          ],
          [
            2,
            3,
            2,
            3
          ],
          [
            3,
            2,
            3,
            2
          ]
        ]
      ],
      [
        [
          [
            1,
            4,
            1,
            4,
            1,
            4,
            1
          ],
          [
            4,
            1,
            4,
            1,
            4,
            1,
            4
          ],
          [
            1,
            4,
            1,
            4,
            1,
            4,
            1
          ],
          [
            4,
            1,
            4,
            1,
            4,
            1,
            4
          ],
          [
            1,
            4,
            1,
            4,
            1,
            4,
            1
          ],
          [
            4,
            1,
            4,
            1,
            4,
            1,
            4
          ],
          [
            1,
            4,
            1,
            4,
            1,
            4,
            1
          ]
        ],
        [
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ],
          [
            3,
            2,
            3,
            2,
            3,
            2,
            3
          ],
          [
            2,
            3,
            2,
            3,
            2,
            3,
            2
          ]
        ]
      ]
    ],
    "seeds": [
      "a9f96cdd.py",
      "995c5fa3.py",
      "bc1d5164.py",
      "1fad071e.py"
    ],
    "problem_id": 88607
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, color inversion\n\n# description:\n# In the input, you will see a grid that contains a symmetrical pattern of colored pixels.\n# To make the output, if the pattern is symmetric, invert the colors of the entire grid.\n# If it is not symmetric, retain the original colors.\n\ndef main(input_grid):\n    # Check for horizontal symmetry\n    n = input_grid.shape[0]\n    middle_row = n // 2\n    \n    # Determine if the grid is symmetric along the horizontal axis\n    is_symmetric = np.all(input_grid[:middle_row] == input_grid[n-middle_row:][::-1])\n\n    if is_symmetric:\n        # Invert the colors of the entire grid\n        output_grid = np.vectorize(lambda x: Color.BLACK if x != Color.BLACK else Color.RED)(input_grid)\n    else:\n        # Retain the original colors\n        output_grid = input_grid.copy()\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly choose a color\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Randomly determine the size of the pattern so that it's symmetric\n    pattern_height = np.random.randint(1, n // 2 + 1)\n    pattern_width = np.random.randint(1, m)\n\n    # Create a symmetric pattern\n    for i in range(pattern_height):\n        for j in range(pattern_width):\n            grid[i, j] = color\n            grid[n - i - 1, j] = color  # Mirror the color to create symmetry\n\n    # Randomly scatter black pixels in the grid to fill the rest\n    for _ in range(n * m // 4):\n        x = np.random.randint(0, n)\n        y = np.random.randint(0, m)\n        grid[x, y] = Color.BLACK\n\n    return grid",
    "examples": [
      [
        [
          [
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            0,
            0,
            0,
            0
          ],
          [
            3,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            2,
            2,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2,
            2
          ],
          [
            0,
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            6,
            6,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            6,
            6,
            6,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            0,
            0,
            0,
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            8,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            0,
            0,
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            9,
            9,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            9,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            0,
            0,
            2,
            2,
            2,
            2
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "44f52bb0.py",
      "3de23699.py",
      "6fa7a44f.py"
    ],
    "problem_id": 88665
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# translation, color mirroring\n\n# description:\n# In the input, you will see a rectangular grid containing a pattern of colored pixels. \n# To create the output, you should translate the pattern diagonally down-right by a fixed offset and mirror the translated pattern horizontally. \n# The output grid should contain the original pattern in the top left corner and the mirrored translated pattern in the bottom right corner.\n\ndef main(input_grid):\n    # Get the size of the input grid\n    n, m = input_grid.shape\n    \n    # Determine the offset for translation\n    offset = 2\n    \n    # Create the output grid with a size large enough to hold both patterns\n    output_grid = np.full((n + offset, m + offset), Color.BLACK)\n\n    # Copy the original pattern to the output grid\n    output_grid[:n, :m] = input_grid\n    \n    # Translate the original pattern down-right by the offset\n    translated_pattern = np.full((n, m), Color.BLACK)\n    translated_pattern[offset:, offset:] = input_grid[:-offset, :-offset]\n    \n    # Mirror the translated pattern horizontally\n    mirrored_pattern = translated_pattern[:, ::-1]\n    \n    # Place the mirrored pattern in the bottom right corner of the output grid\n    output_grid[-n:, -m:] = mirrored_pattern\n    \n    return output_grid\n\ndef generate_input():\n    # Generate a random pattern in a rectangular grid\n    n = np.random.randint(3, 6)\n    m = np.random.randint(3, 6)\n    \n    # Create a random sprite with colors other than black\n    grid = random_sprite(n, m, density=1, symmetry=None, color_palette=Color.NOT_BLACK)\n    \n    return grid",
    "examples": [
      [
        [
          [
            5,
            5,
            9,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            6,
            6,
            6,
            5
          ],
          [
            5,
            5,
            3,
            5,
            5
          ]
        ],
        [
          [
            5,
            5,
            9,
            5,
            5,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            5,
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            5,
            5,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            6
          ],
          [
            7,
            7,
            1
          ],
          [
            7,
            7,
            1
          ]
        ],
        [
          [
            1,
            1,
            6,
            0,
            0
          ],
          [
            7,
            7,
            1,
            0,
            0
          ],
          [
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            8,
            2,
            2,
            2,
            8
          ],
          [
            9,
            9,
            2,
            9,
            9
          ],
          [
            9,
            9,
            2,
            9,
            9
          ],
          [
            9,
            7,
            9,
            7,
            9
          ]
        ],
        [
          [
            8,
            2,
            2,
            2,
            8,
            0,
            0
          ],
          [
            9,
            9,
            2,
            9,
            9,
            0,
            0
          ],
          [
            9,
            9,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            7,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            2,
            8,
            0,
            0
          ],
          [
            0,
            0,
            2,
            9,
            9,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1,
            6,
            1
          ],
          [
            6,
            6,
            6,
            6,
            1
          ],
          [
            1,
            6,
            9,
            6,
            1
          ],
          [
            1,
            6,
            6,
            6,
            6
          ],
          [
            1,
            6,
            1,
            1,
            1
          ]
        ],
        [
          [
            1,
            1,
            1,
            6,
            1,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            1,
            0,
            0
          ],
          [
            1,
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            6,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            6,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            9,
            6,
            1,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "995c5fa3.py",
      "0b148d64.py"
    ],
    "problem_id": 88853
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pixel stacking, color mapping\n\n# description:\n# In the input, you will see a series of colored pixels stacked vertically in columns, with each column representing a different color. \n# To create the output, map the colors of each column to the corresponding rows of the output grid, such that the topmost pixel of each column occupies the leftmost side of the output grid. \n# The output grid will have the same number of columns as input columns, but the number of rows will be determined by the maximum height of the columns. \n# Each column will be filled from the bottom up with the respective colors until the maximum height is reached.\n\ndef main(input_grid):\n    # Create an output grid with the same width as the input grid and height equal to the maximum column height\n    max_height = np.max(np.sum(input_grid != Color.BLACK, axis=0))\n    output_grid = np.full((max_height, input_grid.shape[1]), Color.BLACK)\n\n    # Fill the output grid by mapping the colors from the input grid to the output\n    for col in range(input_grid.shape[1]):\n        # Get the colors in the current column\n        colors = input_grid[:, col]\n        # Find the non-black pixels\n        non_black_colors = colors[colors != Color.BLACK]\n        # Place these colors in the output grid from the bottom up\n        for row in range(len(non_black_colors)):\n            output_grid[max_height - len(non_black_colors) + row, col] = non_black_colors[row]\n\n    return output_grid\n\n\ndef generate_input():\n    # Set the dimensions for the input grid\n    num_columns = np.random.randint(3, 10)\n    max_height = np.random.randint(3, 8)\n    input_grid = np.full((max_height, num_columns), Color.BLACK)\n\n    # Populate each column with a random color from the color palette\n    for col in range(num_columns):\n        # Randomly determine the height of the current column (how many colored pixels it will have)\n        height = np.random.randint(1, max_height + 1)\n        # Choose random colors for this column\n        colors = np.random.choice(list(Color.NOT_BLACK), height, replace=True)\n        # Fill the column with the selected colors\n        input_grid[max_height - height:max_height, col] = colors\n\n    return input_grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            0
          ],
          [
            5,
            0,
            5,
            0,
            3,
            0
          ],
          [
            8,
            0,
            7,
            0,
            6,
            0
          ],
          [
            1,
            6,
            6,
            6,
            5,
            3
          ],
          [
            3,
            2,
            3,
            6,
            8,
            8
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            5,
            0
          ],
          [
            5,
            0,
            5,
            0,
            3,
            0
          ],
          [
            8,
            0,
            7,
            0,
            6,
            0
          ],
          [
            1,
            6,
            6,
            6,
            5,
            3
          ],
          [
            3,
            2,
            3,
            6,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            8,
            0,
            0,
            6,
            0,
            0
          ],
          [
            8,
            6,
            2,
            0,
            3,
            9,
            4
          ],
          [
            6,
            2,
            7,
            8,
            3,
            7,
            4
          ]
        ],
        [
          [
            0,
            8,
            0,
            0,
            6,
            0,
            0
          ],
          [
            8,
            6,
            2,
            0,
            3,
            9,
            4
          ],
          [
            6,
            2,
            7,
            8,
            3,
            7,
            4
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            2,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            6,
            6,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            6,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            4,
            0,
            7,
            3,
            6,
            0,
            9
          ],
          [
            1,
            9,
            7,
            8,
            6,
            5,
            9,
            8
          ]
        ],
        [
          [
            0,
            2,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            6,
            6,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            6,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            7,
            4,
            0,
            7,
            3,
            6,
            0,
            9
          ],
          [
            1,
            9,
            7,
            8,
            6,
            5,
            9,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            0,
            0,
            5,
            0
          ],
          [
            4,
            0,
            0,
            0,
            2,
            5,
            0
          ],
          [
            4,
            0,
            0,
            0,
            2,
            8,
            0
          ],
          [
            4,
            0,
            3,
            2,
            1,
            7,
            6
          ],
          [
            6,
            0,
            9,
            8,
            2,
            5,
            9
          ],
          [
            7,
            5,
            9,
            9,
            2,
            1,
            9
          ]
        ],
        [
          [
            8,
            0,
            0,
            0,
            0,
            5,
            0
          ],
          [
            4,
            0,
            0,
            0,
            2,
            5,
            0
          ],
          [
            4,
            0,
            0,
            0,
            2,
            8,
            0
          ],
          [
            4,
            0,
            3,
            2,
            1,
            7,
            6
          ],
          [
            6,
            0,
            9,
            8,
            2,
            5,
            9
          ],
          [
            7,
            5,
            9,
            9,
            2,
            1,
            9
          ]
        ]
      ]
    ],
    "seeds": [
      "bd4472b8.py",
      "6d58a25d.py",
      "1f642eb9.py",
      "8e1813be.py"
    ],
    "problem_id": 89644
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# data compression, block grouping\n\n# description:\n# In the input, you will see a grid where every group of adjacent pixels of the same color forms a block. \n# The output should compress these blocks into a single pixel representing their color, effectively summarizing the grid.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Create output grid initialized to black\n    output_height, output_width = input_grid.shape\n    output_grid = np.full((output_height, output_width), Color.BLACK)\n\n    # Iterate over the grid to find blocks of connected pixels of the same color\n    visited = np.zeros_like(input_grid, dtype=bool)\n    blocks = find_connected_components(input_grid, background=Color.BLACK, monochromatic=True)\n\n    # For each block found, mark its position in the output grid\n    for block in blocks:\n        # Get the color of the block\n        color = block[0, 0]  # All pixels in the block have the same color\n        # Get the bounding box of the block\n        x, y, w, h = bounding_box(block, background=Color.BLACK)\n\n        # Place the color of the block in the output grid at the top-left corner of the block's bounding box\n        output_grid[x, y] = color\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a grid of random size with random blocks of colors\n    n, m = np.random.randint(5, 12), np.random.randint(5, 12)\n    grid = np.full((n, m), Color.BLACK)\n\n    num_blocks = np.random.randint(5, 15)\n    available_colors = list(Color.NOT_BLACK)\n\n    for _ in range(num_blocks):\n        # Randomly choose a color for the block\n        color = np.random.choice(available_colors)\n        # Choose a random block size\n        block_height = np.random.randint(1, 4)\n        block_width = np.random.randint(1, 4)\n\n        # Randomly choose a position for the block, ensuring it fits in the grid\n        start_x = np.random.randint(0, n - block_height + 1)\n        start_y = np.random.randint(0, m - block_width + 1)\n\n        # Fill the block with the chosen color\n        grid[start_x:start_x + block_height, start_y:start_y + block_width] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            6,
            1,
            1,
            3,
            0
          ],
          [
            6,
            7,
            7,
            7,
            0
          ],
          [
            3,
            7,
            7,
            7,
            0
          ],
          [
            3,
            7,
            7,
            7,
            0
          ],
          [
            8,
            7,
            7,
            3,
            3
          ]
        ],
        [
          [
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            7,
            3,
            3,
            3,
            0,
            0
          ],
          [
            7,
            3,
            3,
            3,
            5,
            0
          ],
          [
            7,
            6,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            5,
            0
          ],
          [
            1,
            1,
            5,
            5,
            5,
            0
          ],
          [
            0,
            0,
            5,
            5,
            5,
            0
          ]
        ],
        [
          [
            7,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            0,
            3,
            3,
            9,
            9
          ],
          [
            7,
            7,
            7,
            6,
            8,
            9,
            9
          ],
          [
            7,
            7,
            7,
            6,
            8,
            2,
            8
          ],
          [
            7,
            7,
            5,
            0,
            0,
            2,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            2,
            0
          ]
        ],
        [
          [
            2,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            5,
            2,
            5
          ],
          [
            1,
            3,
            3,
            2,
            5
          ],
          [
            1,
            3,
            7,
            7,
            0
          ],
          [
            0,
            3,
            7,
            7,
            0
          ],
          [
            4,
            4,
            4,
            7,
            0
          ]
        ],
        [
          [
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "8e1813be.py",
      "09629e4f.py"
    ],
    "problem_id": 91070
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pixel manipulation, rotation, color filling\n\n# description:\n# In the input, you will see a small square of colored pixels on a white background. \n# To make the output, rotate the square 90 degrees clockwise and fill in the background \n# with the corresponding color of the edge pixels from the original square.\n\ndef main(input_grid):\n    # Create an output grid with the same size as the input grid.\n    output_grid = np.copy(input_grid)\n\n    # Find connected components to identify the square.\n    components = find_connected_components(input_grid, monochromatic=True, background=Color.BLACK)\n\n    # We assume there's only one square; get the first component.\n    square = components[0]\n    \n    # Get the bounding box of the square.\n    x, y, width, height = bounding_box(square)\n    \n    # Extract the color of the square.\n    square_color = square[x, y]\n    \n    # Rotate the square 90 degrees clockwise.\n    rotated_square = np.rot90(square, k=-1)  # Rotate clockwise by 90 degrees\n\n    # Determine the new position for the rotated square.\n    new_x, new_y = y, (output_grid.shape[1] - width) + x\n    \n    # Blit the rotated square onto the output grid.\n    blit_sprite(output_grid, rotated_square, x=new_x, y=new_y, background=Color.BLACK)\n\n    # Fill in the background with the edge pixel color of the original square.\n    for i in range(width):\n        # Fill the top edge (original left side)\n        output_grid[y, new_y + i] = square_color\n        # Fill the bottom edge (original right side)\n        output_grid[y + height - 1, new_y + i] = square_color\n        # Fill the left edge (original bottom side)\n        output_grid[y + i, new_y] = square_color\n        # Fill the right edge (original top side)\n        output_grid[y + i, new_y + width - 1] = square_color\n\n    return output_grid\n\ndef generate_input():\n    # Create a black grid for the background\n    n = m = np.random.randint(5, 15)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Create a random square size\n    square_size = np.random.randint(2, min(n, m) // 2)\n    \n    # Randomly select a color for the square\n    square_color = np.random.choice(list(Color.NOT_BLACK))\n    \n    # Generate the square sprite\n    square_sprite = random_sprite(square_size, square_size, color_palette=[square_color], density=1.0)\n    \n    # Place the square in a random position\n    x, y = random_free_location_for_sprite(grid, square_sprite)\n    \n    # Draw the square on the grid\n    blit_sprite(grid, square_sprite, x=x, y=y, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            7,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            7,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            7,
            7
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            9
          ],
          [
            0,
            0,
            0,
            0,
            9,
            9
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5,
            5
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5,
            5
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "623ea044.py",
      "2c608aff.py",
      "3befdf3e.py",
      "aabf363d.py"
    ],
    "problem_id": 91686
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotational symmetry, pattern expansion\n\n# description:\n# In the input, you will see a pattern with a few colored pixels that exhibit rotational symmetry.\n# To create the output, expand the pattern outward by duplicating it in all directions until it fills a larger grid.\n\ndef main(input_grid):\n    # Find connected components in the input grid\n    objects = find_connected_components(input_grid, connectivity=8)\n\n    # Assuming only one object (the pattern) is present\n    if len(objects) != 1:\n        raise ValueError(\"Expected exactly one pattern in the input grid.\")\n\n    # Get the bounding box of the pattern\n    (x, y, width, height) = bounding_box(objects[0])\n\n    # Determine the size of the output grid\n    output_size = max(width, height) * 3  # Expand to three times the size\n    output_grid = np.full((output_size, output_size), Color.BLACK)\n\n    # Calculate the center of the output grid to place the pattern\n    center_x = (output_size - width) // 2\n    center_y = (output_size - height) // 2\n\n    # Crop the original pattern from the connected component\n    sprite = crop(objects[0])\n\n    # Blit the pattern to the center of the output grid\n    blit_sprite(output_grid, sprite, x=center_x, y=center_y, background=Color.BLACK)\n    \n    return output_grid\n\ndef generate_input():\n    # Define random dimensions for the initial pattern\n    n = np.random.randint(3, 6)\n    m = np.random.randint(3, 6)\n\n    # Generate a random pattern with rotational symmetry\n    grid = np.full((n, m), Color.BLACK)\n\n    # Choose a color for the pattern\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create a simple rotational symmetric pattern\n    # Place the color at the center and at the corners\n    center_x, center_y = n // 2, m // 2\n    grid[center_x, center_y] = color\n    if n > 1 and m > 1:\n        grid[0, 0] = color\n        grid[0, m - 1] = color\n        grid[n - 1, 0] = color\n        grid[n - 1, m - 1] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            6,
            0,
            6
          ],
          [
            0,
            6,
            0
          ],
          [
            6,
            0,
            6
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            8,
            0,
            8
          ],
          [
            0,
            8,
            0
          ],
          [
            8,
            0,
            8
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            0,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            0,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            3
          ],
          [
            0,
            3,
            0
          ],
          [
            3,
            0,
            3
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            3,
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            0,
            5
          ],
          [
            0,
            5,
            0
          ],
          [
            5,
            0,
            5
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            0,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            5,
            0,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "6fa7a44f.py",
      "44f52bb0.py",
      "3de23699.py"
    ],
    "problem_id": 92704
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern replication, rotation\n\n# description:\n# In the input, you will see a colorful object in the center of a grid. \n# To make the output, replicate the object four times around the grid, \n# positioned at each corner, and rotate each copy by 90 degrees clockwise.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Step 1: Extract the central object using crop\n    central_object = crop(input_grid, background=Color.BLACK)\n\n    # Step 2: Create an output grid with the same shape as the input grid, initialized to black\n    output_shape = input_grid.shape\n    output_grid = np.full(output_shape, Color.BLACK, dtype=int)\n\n    # Step 3: Place the original and rotated copies of the central object at the corners\n    positions = [(0, 0), (0, output_shape[1] - central_object.shape[1]), \n                 (output_shape[0] - central_object.shape[0], 0), \n                 (output_shape[0] - central_object.shape[0], output_shape[1] - central_object.shape[1])]\n\n    # Step 4: Rotate and place the object in each corner\n    for i, (x, y) in enumerate(positions):\n        if i == 0:\n            blit_sprite(output_grid, central_object, x=x, y=y)\n        else:\n            # Rotate the central object 90 degrees clockwise\n            rotated_object = np.rot90(central_object, k=-1)  # Rotate clockwise\n            blit_sprite(output_grid, rotated_object, x=x, y=y)\n            central_object = rotated_object  # Update for the next position\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly generate a central object\n    n = np.random.randint(3, 6)  # height of the object\n    m = np.random.randint(3, 6)  # width of the object\n    central_object = random_sprite(n, m, density=1, symmetry=\"not_symmetric\", color_palette=Color.NOT_BLACK)\n\n    # Create an output grid that can fit the central object in the center\n    grid_size = max(n, m) + 4  # Ensure there's space for the corners\n    input_grid = np.full((grid_size, grid_size), Color.BLACK, dtype=int)\n\n    # Place the central object in the center of the input grid\n    start_x = (grid_size - n) // 2\n    start_y = (grid_size - m) // 2\n    blit_sprite(input_grid, central_object, x=start_x, y=start_y)\n\n    return input_grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            4,
            4,
            7,
            7,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            4,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            9,
            5,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            6,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            7,
            9,
            6,
            2,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            4,
            4,
            4,
            7,
            7,
            9,
            9,
            9,
            4
          ],
          [
            9,
            9,
            4,
            5,
            9,
            9,
            9,
            9,
            4
          ],
          [
            9,
            9,
            9,
            9,
            6,
            6,
            9,
            4,
            4
          ],
          [
            9,
            9,
            6,
            8,
            2,
            8,
            9,
            5,
            7
          ],
          [
            5,
            2,
            6,
            9,
            7,
            5,
            5,
            8,
            5
          ],
          [
            8,
            8,
            6,
            9,
            7,
            5,
            9,
            8,
            2
          ],
          [
            5,
            9,
            9,
            9,
            4,
            4,
            9,
            6,
            6
          ],
          [
            5,
            5,
            4,
            9,
            4,
            9,
            9,
            9,
            9
          ],
          [
            7,
            7,
            4,
            4,
            4,
            9,
            9,
            9,
            7
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            9,
            9,
            0,
            0,
            0
          ],
          [
            0,
            0,
            4,
            9,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            9,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            9,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            7,
            9,
            9,
            0,
            0,
            9,
            2,
            4
          ],
          [
            4,
            9,
            1,
            0,
            0,
            2,
            9,
            9
          ],
          [
            2,
            9,
            3,
            0,
            0,
            2,
            3,
            1
          ],
          [
            9,
            2,
            2,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            2,
            9,
            0,
            0,
            9,
            1,
            3
          ],
          [
            3,
            9,
            2,
            0,
            0,
            9,
            9,
            9
          ],
          [
            1,
            9,
            4,
            0,
            0,
            7,
            4,
            2
          ],
          [
            9,
            9,
            7,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            2,
            2,
            3,
            7,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            2,
            1,
            2,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            2,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            9,
            7,
            9,
            9,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            2,
            2,
            3,
            9,
            9,
            9,
            8,
            0
          ],
          [
            9,
            9,
            2,
            1,
            7,
            9,
            9,
            2,
            0
          ],
          [
            9,
            9,
            2,
            6,
            9,
            2,
            2,
            2,
            0
          ],
          [
            9,
            7,
            9,
            9,
            9,
            6,
            1,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            6,
            2,
            7,
            0
          ],
          [
            8,
            9,
            9,
            7,
            7,
            2,
            6,
            8,
            0
          ],
          [
            6,
            6,
            2,
            9,
            3,
            1,
            6,
            9,
            0
          ],
          [
            2,
            1,
            2,
            9,
            2,
            2,
            2,
            9,
            0
          ],
          [
            7,
            3,
            2,
            2,
            2,
            9,
            9,
            7,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            3,
            3,
            9,
            2,
            1,
            0,
            0
          ],
          [
            0,
            0,
            9,
            9,
            9,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            9,
            3,
            5,
            4,
            6,
            0,
            0
          ],
          [
            0,
            0,
            2,
            5,
            5,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            5,
            6,
            5,
            7,
            9,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            9,
            2,
            5,
            2,
            9,
            9,
            3
          ],
          [
            9,
            9,
            9,
            6,
            6,
            5,
            3,
            9,
            3
          ],
          [
            9,
            3,
            5,
            4,
            5,
            5,
            5,
            9,
            9
          ],
          [
            2,
            5,
            5,
            6,
            7,
            6,
            4,
            6,
            2
          ],
          [
            9,
            7,
            5,
            6,
            1,
            6,
            6,
            6,
            9
          ],
          [
            6,
            6,
            5,
            5,
            2,
            6,
            4,
            6,
            7
          ],
          [
            6,
            4,
            5,
            3,
            9,
            9,
            5,
            5,
            5
          ],
          [
            6,
            6,
            9,
            9,
            3,
            9,
            3,
            5,
            6
          ],
          [
            1,
            2,
            9,
            3,
            3,
            9,
            9,
            2,
            5
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "a8c38be5.py",
      "44f52bb0.py",
      "3de23699.py"
    ],
    "problem_id": 93829
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# diagonal symmetry, pattern detection\n\n# description:\n# In the input, you will see a grid with a random pattern of pixels, but it contains a diagonal symmetric pattern.\n# To make the output, identify the diagonal symmetric pattern and reflect it across the diagonal axis to fill the grid symmetrically on either side.\n\ndef main(input_grid):\n    # Identify the dimensions of the input grid\n    rows, cols = input_grid.shape\n\n    # Create an output grid of the same size filled with the background color (black)\n    output_grid = np.full((rows, cols), Color.BLACK)\n\n    # Iterate over the input grid to fill the output grid with diagonal symmetry\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i, j] != Color.BLACK:  # Only consider non-black pixels\n                output_grid[j, i] = input_grid[i, j]  # Reflect across the diagonal\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n = np.random.randint(4, 8)\n    m = np.random.randint(4, 8)\n    \n    # Generate a random grid with a density of filled colors\n    grid = random_sprite(n, m, density=0.5, symmetry=\"diagonal\", color_palette=Color.NOT_BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            1,
            1,
            8,
            8
          ],
          [
            6,
            8,
            8,
            8
          ],
          [
            4,
            0,
            8,
            1
          ],
          [
            0,
            4,
            6,
            1
          ]
        ],
        [
          [
            1,
            6,
            4,
            0
          ],
          [
            1,
            8,
            0,
            4
          ],
          [
            8,
            8,
            8,
            6
          ],
          [
            8,
            8,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            3,
            6,
            6,
            0
          ],
          [
            9,
            9,
            1,
            6
          ],
          [
            7,
            7,
            9,
            6
          ],
          [
            7,
            7,
            9,
            3
          ]
        ],
        [
          [
            3,
            9,
            7,
            7
          ],
          [
            6,
            9,
            7,
            7
          ],
          [
            6,
            1,
            9,
            9
          ],
          [
            0,
            6,
            6,
            3
          ]
        ]
      ],
      [
        [
          [
            2,
            3,
            2,
            2,
            2,
            0
          ],
          [
            2,
            1,
            3,
            9,
            0,
            2
          ],
          [
            2,
            2,
            8,
            4,
            9,
            2
          ],
          [
            9,
            2,
            8,
            8,
            3,
            2
          ],
          [
            0,
            0,
            2,
            2,
            1,
            3
          ],
          [
            0,
            0,
            9,
            2,
            2,
            2
          ]
        ],
        [
          [
            2,
            2,
            2,
            9,
            0,
            0
          ],
          [
            3,
            1,
            2,
            2,
            0,
            0
          ],
          [
            2,
            3,
            8,
            8,
            2,
            9
          ],
          [
            2,
            9,
            4,
            8,
            2,
            2
          ],
          [
            2,
            0,
            9,
            3,
            1,
            2
          ],
          [
            0,
            2,
            2,
            2,
            3,
            2
          ]
        ]
      ],
      [
        [
          [
            0,
            7,
            7,
            8,
            0,
            0
          ],
          [
            0,
            3,
            7,
            8,
            0,
            0
          ],
          [
            3,
            5,
            7,
            6,
            8,
            8
          ],
          [
            0,
            7,
            7,
            7,
            7,
            7
          ],
          [
            0,
            0,
            7,
            5,
            3,
            7
          ],
          [
            0,
            0,
            0,
            3,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            3,
            0,
            0,
            0
          ],
          [
            7,
            3,
            5,
            7,
            0,
            0
          ],
          [
            7,
            7,
            7,
            7,
            7,
            0
          ],
          [
            8,
            8,
            6,
            7,
            5,
            3
          ],
          [
            0,
            0,
            8,
            7,
            3,
            0
          ],
          [
            0,
            0,
            8,
            7,
            7,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "44f52bb0.py",
      "ea786f4a.py"
    ],
    "problem_id": 93978
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, color filling\n\n# description:\n# In the input, you will see a grid with a colored shape that is symmetric along the vertical axis, but one side is incomplete. \n# To make the output, replicate the missing side of the shape to complete the symmetry using the same color.\n\ndef main(input_grid):\n    # Create a copy of the input grid for the output\n    output_grid = input_grid.copy()\n\n    # Detect mirror symmetry along the vertical axis\n    mirrors = detect_mirror_symmetry(input_grid)\n\n    # Loop over each color in the input grid\n    for x, y in np.argwhere(input_grid != Color.BLACK):\n        for mirror in mirrors:\n            # Find the mirrored coordinates\n            symmetric_x, symmetric_y = mirror.apply(x, y)\n            # If the symmetric position is black, fill it with the current color\n            if output_grid[symmetric_x, symmetric_y] == Color.BLACK:\n                output_grid[symmetric_x, symmetric_y] = input_grid[x, y]\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Choose a random color for the shape\n    shape_color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Generate a random sprite with vertical symmetry and fill part of it\n    sprite = random_sprite(n=np.random.randint(1, n//2), m=np.random.randint(1, m), density=0.5, symmetry='vertical', color_palette=[shape_color])\n    \n    # Place the sprite in the grid and randomly remove half of it to create the incomplete symmetry\n    sprite_x, sprite_y = random_free_location_for_sprite(grid, sprite)\n    blit_sprite(grid, sprite, x=sprite_x, y=sprite_y)\n\n    # Randomly occlude one side of the sprite to ensure it's incomplete\n    for x, y in np.argwhere(grid != Color.BLACK):\n        if np.random.rand() > 0.5:  # Randomly set half of the pixels to black\n            grid[x, y] = Color.BLACK\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            6,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            6,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            6,
            0,
            0,
            6,
            0,
            0,
            6
          ],
          [
            0,
            6,
            6,
            0,
            6,
            6,
            0,
            0
          ],
          [
            6,
            0,
            6,
            6,
            0,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            6,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            6,
            0,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            0,
            0,
            9,
            9,
            0,
            9,
            0
          ],
          [
            9,
            9,
            9,
            0,
            9,
            9,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            0,
            9,
            9,
            9,
            0,
            9,
            0
          ],
          [
            9,
            9,
            9,
            0,
            9,
            9,
            9,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4
          ],
          [
            0,
            0,
            4,
            4,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "44f52bb0.py",
      "3345333e.py",
      "1caeab9d.py"
    ],
    "problem_id": 94728
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, pattern replication, grid filling\n\n# description:\n# In the input, you will see a central colored pattern with a black background. \n# To make the output, rotate the pattern 90 degrees clockwise and place the rotated pattern in each quadrant of the output grid, filling the entire grid.\n\ndef main(input_grid):\n    # Extract the central pattern by cropping the input grid to its bounding box\n    central_pattern = crop(input_grid)\n    \n    # Rotate the pattern 90 degrees clockwise\n    rotated_pattern = np.rot90(central_pattern, k=-1)  # k=-1 for clockwise rotation\n    \n    # Get the dimensions of the output grid\n    height, width = input_grid.shape\n    output_grid = np.full((height, width), Color.BLACK)  # Initialize output grid with black\n    \n    # Place the original pattern in the center\n    output_grid[height//2 - central_pattern.shape[0]//2:height//2 + central_pattern.shape[0]//2,\n                width//2 - central_pattern.shape[1]//2:width//2 + central_pattern.shape[1]//2] = central_pattern\n\n    # Place the rotated pattern in the quadrants\n    output_grid[:central_pattern.shape[0], :central_pattern.shape[1]] = rotated_pattern  # Top-left\n    output_grid[:central_pattern.shape[0], -central_pattern.shape[1]:] = np.rot90(rotated_pattern, k=1)  # Top-right\n    output_grid[-central_pattern.shape[0]:, :central_pattern.shape[1]] = np.rot90(rotated_pattern, k=2)  # Bottom-left\n    output_grid[-central_pattern.shape[0]:, -central_pattern.shape[1]:] = np.rot90(rotated_pattern, k=3)  # Bottom-right\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random central pattern of random size and colors\n    n = np.random.randint(3, 6)  # Height of the pattern\n    m = np.random.randint(3, 6)  # Width of the pattern\n    central_pattern = random_sprite(n, m, density=0.5, symmetry=\"not_symmetric\", color_palette=Color.NOT_BLACK)\n\n    # Create the final input grid with a black background\n    grid_size = max(n, m) * 2  # Ensure the output grid can hold the patterns in quadrants\n    input_grid = np.full((grid_size, grid_size), Color.BLACK)\n\n    # Place the central pattern in the center of the grid\n    input_grid[grid_size//2 - n//2:grid_size//2 + n//2,\n               grid_size//2 - m//2:grid_size//2 + m//2] = central_pattern\n\n    return input_grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            2,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            8,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            7,
            2,
            2,
            0,
            0,
            0
          ],
          [
            0,
            8,
            8,
            0,
            7,
            8,
            0,
            0
          ],
          [
            8,
            8,
            0,
            0,
            0,
            8,
            8,
            0
          ],
          [
            8,
            0,
            0,
            0,
            0,
            0,
            8,
            8
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            0,
            8,
            8,
            0
          ],
          [
            0,
            8,
            8,
            0,
            0,
            0,
            8,
            7
          ],
          [
            2,
            7,
            0,
            0,
            0,
            0,
            0,
            2
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            1,
            1,
            1,
            6,
            0,
            0
          ],
          [
            0,
            1,
            1,
            6,
            1,
            1,
            0,
            0
          ],
          [
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            1
          ],
          [
            8,
            1,
            0,
            0,
            0,
            0,
            0,
            8
          ],
          [
            0,
            0,
            1,
            8,
            8,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0
          ],
          [
            6,
            1,
            1,
            0,
            0,
            0,
            1,
            1
          ],
          [
            1,
            1,
            0,
            0,
            0,
            0,
            6,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            5,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            1,
            0,
            0,
            0,
            0,
            0,
            5,
            0
          ],
          [
            1,
            1,
            0,
            0,
            0,
            0,
            5,
            0
          ],
          [
            0,
            6,
            5,
            5,
            0,
            1,
            6,
            6
          ],
          [
            0,
            6,
            0,
            0,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            6,
            0,
            0,
            0,
            1,
            1
          ],
          [
            5,
            5,
            6,
            0,
            6,
            6,
            1,
            0
          ],
          [
            0,
            0,
            1,
            1,
            0,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            0,
            5,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
          ],
          [
            0,
            0,
            6,
            1,
            1,
            1,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            0,
            0,
            0,
            0,
            0,
            0,
            4
          ],
          [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1
          ],
          [
            1,
            1,
            1,
            4,
            6,
            1,
            1,
            1
          ],
          [
            4,
            1,
            1,
            1,
            1,
            1,
            1,
            6
          ],
          [
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0
          ],
          [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            6,
            4,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "bc1d5164.py",
      "3de23699.py",
      "8e1813be.py"
    ],
    "problem_id": 95037
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# rotation, symmetry detection\n\n# description:\n# In the input, you will see a square pattern consisting of various colored pixels arranged in a grid.\n# To make the output, check if the pattern has rotational symmetry. If it does, rotate the pattern 90 degrees clockwise.\n# If it doesn\u2019t, color the entire grid with a specific color (e.g., grey).\n\ndef main(input_grid):\n    # Check for rotational symmetry in the input grid\n    sym = detect_rotational_symmetry(input_grid, ignore_colors=[Color.BLACK])\n    \n    # If symmetry is detected, rotate the grid 90 degrees clockwise\n    if sym:\n        output_grid = np.rot90(input_grid, k=-1)  # k=-1 for 90 degrees clockwise\n    else:\n        # If no symmetry, fill the output grid with grey\n        output_grid = np.full(input_grid.shape, Color.GREY)\n    \n    return output_grid\n\ndef generate_input():\n    # Generate a random square grid with dimensions between 3 and 6\n    n = m = np.random.randint(3, 7)\n    \n    # Create a random sprite with density, allowing for possible symmetry\n    grid = random_sprite(n, m, density=0.5, symmetry=None, color_palette=Color.NOT_BLACK)\n    \n    return grid",
    "examples": [
      [
        [
          [
            0,
            8,
            8,
            0
          ],
          [
            0,
            8,
            8,
            0
          ],
          [
            1,
            4,
            4,
            1
          ],
          [
            4,
            0,
            0,
            4
          ]
        ],
        [
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            1,
            1,
            1
          ],
          [
            1,
            1,
            1
          ],
          [
            0,
            1,
            0
          ]
        ],
        [
          [
            0,
            1,
            1
          ],
          [
            1,
            1,
            1
          ],
          [
            0,
            1,
            1
          ]
        ]
      ],
      [
        [
          [
            0,
            6,
            6,
            0
          ],
          [
            1,
            1,
            1,
            1
          ],
          [
            2,
            6,
            6,
            2
          ],
          [
            2,
            6,
            6,
            2
          ]
        ],
        [
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            2,
            2,
            0,
            0,
            2,
            2
          ],
          [
            0,
            2,
            0,
            0,
            2,
            0
          ],
          [
            0,
            2,
            0,
            0,
            2,
            0
          ],
          [
            4,
            2,
            9,
            9,
            2,
            4
          ],
          [
            3,
            1,
            1,
            1,
            1,
            3
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5
          ],
          [
            5,
            5,
            5,
            5,
            5,
            5
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "44f52bb0.py",
      "3e980e27.py",
      "1b60fb0c.py"
    ],
    "problem_id": 95405
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pattern expansion, quadrant replication\n\n# description:\n# In the input you will see a grid with a specific pattern of colored pixels surrounded by a black background. \n# To make the output, identify the pattern and replicate it in every quadrant of the grid, maintaining the original orientation of the pattern in each quadrant.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # First, identify the bounding box of the non-background pixels\n    objects = find_connected_components(input_grid, background=Color.BLACK, connectivity=8, monochromatic=True)\n    \n    # There should be only one component in this case\n    assert len(objects) == 1, \"Input grid should contain exactly one pattern.\"\n\n    # Crop the pattern\n    pattern = crop(objects[0])\n    \n    # Determine the size of the output grid\n    output_n = pattern.shape[0] * 2\n    output_m = pattern.shape[1] * 2\n    \n    # Create an empty output grid with a black background\n    output_grid = np.full((output_n, output_m), Color.BLACK)\n\n    # Place the pattern in each quadrant\n    blit_sprite(output_grid, pattern, x=0, y=0, background=Color.BLACK)  # Top-left\n    blit_sprite(output_grid, pattern, x=0, y=pattern.shape[1], background=Color.BLACK)  # Top-right\n    blit_sprite(output_grid, pattern, x=pattern.shape[0], y=0, background=Color.BLACK)  # Bottom-left\n    blit_sprite(output_grid, pattern, x=pattern.shape[0], y=pattern.shape[1], background=Color.BLACK)  # Bottom-right\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly generate a grid size\n    n = np.random.randint(3, 6)\n    m = np.random.randint(3, 6)\n\n    # Create a black background grid\n    grid = np.full((n, m), Color.BLACK)\n\n    # Create a random pattern\n    pattern_colors = np.random.choice(list(Color.NOT_BLACK), size=np.random.randint(1, 4), replace=False)\n\n    # Define a pattern size\n    pattern_height = np.random.randint(1, n // 2 + 1)\n    pattern_width = np.random.randint(1, m // 2 + 1)\n\n    # Generate the pattern\n    for i in range(pattern_height):\n        for j in range(pattern_width):\n            if np.random.random() < 0.5:  # Randomly decide if the pixel should be colored\n                grid[i, j] = np.random.choice(pattern_colors)\n\n    # Center the pattern in the grid, ensuring there is space for the quadrants\n    start_x = np.random.randint(1, n - pattern_height - 1)\n    start_y = np.random.randint(1, m - pattern_width - 1)\n\n    # Place the pattern within the grid\n    grid[start_x:start_x + pattern_height, start_y:start_y + pattern_width] = grid[:pattern_height, :pattern_width]\n\n    return grid",
    "examples": [
      [
        [
          [
            8,
            0,
            0,
            0
          ],
          [
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            0,
            8,
            0
          ],
          [
            0,
            8,
            0,
            8
          ],
          [
            8,
            0,
            8,
            0
          ],
          [
            0,
            8,
            0,
            8
          ]
        ]
      ],
      [
        [
          [
            6,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            0,
            6,
            0
          ],
          [
            0,
            6,
            0,
            6
          ],
          [
            6,
            0,
            6,
            0
          ],
          [
            0,
            6,
            0,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            5,
            0,
            0,
            0
          ],
          [
            5,
            0,
            5,
            0,
            0
          ],
          [
            0,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            5,
            0,
            0,
            5,
            0
          ],
          [
            5,
            0,
            5,
            5,
            0,
            5
          ],
          [
            0,
            5,
            5,
            0,
            5,
            5
          ],
          [
            0,
            5,
            0,
            0,
            5,
            0
          ],
          [
            5,
            0,
            5,
            5,
            0,
            5
          ],
          [
            0,
            5,
            5,
            0,
            5,
            5
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            3,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            0,
            3,
            0
          ],
          [
            0,
            3,
            0,
            3
          ],
          [
            3,
            0,
            3,
            0
          ],
          [
            0,
            3,
            0,
            3
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "3de23699.py",
      "0b148d64.py",
      "995c5fa3.py"
    ],
    "problem_id": 96486
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color blending, pattern expansion\n\n# description:\n# In the input, you will see a symmetrical pattern made of colored pixels on a black background.\n# To make the output, expand the pattern by duplicating it in all four corners of the output grid\n# and blend the colors of the expanded patterns with the original pattern, \n# producing a new grid where the colors blend with the original pattern colors.\n\ndef blend_colors(color1, color2):\n    # Simple blending function that averages the RGB values of the two colors\n    # For the purpose of this example, we will just return the second color if it's not black\n    if color2 != Color.BLACK:\n        return color2\n    return color1\n\ndef main(input_grid):\n    # Get the shape of the input grid\n    n, m = input_grid.shape\n\n    # Create an output grid that is larger than the input grid\n    output_grid = np.full((n * 2, m * 2), Color.BLACK)\n\n    # Place the original input pattern in the center of the output grid\n    output_grid[n//2:n//2 + n, m//2:m//2 + m] = input_grid\n\n    # Blend colors and place patterns in each corner\n    for i in range(2):\n        for j in range(2):\n            # Get the color from the original grid\n            corner_color = output_grid[n//2, m//2]  # Using the center color for blending\n\n            # Place the original pattern in the corners and blend\n            output_grid[i * n:(i + 1) * n, j * m:(j + 1) * m] = \\\n                np.vectorize(lambda c: blend_colors(c, corner_color))(input_grid)\n\n    return output_grid\n\ndef generate_input():\n    # Generate a random symmetrical pattern\n    n = np.random.randint(3, 6)\n    m = np.random.randint(3, 6)\n    \n    # Create a grid with a black background\n    grid = np.zeros((n, m), dtype=int)\n\n    # Fill the grid with a symmetrical pattern of random colors\n    for i in range(n):\n        for j in range(m):\n            if (i < n // 2 and j < m // 2) or (i >= n // 2 and j >= m // 2):\n                grid[i, j] = np.random.choice(list(Color.NOT_BLACK))\n\n    # Ensure the grid is symmetrical\n    grid[:n//2, :m//2] = grid[n//2:n, m//2:m]\n    grid[n//2:n, :m//2] = grid[:n//2, m//2:m]\n    grid[:n//2, m//2:m] = grid[n//2:n, :m//2]\n\n    return grid",
    "examples": [
      [
        [
          [
            8,
            4,
            0,
            0
          ],
          [
            8,
            7,
            0,
            0
          ],
          [
            0,
            0,
            8,
            4
          ],
          [
            0,
            0,
            8,
            7
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ],
          [
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            2,
            3,
            0,
            0
          ],
          [
            9,
            3,
            0,
            0
          ],
          [
            0,
            0,
            2,
            3
          ],
          [
            0,
            0,
            9,
            3
          ]
        ],
        [
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ],
          [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
          ]
        ]
      ],
      [
        [
          [
            3,
            7,
            0,
            0
          ],
          [
            8,
            6,
            0,
            0
          ],
          [
            0,
            0,
            3,
            7
          ],
          [
            0,
            0,
            8,
            6
          ]
        ],
        [
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ],
          [
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3
          ]
        ]
      ],
      [
        [
          [
            7,
            1,
            0,
            0
          ],
          [
            2,
            6,
            0,
            0
          ],
          [
            0,
            0,
            7,
            1
          ],
          [
            0,
            0,
            2,
            6
          ]
        ],
        [
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ],
          [
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
          ]
        ]
      ]
    ],
    "seeds": [
      "6fa7a44f.py",
      "3e980e27.py",
      "bc1d5164.py",
      "623ea044.py"
    ],
    "problem_id": 96882
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry detection, color filling\n\n# description:\n# In the input, you will see a pattern of colored pixels that is almost symmetric but has a few pixels missing.\n# To produce the output, identify the missing pixels that would complete the symmetry and fill them in with the same color as the surrounding pixels.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.copy(input_grid)\n    \n    # Find the bounding box of the non-background pixels\n    x_min, y_min, width, height = bounding_box(output_grid != Color.BLACK)\n    \n    # Check symmetry along vertical axis\n    for y in range(y_min, y_min + height):\n        for x in range(x_min, x_min + width // 2):\n            mirrored_x = x_min + width - 1 - (x - x_min)\n            if output_grid[y, x] != Color.BLACK and output_grid[y, mirrored_x] == Color.BLACK:\n                output_grid[y, mirrored_x] = output_grid[y, x]\n    \n    # Check symmetry along horizontal axis\n    for x in range(x_min, x_min + width):\n        for y in range(y_min, y_min + height // 2):\n            mirrored_y = y_min + height - 1 - (y - y_min)\n            if output_grid[y, x] != Color.BLACK and output_grid[mirrored_y, x] == Color.BLACK:\n                output_grid[mirrored_y, x] = output_grid[y, x]\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Generate a random grid\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Select a color for the pattern\n    pattern_color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Create a random symmetric pattern with some missing pixels\n    # Randomly decide to create a horizontal or vertical symmetry\n    symmetry_type = np.random.choice(['horizontal', 'vertical'])\n\n    # Create an initial random pattern\n    pattern = random_sprite(n, m, density=0.5, color_palette=[pattern_color], symmetry=symmetry_type)\n\n    # Introduce some missing pixels by randomly replacing some of the colored pixels with black\n    for _ in range(np.random.randint(1, 5)):  # Randomly remove a few pixels\n        x, y = np.random.randint(0, n), np.random.randint(0, m)\n        if pattern[x, y] != Color.BLACK:  # Ensure we only remove colored pixels\n            pattern[x, y] = Color.BLACK\n\n    # Place the pattern into the grid at a random position\n    pos_x, pos_y = np.random.randint(0, n), np.random.randint(0, m)\n    grid = blit_sprite(grid, pattern, pos_x, pos_y, background=Color.BLACK)\n\n    return grid",
    "examples": [
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8
          ],
          [
            0,
            0,
            0,
            8,
            8,
            8
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            8,
            8,
            8,
            8
          ],
          [
            0,
            0,
            0,
            0,
            8,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            8
          ],
          [
            0,
            0,
            8,
            8,
            8,
            8
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            4,
            0
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4
          ],
          [
            0,
            4,
            4,
            4,
            4,
            4
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            6,
            6,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6,
            6,
            6
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            0,
            6,
            6,
            6
          ],
          [
            0,
            0,
            0,
            0,
            6,
            6,
            6,
            6
          ]
        ]
      ],
      [
        [
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            4,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            4
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            0
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            4
          ],
          [
            0,
            0,
            0,
            4,
            4,
            4,
            4
          ]
        ]
      ]
    ],
    "seeds": [
      "3de23699.py",
      "bc1d5164.py",
      "623ea044.py",
      "44f52bb0.py"
    ],
    "problem_id": 98071
  },
  {
    "source": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# pixel expansion, grid transformation\n\n# description:\n# In the input, you will see a single colored pixel in the grid. \n# To create the output, expand this pixel into a larger pattern by repeating it in a 5x5 square, \n# filling the output grid with that pattern.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    # Find the colored pixel in the input grid\n    colored_pixel_objects = detect_objects(grid=input_grid, colors=Color.NOT_BLACK, allowed_dimensions=[(1, 1)], monochromatic=True)\n    assert len(colored_pixel_objects) == 1\n    colored_pixel = colored_pixel_objects[0]\n\n    # Get the position of the colored pixel\n    pixel_x, pixel_y = object_position(colored_pixel, background=Color.BLACK, anchor=\"upper left\")\n\n    # Create a 5x5 pattern from the found pixel\n    pattern_color = colored_pixel[0, 0]\n    pattern = np.full((5, 5), pattern_color)\n\n    # Create an output grid that is larger than the input grid by 4 (for 5x5 expansion)\n    output_grid = np.full((input_grid.shape[0] + 4, input_grid.shape[1] + 4), Color.BLACK)\n\n    # Place the 5x5 pattern in the output grid centered at the original pixel location\n    output_grid[pixel_x:pixel_x + 5, pixel_y:pixel_y + 5] = pattern\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Create a 3x3 grid for the input\n    grid = np.full((3, 3), Color.BLACK)\n\n    # Randomly select a position for the colored pixel in the grid\n    x, y = np.random.randint(0, 3), np.random.randint(0, 3)\n\n    # Randomly choose a color that is not black\n    color = np.random.choice(list(Color.NOT_BLACK))\n\n    # Set the chosen pixel to a random color\n    grid[x, y] = color\n\n    return grid",
    "examples": [
      [
        [
          [
            6,
            0,
            0
          ],
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0
          ]
        ],
        [
          [
            6,
            6,
            6,
            6,
            6,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            6,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            6,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            6,
            0,
            0
          ],
          [
            6,
            6,
            6,
            6,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            8,
            0,
            0
          ],
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0
          ]
        ],
        [
          [
            8,
            8,
            8,
            8,
            8,
            0,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            0,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            0,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            0,
            0
          ],
          [
            8,
            8,
            8,
            8,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            3,
            0,
            0
          ],
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0
          ]
        ],
        [
          [
            3,
            3,
            3,
            3,
            3,
            0,
            0
          ],
          [
            3,
            3,
            3,
            3,
            3,
            0,
            0
          ],
          [
            3,
            3,
            3,
            3,
            3,
            0,
            0
          ],
          [
            3,
            3,
            3,
            3,
            3,
            0,
            0
          ],
          [
            3,
            3,
            3,
            3,
            3,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            5,
            0,
            0
          ],
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0
          ]
        ],
        [
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            5,
            5,
            5,
            5,
            5,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "bc1d5164.py",
      "1fad071e.py",
      "a9f96cdd.py",
      "3de23699.py"
    ],
    "problem_id": 98239
  },
  {
    "source": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color mixing, pixel transformations\n\n# description:\n# In the input, you will see a grid with overlapping colored blocks (red, blue, green) and empty spaces.\n# Each colored block can mix with other blocks directly below it. The mixing rules are:\n# - Red + Blue = Teal\n# - Red + Green = Yellow\n# - Blue + Green = Orange\n# - If a block is directly above a different colored block, the color of the block below will change if mixed.\n# The output should reflect the color mixing based on these rules for every block that can mix.\n\ndef main(input_grid):\n    output_grid = np.copy(input_grid)\n    height, width = output_grid.shape\n\n    # Define mixing rules\n    mixing_rules = {\n        (Color.RED, Color.BLUE): Color.TEAL,\n        (Color.RED, Color.GREEN): Color.YELLOW,\n        (Color.BLUE, Color.GREEN): Color.ORANGE,\n    }\n\n    # Iterate over the grid to apply mixing rules\n    for x in range(width):\n        for y in range(height - 1):  # We can't mix with the bottom row\n            current_color = output_grid[y, x]\n            below_color = output_grid[y + 1, x]\n\n            if (current_color, below_color) in mixing_rules:\n                output_grid[y + 1, x] = mixing_rules[(current_color, below_color)]\n\n    return output_grid\n\n\ndef generate_input():\n    # Create a grid of size 6x6\n    grid = np.full((6, 6), Color.BLACK)\n\n    # Randomly place colored blocks in the grid\n    colors = [Color.RED, Color.BLUE, Color.GREEN]\n    \n    # Randomly generate colored blocks and place them\n    for _ in range(random.randint(5, 15)):  # Random number of blocks\n        color = random.choice(colors)\n        sprite_width = random.randint(1, 3)\n        sprite_height = random.randint(1, 3)\n        sprite = random_sprite(n=sprite_width, m=sprite_height, color_palette=[color], density=1.0)\n\n        x, y = random_free_location_for_sprite(grid, sprite)\n        blit_sprite(grid, sprite, x, y)\n\n    return grid",
    "examples": [
      [
        [
          [
            2,
            0,
            0,
            3,
            3,
            3
          ],
          [
            2,
            3,
            1,
            2,
            2,
            3
          ],
          [
            3,
            3,
            1,
            2,
            2,
            3
          ],
          [
            3,
            0,
            1,
            2,
            2,
            3
          ],
          [
            2,
            3,
            3,
            3,
            3,
            3
          ],
          [
            2,
            3,
            0,
            0,
            0,
            3
          ]
        ],
        [
          [
            2,
            0,
            0,
            3,
            3,
            3
          ],
          [
            2,
            3,
            1,
            2,
            2,
            3
          ],
          [
            4,
            3,
            1,
            2,
            2,
            3
          ],
          [
            3,
            0,
            1,
            2,
            2,
            3
          ],
          [
            2,
            3,
            7,
            4,
            4,
            3
          ],
          [
            2,
            3,
            0,
            0,
            0,
            3
          ]
        ]
      ],
      [
        [
          [
            0,
            2,
            2,
            3,
            3,
            3
          ],
          [
            3,
            1,
            1,
            1,
            0,
            0
          ],
          [
            3,
            1,
            1,
            1,
            1,
            0
          ],
          [
            2,
            3,
            3,
            0,
            1,
            0
          ],
          [
            2,
            3,
            3,
            0,
            1,
            0
          ],
          [
            1,
            3,
            3,
            1,
            1,
            0
          ]
        ],
        [
          [
            0,
            2,
            2,
            3,
            3,
            3
          ],
          [
            3,
            8,
            8,
            1,
            0,
            0
          ],
          [
            3,
            1,
            1,
            1,
            1,
            0
          ],
          [
            2,
            7,
            7,
            0,
            1,
            0
          ],
          [
            2,
            3,
            3,
            0,
            1,
            0
          ],
          [
            8,
            3,
            3,
            1,
            1,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            1,
            1,
            2,
            3,
            0
          ],
          [
            0,
            2,
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            3,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            1,
            1,
            2,
            3,
            0
          ],
          [
            0,
            2,
            0,
            0,
            3,
            0
          ],
          [
            0,
            0,
            0,
            0,
            3,
            0
          ],
          [
            0,
            2,
            2,
            2,
            0,
            0
          ],
          [
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ],
      [
        [
          [
            0,
            2,
            0,
            2,
            2,
            1
          ],
          [
            0,
            2,
            0,
            2,
            2,
            1
          ],
          [
            3,
            3,
            3,
            2,
            2,
            1
          ],
          [
            3,
            3,
            3,
            2,
            2,
            2
          ],
          [
            3,
            3,
            3,
            2,
            2,
            2
          ],
          [
            0,
            1,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            2,
            0,
            2,
            2,
            1
          ],
          [
            0,
            2,
            0,
            2,
            2,
            1
          ],
          [
            3,
            4,
            3,
            2,
            2,
            1
          ],
          [
            3,
            3,
            3,
            2,
            2,
            2
          ],
          [
            3,
            3,
            3,
            2,
            2,
            2
          ],
          [
            0,
            1,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    ],
    "seeds": [
      "017c7c7b.py",
      "1caeab9d.py",
      "3618c87e.py",
      "a79310a0.py"
    ],
    "problem_id": 98435
  }
]